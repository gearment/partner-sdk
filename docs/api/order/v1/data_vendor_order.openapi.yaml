openapi: 3.1.0
info:
  contact:
    email: engineering@gearment.com
    name: Gearment Engineering Team
    url: https://gearment.com
  license: {}
  termsOfService: "https://gearment.com/integration/api-terms-of-service.html"
  title: "api.order.v1"
  version: "3.0.0"
servers:
  - url: "https://api.dev.geadev.com/{serviceName}"
    description: "Staging Server"
    variables:
      serviceName:
        default: "iam"
        enum:
          - iam
          - product
          - seller
        description: "The service name"
  - url: "http://localhost:{servicePort}"
    description: "Local Server"
    variables:
      servicePort:
        default: "9000"
        description: "The port number"
paths: {}
components:
  schemas:
    api.order.v1.VendorCreatedMethod:
      type: string
      title: VendorCreatedMethod
      enum:
        - VENDOR_CREATED_METHOD_UNKNOWN
        - VENDOR_CREATED_METHOD_SYNC
        - VENDOR_CREATED_METHOD_MANUAL
        - VENDOR_CREATED_METHOD_API
        - VENDOR_CREATED_METHOD_IMPORT
        - VENDOR_CREATED_METHOD_LABEL
        - VENDOR_CREATED_METHOD_ALL
    api.order.v1.VendorOrderStatus:
      type: string
      title: VendorOrderStatus
      enum:
        - VENDOR_ORDER_STATUS_UNKNOWN
        - VENDOR_ORDER_STATUS_AWAITING_PAYMENT
        - VENDOR_ORDER_STATUS_PAYMENT_FAILED
        - VENDOR_ORDER_STATUS_AWAITING_FULFILLMENT
        - VENDOR_ORDER_STATUS_IN_PRODUCTION
        - VENDOR_ORDER_STATUS_PACKED
        - VENDOR_ORDER_STATUS_SHIPPED
        - VENDOR_ORDER_STATUS_CANCELLED
        - VENDOR_ORDER_STATUS_ON_HOLD
        - VENDOR_ORDER_STATUS_ALL
    common.platform.v1.MarketplacePlatform:
      type: string
      title: MarketplacePlatform
      enum:
        - MARKETPLACE_PLATFORM_UNSPECIFIED
        - MARKETPLACE_PLATFORM_ALL
        - MARKETPLACE_PLATFORM_EBAY
        - MARKETPLACE_PLATFORM_AMAZON
        - MARKETPLACE_PLATFORM_SHOPIFY
        - MARKETPLACE_PLATFORM_WOOCOMMERCE
        - MARKETPLACE_PLATFORM_ETSY
        - MARKETPLACE_PLATFORM_SHOPBASE
        - MARKETPLACE_PLATFORM_GEARMENT
        - MARKETPLACE_PLATFORM_ORDERDESK
        - MARKETPLACE_PLATFORM_TIKTOKSHOP
        - MARKETPLACE_PLATFORM_POSHMARK
        - MARKETPLACE_PLATFORM_PRESTASHOP
        - MARKETPLACE_PLATFORM_INKGO
        - MARKETPLACE_PLATFORM_WISH
        - MARKETPLACE_PLATFORM_BIGCOMMERCE
    api.order.v1.VendorOrder:
      type: object
      properties:
        orderId:
          type: string
          title: order_id
          additionalProperties: false
          description: '@gotags: mapstructure:"order_id"'
        teamId:
          type: string
          title: team_id
          additionalProperties: false
          description: '@gotags: mapstructure:"team_id"'
        storeId:
          type: string
          title: store_id
          additionalProperties: false
          description: '@gotags: mapstructure:"store_id"'
        storeName:
          type: string
          title: store_name
          additionalProperties: false
          description: '@gotags: mapstructure:"store_name"'
        createdMethod:
          $ref: '#/components/schemas/api.order.v1.VendorCreatedMethod'
        orderPlatform:
          $ref: '#/components/schemas/common.platform.v1.MarketplacePlatform'
        platformRef:
          type: string
          title: platform_ref
          additionalProperties: false
          description: '@gotags: mapstructure:"platform_ref"'
        orderDate:
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        approvedAt:
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        paidAt:
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        orderStatus:
          $ref: '#/components/schemas/api.order.v1.VendorOrderStatus'
      title: VendorOrder
      additionalProperties: false
    api.order.v1.VendorOrderFilter:
      type: object
      properties:
        orderIds:
          type: array
          items:
            type: string
            title: order_ids
            additionalProperties: false
            description: '@gotags: form:"order_ids,omitempty"'
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/api.order.v1.VendorOrderStatus'
        createdMethods:
          type: array
          items:
            $ref: '#/components/schemas/api.order.v1.VendorCreatedMethod'
        createdAtMin:
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        createdAtMax:
          $ref: '#/components/schemas/google.protobuf.Timestamp'
      title: VendorOrderFilter
      additionalProperties: false
    google.protobuf.Timestamp:
      type: string
      format: date-time
      additionalProperties: false
      description: |-
        A Timestamp represents a point in time independent of any time zone or local
         calendar, encoded as a count of seconds and fractions of seconds at
         nanosecond resolution. The count is relative to an epoch at UTC midnight on
         January 1, 1970, in the proleptic Gregorian calendar which extends the
         Gregorian calendar backwards to year one.

         All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
         second table is needed for interpretation, using a [24-hour linear
         smear](https://developers.google.com/time/smear).

         The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
         restricting to that range, we ensure that we can convert to and from [RFC
         3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

         # Examples

         Example 1: Compute Timestamp from POSIX `time()`.

             Timestamp timestamp;
             timestamp.set_seconds(time(NULL));
             timestamp.set_nanos(0);

         Example 2: Compute Timestamp from POSIX `gettimeofday()`.

             struct timeval tv;
             gettimeofday(&tv, NULL);

             Timestamp timestamp;
             timestamp.set_seconds(tv.tv_sec);
             timestamp.set_nanos(tv.tv_usec * 1000);

         Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

             FILETIME ft;
             GetSystemTimeAsFileTime(&ft);
             UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

             // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
             // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
             Timestamp timestamp;
             timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
             timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

         Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

             long millis = System.currentTimeMillis();

             Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
                 .setNanos((int) ((millis % 1000) * 1000000)).build();

         Example 5: Compute Timestamp from Java `Instant.now()`.

             Instant now = Instant.now();

             Timestamp timestamp =
                 Timestamp.newBuilder().setSeconds(now.getEpochSecond())
                     .setNanos(now.getNano()).build();

         Example 6: Compute Timestamp from current time in Python.

             timestamp = Timestamp()
             timestamp.GetCurrentTime()

         # JSON Mapping

         In JSON format, the Timestamp type is encoded as a string in the
         [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
         format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
         where {year} is always expressed using four digits while {month}, {day},
         {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
         seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
         are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
         is required. A proto3 JSON serializer should always use UTC (as indicated by
         "Z") when printing the Timestamp type and a proto3 JSON parser should be
         able to accept both UTC and other timezones (as indicated by an offset).

         For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
         01:30 UTC on January 15, 2017.

         In JavaScript, one can convert a Date object to this format using the
         standard
         [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
         method. In Python, a standard `datetime.datetime` object can be converted
         to this format using
         [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
         the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
         the Joda Time's [`ISODateTimeFormat.dateTime()`](
         http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
         ) to obtain a formatter capable of generating timestamps in this format.
    connect.error:
      type: object
      properties:
        code:
          type: string
          examples:
            - CodeNotFound
          enum:
            - CodeCanceled
            - CodeUnknown
            - CodeInvalidArgument
            - CodeDeadlineExceeded
            - CodeNotFound
            - CodeAlreadyExists
            - CodePermissionDenied
            - CodeResourceExhausted
            - CodeFailedPrecondition
            - CodeAborted
            - CodeOutOfRange
            - CodeInternal
            - CodeUnavailable
            - CodeDataLoss
            - CodeUnauthenticated
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        detail:
          $ref: '#/components/schemas/google.protobuf.Any'
      title: Connect Error
      additionalProperties: true
      description: 'Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation'
    google.protobuf.Any:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
          format: binary
        debug:
          type: object
          additionalProperties: true
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      in: header
      name: Authorization
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    CookieAuth:
      type: apiKey
      scheme: bearer
      in: cookie
      name: accessToken
security: []
externalDocs:
  description: "Find out more about Gearment API v3"
  url: "https://gearment.com/integration/api-docs.html"
