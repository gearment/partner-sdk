// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/catalog/v1/data_vendor_catalog.proto

package catalogv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/gearment/gea-next/vendorsdk/common/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VendorCatalogVariantStockLabel int32

const (
	VendorCatalogVariantStockLabel_VENDOR_CATALOG_VARIANT_STOCK_LABEL_UNKNOWN         VendorCatalogVariantStockLabel = 0
	VendorCatalogVariantStockLabel_VENDOR_CATALOG_VARIANT_STOCK_LABEL_IN_STOCK        VendorCatalogVariantStockLabel = 1 // In stock and available
	VendorCatalogVariantStockLabel_VENDOR_CATALOG_VARIANT_STOCK_LABEL_OUT_OF_STOCK    VendorCatalogVariantStockLabel = 2 // Out of stock
	VendorCatalogVariantStockLabel_VENDOR_CATALOG_VARIANT_STOCK_LABEL_OUT_OF_STOCK_5D VendorCatalogVariantStockLabel = 3 // Out of stock, restock in 5 days
	VendorCatalogVariantStockLabel_VENDOR_CATALOG_VARIANT_STOCK_LABEL_DISCONTINUED    VendorCatalogVariantStockLabel = 4 // Discontinued, no longer available
	VendorCatalogVariantStockLabel_VENDOR_CATALOG_VARIANT_STOCK_LABEL_ALL             VendorCatalogVariantStockLabel = 5 // All stock statuses (used for filtering)
)

// Enum value maps for VendorCatalogVariantStockLabel.
var (
	VendorCatalogVariantStockLabel_name = map[int32]string{
		0: "VENDOR_CATALOG_VARIANT_STOCK_LABEL_UNKNOWN",
		1: "VENDOR_CATALOG_VARIANT_STOCK_LABEL_IN_STOCK",
		2: "VENDOR_CATALOG_VARIANT_STOCK_LABEL_OUT_OF_STOCK",
		3: "VENDOR_CATALOG_VARIANT_STOCK_LABEL_OUT_OF_STOCK_5D",
		4: "VENDOR_CATALOG_VARIANT_STOCK_LABEL_DISCONTINUED",
		5: "VENDOR_CATALOG_VARIANT_STOCK_LABEL_ALL",
	}
	VendorCatalogVariantStockLabel_value = map[string]int32{
		"VENDOR_CATALOG_VARIANT_STOCK_LABEL_UNKNOWN":         0,
		"VENDOR_CATALOG_VARIANT_STOCK_LABEL_IN_STOCK":        1,
		"VENDOR_CATALOG_VARIANT_STOCK_LABEL_OUT_OF_STOCK":    2,
		"VENDOR_CATALOG_VARIANT_STOCK_LABEL_OUT_OF_STOCK_5D": 3,
		"VENDOR_CATALOG_VARIANT_STOCK_LABEL_DISCONTINUED":    4,
		"VENDOR_CATALOG_VARIANT_STOCK_LABEL_ALL":             5,
	}
)

func (x VendorCatalogVariantStockLabel) Enum() *VendorCatalogVariantStockLabel {
	p := new(VendorCatalogVariantStockLabel)
	*p = x
	return p
}

func (x VendorCatalogVariantStockLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VendorCatalogVariantStockLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_catalog_v1_data_vendor_catalog_proto_enumTypes[0].Descriptor()
}

func (VendorCatalogVariantStockLabel) Type() protoreflect.EnumType {
	return &file_api_catalog_v1_data_vendor_catalog_proto_enumTypes[0]
}

func (x VendorCatalogVariantStockLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VendorCatalogVariantStockLabel.Descriptor instead.
func (VendorCatalogVariantStockLabel) EnumDescriptor() ([]byte, []int) {
	return file_api_catalog_v1_data_vendor_catalog_proto_rawDescGZIP(), []int{0}
}

type VendorCatalog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Product ID
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Product name (e.g., "Unisex T-Shirt", "Hoodie")
	ProductName string `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// Product main image URL
	ProductAvatarUrl string `protobuf:"bytes,3,opt,name=product_avatar_url,json=productAvatarUrl,proto3" json:"product_avatar_url,omitempty"`
	// Available print locations for this product
	PrintLocations []*VendorCatalogPrintLocation `protobuf:"bytes,4,rep,name=print_locations,json=printLocations,proto3" json:"print_locations,omitempty"`
	// Available variants (size/color combinations)
	Variants []*VendorCatalogVariant `protobuf:"bytes,5,rep,name=variants,proto3" json:"variants,omitempty"`
	// Legacy product ID (for backward compatibility)
	LegacyProductId int32 `protobuf:"varint,6,opt,name=legacy_product_id,json=legacyProductId,proto3" json:"legacy_product_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VendorCatalog) Reset() {
	*x = VendorCatalog{}
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCatalog) ProtoMessage() {}

func (x *VendorCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCatalog.ProtoReflect.Descriptor instead.
func (*VendorCatalog) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_data_vendor_catalog_proto_rawDescGZIP(), []int{0}
}

func (x *VendorCatalog) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *VendorCatalog) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *VendorCatalog) GetProductAvatarUrl() string {
	if x != nil {
		return x.ProductAvatarUrl
	}
	return ""
}

func (x *VendorCatalog) GetPrintLocations() []*VendorCatalogPrintLocation {
	if x != nil {
		return x.PrintLocations
	}
	return nil
}

func (x *VendorCatalog) GetVariants() []*VendorCatalogVariant {
	if x != nil {
		return x.Variants
	}
	return nil
}

func (x *VendorCatalog) GetLegacyProductId() int32 {
	if x != nil {
		return x.LegacyProductId
	}
	return 0
}

type VendorCatalogVariant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Variant ID (unique identifier)
	VariantId string `protobuf:"bytes,1,opt,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"`
	// Variant name (e.g., "Black / Medium")
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Size (e.g., "S", "M", "L", "XL")
	Size string `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	// Color name (e.g., "Black", "White", "Navy")
	Color string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	// Color hex code (e.g., "#000000", "#FFFFFF")
	HexColorCode string `protobuf:"bytes,5,opt,name=hex_color_code,json=hexColorCode,proto3" json:"hex_color_code,omitempty"`
	// Base price for this variant
	Price *v1.Money `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	// Recommended retail price
	RecommendedPrice *v1.Money `protobuf:"bytes,7,opt,name=recommended_price,json=recommendedPrice,proto3" json:"recommended_price,omitempty"`
	// Extra price for special features (if applicable)
	ExtraPrice *v1.Money `protobuf:"bytes,8,opt,name=extra_price,json=extraPrice,proto3" json:"extra_price,omitempty"`
	// Stock availability status
	StockLabel VendorCatalogVariantStockLabel `protobuf:"varint,9,opt,name=stock_label,json=stockLabel,proto3,enum=api.catalog.v1.VendorCatalogVariantStockLabel" json:"stock_label,omitempty"`
	// Parent product information
	Product *VendorCatalog `protobuf:"bytes,10,opt,name=product,proto3" json:"product,omitempty"`
	// Legacy variant ID (for backward compatibility)
	LegacyVariantId int32 `protobuf:"varint,11,opt,name=legacy_variant_id,json=legacyVariantId,proto3" json:"legacy_variant_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VendorCatalogVariant) Reset() {
	*x = VendorCatalogVariant{}
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorCatalogVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCatalogVariant) ProtoMessage() {}

func (x *VendorCatalogVariant) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCatalogVariant.ProtoReflect.Descriptor instead.
func (*VendorCatalogVariant) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_data_vendor_catalog_proto_rawDescGZIP(), []int{1}
}

func (x *VendorCatalogVariant) GetVariantId() string {
	if x != nil {
		return x.VariantId
	}
	return ""
}

func (x *VendorCatalogVariant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorCatalogVariant) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *VendorCatalogVariant) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *VendorCatalogVariant) GetHexColorCode() string {
	if x != nil {
		return x.HexColorCode
	}
	return ""
}

func (x *VendorCatalogVariant) GetPrice() *v1.Money {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *VendorCatalogVariant) GetRecommendedPrice() *v1.Money {
	if x != nil {
		return x.RecommendedPrice
	}
	return nil
}

func (x *VendorCatalogVariant) GetExtraPrice() *v1.Money {
	if x != nil {
		return x.ExtraPrice
	}
	return nil
}

func (x *VendorCatalogVariant) GetStockLabel() VendorCatalogVariantStockLabel {
	if x != nil {
		return x.StockLabel
	}
	return VendorCatalogVariantStockLabel_VENDOR_CATALOG_VARIANT_STOCK_LABEL_UNKNOWN
}

func (x *VendorCatalogVariant) GetProduct() *VendorCatalog {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *VendorCatalogVariant) GetLegacyVariantId() int32 {
	if x != nil {
		return x.LegacyVariantId
	}
	return 0
}

type VendorCatalogPrintLocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Print location code (e.g., "front", "back", "pocket")
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Print location display name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Internal location ID
	LocationId    int32 `protobuf:"varint,3,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorCatalogPrintLocation) Reset() {
	*x = VendorCatalogPrintLocation{}
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorCatalogPrintLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCatalogPrintLocation) ProtoMessage() {}

func (x *VendorCatalogPrintLocation) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCatalogPrintLocation.ProtoReflect.Descriptor instead.
func (*VendorCatalogPrintLocation) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_data_vendor_catalog_proto_rawDescGZIP(), []int{2}
}

func (x *VendorCatalogPrintLocation) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VendorCatalogPrintLocation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorCatalogPrintLocation) GetLocationId() int32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

type VendorCatalogFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter by specific product IDs
	ProductIds []string `protobuf:"bytes,1,rep,name=product_ids,json=productIds,proto3" json:"product_ids,omitempty"`
	// Search products by name or description
	SearchText    string `protobuf:"bytes,2,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorCatalogFilter) Reset() {
	*x = VendorCatalogFilter{}
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorCatalogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCatalogFilter) ProtoMessage() {}

func (x *VendorCatalogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCatalogFilter.ProtoReflect.Descriptor instead.
func (*VendorCatalogFilter) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_data_vendor_catalog_proto_rawDescGZIP(), []int{3}
}

func (x *VendorCatalogFilter) GetProductIds() []string {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

func (x *VendorCatalogFilter) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

type VendorCatalogVariantFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter by product IDs
	ProductIds []string `protobuf:"bytes,1,rep,name=product_ids,json=productIds,proto3" json:"product_ids,omitempty"`
	// Filter by specific variant IDs
	VariantIds []string `protobuf:"bytes,2,rep,name=variant_ids,json=variantIds,proto3" json:"variant_ids,omitempty"`
	// Filter by SKUs
	Skus []string `protobuf:"bytes,3,rep,name=skus,proto3" json:"skus,omitempty"`
	// Filter by sizes (display names)
	Sizes []string `protobuf:"bytes,4,rep,name=sizes,proto3" json:"sizes,omitempty"`
	// Filter by size codes (internal codes)
	SizeCodes []string `protobuf:"bytes,5,rep,name=size_codes,json=sizeCodes,proto3" json:"size_codes,omitempty"`
	// Filter by colors (display names)
	Colors []string `protobuf:"bytes,6,rep,name=colors,proto3" json:"colors,omitempty"`
	// Filter by color codes (internal codes or hex)
	ColorCodes []string `protobuf:"bytes,7,rep,name=color_codes,json=colorCodes,proto3" json:"color_codes,omitempty"`
	// Filter by stock availability
	StockLabels []VendorCatalogVariantStockLabel `protobuf:"varint,8,rep,packed,name=stock_labels,json=stockLabels,proto3,enum=api.catalog.v1.VendorCatalogVariantStockLabel" json:"stock_labels,omitempty"`
	// Search variants by text
	SearchText string `protobuf:"bytes,9,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
	// Filter by legacy variant IDs (for backward compatibility)
	LegacyVariantIds []int32 `protobuf:"varint,10,rep,packed,name=legacy_variant_ids,json=legacyVariantIds,proto3" json:"legacy_variant_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *VendorCatalogVariantFilter) Reset() {
	*x = VendorCatalogVariantFilter{}
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorCatalogVariantFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCatalogVariantFilter) ProtoMessage() {}

func (x *VendorCatalogVariantFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCatalogVariantFilter.ProtoReflect.Descriptor instead.
func (*VendorCatalogVariantFilter) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_data_vendor_catalog_proto_rawDescGZIP(), []int{4}
}

func (x *VendorCatalogVariantFilter) GetProductIds() []string {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

func (x *VendorCatalogVariantFilter) GetVariantIds() []string {
	if x != nil {
		return x.VariantIds
	}
	return nil
}

func (x *VendorCatalogVariantFilter) GetSkus() []string {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *VendorCatalogVariantFilter) GetSizes() []string {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *VendorCatalogVariantFilter) GetSizeCodes() []string {
	if x != nil {
		return x.SizeCodes
	}
	return nil
}

func (x *VendorCatalogVariantFilter) GetColors() []string {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *VendorCatalogVariantFilter) GetColorCodes() []string {
	if x != nil {
		return x.ColorCodes
	}
	return nil
}

func (x *VendorCatalogVariantFilter) GetStockLabels() []VendorCatalogVariantStockLabel {
	if x != nil {
		return x.StockLabels
	}
	return nil
}

func (x *VendorCatalogVariantFilter) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *VendorCatalogVariantFilter) GetLegacyVariantIds() []int32 {
	if x != nil {
		return x.LegacyVariantIds
	}
	return nil
}

type LegacyVendorCatalog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Product name
	ProductName string `protobuf:"bytes,1,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// Product ID (legacy integer format as string)
	ProductId string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Product image URL
	ProductImg string `protobuf:"bytes,3,opt,name=product_img,json=productImg,proto3" json:"product_img,omitempty"`
	// Available print areas (e.g., ["front", "back"])
	PrintAreas []string `protobuf:"bytes,4,rep,name=print_areas,json=printAreas,proto3" json:"print_areas,omitempty"`
	// Available variants
	Variants      []*LegacyVendorCatalogVariant `protobuf:"bytes,5,rep,name=variants,proto3" json:"variants,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorCatalog) Reset() {
	*x = LegacyVendorCatalog{}
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorCatalog) ProtoMessage() {}

func (x *LegacyVendorCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorCatalog.ProtoReflect.Descriptor instead.
func (*LegacyVendorCatalog) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_data_vendor_catalog_proto_rawDescGZIP(), []int{5}
}

func (x *LegacyVendorCatalog) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *LegacyVendorCatalog) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *LegacyVendorCatalog) GetProductImg() string {
	if x != nil {
		return x.ProductImg
	}
	return ""
}

func (x *LegacyVendorCatalog) GetPrintAreas() []string {
	if x != nil {
		return x.PrintAreas
	}
	return nil
}

func (x *LegacyVendorCatalog) GetVariants() []*LegacyVendorCatalogVariant {
	if x != nil {
		return x.Variants
	}
	return nil
}

type LegacyVendorCatalogVariant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Variant ID (legacy integer format as string)
	VariantId string `protobuf:"bytes,1,opt,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"`
	// Variant name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Size (e.g., "M", "L")
	Size string `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	// Color name
	Color string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	// Color hex code
	HexColorCode string `protobuf:"bytes,5,opt,name=hex_color_code,json=hexColorCode,proto3" json:"hex_color_code,omitempty"`
	// Price (as string for legacy compatibility)
	Price string `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	// Extra price (as string for legacy compatibility)
	ExtraPrice string `protobuf:"bytes,7,opt,name=extra_price,json=extraPrice,proto3" json:"extra_price,omitempty"`
	// Net price (calculated price)
	NetPrice float32 `protobuf:"fixed32,8,opt,name=net_price,json=netPrice,proto3" json:"net_price,omitempty"`
	// Availability status (e.g., "in_stock", "out_of_stock")
	AvailabilityStatus string `protobuf:"bytes,9,opt,name=availability_status,json=availabilityStatus,proto3" json:"availability_status,omitempty"`
	// General status
	Status        string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorCatalogVariant) Reset() {
	*x = LegacyVendorCatalogVariant{}
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorCatalogVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorCatalogVariant) ProtoMessage() {}

func (x *LegacyVendorCatalogVariant) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_data_vendor_catalog_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorCatalogVariant.ProtoReflect.Descriptor instead.
func (*LegacyVendorCatalogVariant) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_data_vendor_catalog_proto_rawDescGZIP(), []int{6}
}

func (x *LegacyVendorCatalogVariant) GetVariantId() string {
	if x != nil {
		return x.VariantId
	}
	return ""
}

func (x *LegacyVendorCatalogVariant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LegacyVendorCatalogVariant) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *LegacyVendorCatalogVariant) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *LegacyVendorCatalogVariant) GetHexColorCode() string {
	if x != nil {
		return x.HexColorCode
	}
	return ""
}

func (x *LegacyVendorCatalogVariant) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *LegacyVendorCatalogVariant) GetExtraPrice() string {
	if x != nil {
		return x.ExtraPrice
	}
	return ""
}

func (x *LegacyVendorCatalogVariant) GetNetPrice() float32 {
	if x != nil {
		return x.NetPrice
	}
	return 0
}

func (x *LegacyVendorCatalogVariant) GetAvailabilityStatus() string {
	if x != nil {
		return x.AvailabilityStatus
	}
	return ""
}

func (x *LegacyVendorCatalogVariant) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_api_catalog_v1_data_vendor_catalog_proto protoreflect.FileDescriptor

var file_api_catalog_v1_data_vendor_catalog_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x02, 0x0a, 0x0d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x53, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x82, 0x04, 0x0a, 0x14, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24,
	0x0a, 0x0e, 0x68, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x42, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x65, 0x0a,
	0x1a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x1c, 0xba, 0x48, 0x19, 0x92, 0x01, 0x16, 0x22, 0x14, 0x72, 0x12, 0x10, 0x01, 0x18,
	0x64, 0x92, 0x02, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x61, 0x62, 0x63, 0x31, 0x32, 0x33, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xba, 0x48, 0x15, 0x72, 0x13, 0x18, 0x64, 0x92, 0x02, 0x0e, 0x55, 0x6e, 0x69, 0x73,
	0x65, 0x78, 0x20, 0x54, 0x2d, 0x53, 0x68, 0x69, 0x72, 0x74, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x22, 0xf2, 0x04, 0x0a, 0x1a, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x19, 0x92,
	0x01, 0x16, 0x22, 0x14, 0x72, 0x12, 0x10, 0x01, 0x18, 0x64, 0x92, 0x02, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x61, 0x62, 0x63, 0x31, 0x32, 0x33, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0xba, 0x48, 0x15, 0x92, 0x01,
	0x12, 0x22, 0x10, 0x72, 0x0e, 0x10, 0x01, 0x18, 0x64, 0x92, 0x02, 0x07, 0x76, 0x61, 0x72, 0x5f,
	0x31, 0x32, 0x33, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x31, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1d, 0xba,
	0x48, 0x1a, 0x92, 0x01, 0x17, 0x22, 0x15, 0x72, 0x13, 0x10, 0x01, 0x18, 0x64, 0x92, 0x02, 0x0c,
	0x53, 0x4b, 0x55, 0x2d, 0x54, 0x53, 0x2d, 0x42, 0x4c, 0x4b, 0x2d, 0x4d, 0x52, 0x04, 0x73, 0x6b,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x12, 0xba, 0x48, 0x0f, 0x92, 0x01, 0x0c, 0x22, 0x0a, 0x72, 0x08, 0x10, 0x01, 0x18,
	0x64, 0x92, 0x02, 0x01, 0x4d, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x17, 0xba, 0x48, 0x14, 0x92, 0x01, 0x11, 0x22, 0x0f, 0x72, 0x0d, 0x10, 0x01, 0x18, 0x64,
	0x92, 0x02, 0x06, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x16, 0xba, 0x48, 0x13, 0x92, 0x01, 0x10, 0x22, 0x0e, 0x72, 0x0c,
	0x10, 0x01, 0x18, 0x64, 0x92, 0x02, 0x05, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x19, 0x92, 0x01,
	0x16, 0x22, 0x14, 0x72, 0x12, 0x10, 0x01, 0x18, 0x64, 0x92, 0x02, 0x0b, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0x92, 0x01,
	0x07, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xba, 0x48, 0x11, 0x72,
	0x0f, 0x92, 0x02, 0x0c, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x12,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0x92, 0x01, 0x09,
	0x22, 0x07, 0x1a, 0x05, 0x40, 0xb9, 0x60, 0x20, 0x00, 0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x13,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6d, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x22,
	0xbc, 0x02, 0x0a, 0x1a, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x68,
	0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0xcf,
	0x02, 0x0a, 0x1e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x41,
	0x4c, 0x4f, 0x47, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x41,
	0x4c, 0x4f, 0x47, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54,
	0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f,
	0x43, 0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x36, 0x0a, 0x32, 0x56, 0x45, 0x4e, 0x44, 0x4f,
	0x52, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x35, 0x44, 0x10, 0x03, 0x12,
	0x33, 0x0a, 0x2f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f,
	0x47, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x43,
	0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x05,
	0x42, 0xc7, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x16, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65,
	0x61, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x61, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x64, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58, 0xaa, 0x02, 0x0e, 0x41, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x41, 0x70, 0x69, 0x5c,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x41, 0x70, 0x69,
	0x5c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_api_catalog_v1_data_vendor_catalog_proto_rawDescOnce sync.Once
	file_api_catalog_v1_data_vendor_catalog_proto_rawDescData []byte
)

func file_api_catalog_v1_data_vendor_catalog_proto_rawDescGZIP() []byte {
	file_api_catalog_v1_data_vendor_catalog_proto_rawDescOnce.Do(func() {
		file_api_catalog_v1_data_vendor_catalog_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_catalog_v1_data_vendor_catalog_proto_rawDesc), len(file_api_catalog_v1_data_vendor_catalog_proto_rawDesc)))
	})
	return file_api_catalog_v1_data_vendor_catalog_proto_rawDescData
}

var file_api_catalog_v1_data_vendor_catalog_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_catalog_v1_data_vendor_catalog_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_catalog_v1_data_vendor_catalog_proto_goTypes = []any{
	(VendorCatalogVariantStockLabel)(0), // 0: api.catalog.v1.VendorCatalogVariantStockLabel
	(*VendorCatalog)(nil),               // 1: api.catalog.v1.VendorCatalog
	(*VendorCatalogVariant)(nil),        // 2: api.catalog.v1.VendorCatalogVariant
	(*VendorCatalogPrintLocation)(nil),  // 3: api.catalog.v1.VendorCatalogPrintLocation
	(*VendorCatalogFilter)(nil),         // 4: api.catalog.v1.VendorCatalogFilter
	(*VendorCatalogVariantFilter)(nil),  // 5: api.catalog.v1.VendorCatalogVariantFilter
	(*LegacyVendorCatalog)(nil),         // 6: api.catalog.v1.LegacyVendorCatalog
	(*LegacyVendorCatalogVariant)(nil),  // 7: api.catalog.v1.LegacyVendorCatalogVariant
	(*v1.Money)(nil),                    // 8: common.type.v1.Money
}
var file_api_catalog_v1_data_vendor_catalog_proto_depIdxs = []int32{
	3, // 0: api.catalog.v1.VendorCatalog.print_locations:type_name -> api.catalog.v1.VendorCatalogPrintLocation
	2, // 1: api.catalog.v1.VendorCatalog.variants:type_name -> api.catalog.v1.VendorCatalogVariant
	8, // 2: api.catalog.v1.VendorCatalogVariant.price:type_name -> common.type.v1.Money
	8, // 3: api.catalog.v1.VendorCatalogVariant.recommended_price:type_name -> common.type.v1.Money
	8, // 4: api.catalog.v1.VendorCatalogVariant.extra_price:type_name -> common.type.v1.Money
	0, // 5: api.catalog.v1.VendorCatalogVariant.stock_label:type_name -> api.catalog.v1.VendorCatalogVariantStockLabel
	1, // 6: api.catalog.v1.VendorCatalogVariant.product:type_name -> api.catalog.v1.VendorCatalog
	0, // 7: api.catalog.v1.VendorCatalogVariantFilter.stock_labels:type_name -> api.catalog.v1.VendorCatalogVariantStockLabel
	7, // 8: api.catalog.v1.LegacyVendorCatalog.variants:type_name -> api.catalog.v1.LegacyVendorCatalogVariant
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_api_catalog_v1_data_vendor_catalog_proto_init() }
func file_api_catalog_v1_data_vendor_catalog_proto_init() {
	if File_api_catalog_v1_data_vendor_catalog_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_catalog_v1_data_vendor_catalog_proto_rawDesc), len(file_api_catalog_v1_data_vendor_catalog_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_catalog_v1_data_vendor_catalog_proto_goTypes,
		DependencyIndexes: file_api_catalog_v1_data_vendor_catalog_proto_depIdxs,
		EnumInfos:         file_api_catalog_v1_data_vendor_catalog_proto_enumTypes,
		MessageInfos:      file_api_catalog_v1_data_vendor_catalog_proto_msgTypes,
	}.Build()
	File_api_catalog_v1_data_vendor_catalog_proto = out.File
	file_api_catalog_v1_data_vendor_catalog_proto_goTypes = nil
	file_api_catalog_v1_data_vendor_catalog_proto_depIdxs = nil
}
