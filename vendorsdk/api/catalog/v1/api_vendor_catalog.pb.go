// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/catalog/v1/api_vendor_catalog.proto

package catalogv1

import (
	v1 "github.com/gearment/gea-next/vendorsdk/common/type/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VendorListCatalogRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *VendorCatalogFilter   `protobuf:"bytes,1,opt,name=filter,json=@squash.filter,proto3" json:"filter,omitempty"`
	Paging        *v1.Paging             `protobuf:"bytes,2,opt,name=paging,json=@squash.paging,proto3" json:"paging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorListCatalogRequest) Reset() {
	*x = VendorListCatalogRequest{}
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorListCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorListCatalogRequest) ProtoMessage() {}

func (x *VendorListCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorListCatalogRequest.ProtoReflect.Descriptor instead.
func (*VendorListCatalogRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_api_vendor_catalog_proto_rawDescGZIP(), []int{0}
}

func (x *VendorListCatalogRequest) GetFilter() *VendorCatalogFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *VendorListCatalogRequest) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type VendorListCatalogResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Paging        *v1.PagingResponse     `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
	Data          []*VendorCatalog       `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorListCatalogResponse) Reset() {
	*x = VendorListCatalogResponse{}
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorListCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorListCatalogResponse) ProtoMessage() {}

func (x *VendorListCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorListCatalogResponse.ProtoReflect.Descriptor instead.
func (*VendorListCatalogResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_api_vendor_catalog_proto_rawDescGZIP(), []int{1}
}

func (x *VendorListCatalogResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VendorListCatalogResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VendorListCatalogResponse) GetPaging() *v1.PagingResponse {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *VendorListCatalogResponse) GetData() []*VendorCatalog {
	if x != nil {
		return x.Data
	}
	return nil
}

type VendorListCatalogVariantRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Filter        *VendorCatalogVariantFilter `protobuf:"bytes,1,opt,name=filter,json=@squash.filter,proto3" json:"filter,omitempty"`
	Paging        *v1.Paging                  `protobuf:"bytes,2,opt,name=paging,json=@squash.paging,proto3" json:"paging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorListCatalogVariantRequest) Reset() {
	*x = VendorListCatalogVariantRequest{}
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorListCatalogVariantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorListCatalogVariantRequest) ProtoMessage() {}

func (x *VendorListCatalogVariantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorListCatalogVariantRequest.ProtoReflect.Descriptor instead.
func (*VendorListCatalogVariantRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_api_vendor_catalog_proto_rawDescGZIP(), []int{2}
}

func (x *VendorListCatalogVariantRequest) GetFilter() *VendorCatalogVariantFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *VendorListCatalogVariantRequest) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type VendorListCatalogVariantResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Status        string                  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Paging        *v1.PagingResponse      `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
	Data          []*VendorCatalogVariant `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorListCatalogVariantResponse) Reset() {
	*x = VendorListCatalogVariantResponse{}
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorListCatalogVariantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorListCatalogVariantResponse) ProtoMessage() {}

func (x *VendorListCatalogVariantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorListCatalogVariantResponse.ProtoReflect.Descriptor instead.
func (*VendorListCatalogVariantResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_api_vendor_catalog_proto_rawDescGZIP(), []int{3}
}

func (x *VendorListCatalogVariantResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VendorListCatalogVariantResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VendorListCatalogVariantResponse) GetPaging() *v1.PagingResponse {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *VendorListCatalogVariantResponse) GetData() []*VendorCatalogVariant {
	if x != nil {
		return x.Data
	}
	return nil
}

type LegacyVendorListCatalogVariantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Paging        *v1.Paging             `protobuf:"bytes,1,opt,name=paging,proto3" json:"paging,omitempty"`
	Credentials   *v1.LegacyCredentials  `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorListCatalogVariantRequest) Reset() {
	*x = LegacyVendorListCatalogVariantRequest{}
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorListCatalogVariantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorListCatalogVariantRequest) ProtoMessage() {}

func (x *LegacyVendorListCatalogVariantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorListCatalogVariantRequest.ProtoReflect.Descriptor instead.
func (*LegacyVendorListCatalogVariantRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_api_vendor_catalog_proto_rawDescGZIP(), []int{4}
}

func (x *LegacyVendorListCatalogVariantRequest) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *LegacyVendorListCatalogVariantRequest) GetCredentials() *v1.LegacyCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type LegacyVendorListCatalogVariantResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Status        string                   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Paging        *v1.LegacyPagingResponse `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
	Result        []*LegacyVendorCatalog   `protobuf:"bytes,4,rep,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorListCatalogVariantResponse) Reset() {
	*x = LegacyVendorListCatalogVariantResponse{}
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorListCatalogVariantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorListCatalogVariantResponse) ProtoMessage() {}

func (x *LegacyVendorListCatalogVariantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorListCatalogVariantResponse.ProtoReflect.Descriptor instead.
func (*LegacyVendorListCatalogVariantResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_api_vendor_catalog_proto_rawDescGZIP(), []int{5}
}

func (x *LegacyVendorListCatalogVariantResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LegacyVendorListCatalogVariantResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LegacyVendorListCatalogVariantResponse) GetPaging() *v1.LegacyPagingResponse {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *LegacyVendorListCatalogVariantResponse) GetResult() []*LegacyVendorCatalog {
	if x != nil {
		return x.Result
	}
	return nil
}

type LegacyVendorListCatalogStockStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Paging        *v1.Paging             `protobuf:"bytes,1,opt,name=paging,proto3" json:"paging,omitempty"`
	Credentials   *v1.LegacyCredentials  `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorListCatalogStockStatusRequest) Reset() {
	*x = LegacyVendorListCatalogStockStatusRequest{}
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorListCatalogStockStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorListCatalogStockStatusRequest) ProtoMessage() {}

func (x *LegacyVendorListCatalogStockStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorListCatalogStockStatusRequest.ProtoReflect.Descriptor instead.
func (*LegacyVendorListCatalogStockStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_api_vendor_catalog_proto_rawDescGZIP(), []int{6}
}

func (x *LegacyVendorListCatalogStockStatusRequest) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *LegacyVendorListCatalogStockStatusRequest) GetCredentials() *v1.LegacyCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *LegacyVendorListCatalogStockStatusRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type LegacyVendorListCatalogStockStatusResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Status        string                        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Paging        *v1.LegacyPagingResponse      `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
	Result        []*LegacyVendorCatalogVariant `protobuf:"bytes,4,rep,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorListCatalogStockStatusResponse) Reset() {
	*x = LegacyVendorListCatalogStockStatusResponse{}
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorListCatalogStockStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorListCatalogStockStatusResponse) ProtoMessage() {}

func (x *LegacyVendorListCatalogStockStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_v1_api_vendor_catalog_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorListCatalogStockStatusResponse.ProtoReflect.Descriptor instead.
func (*LegacyVendorListCatalogStockStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_v1_api_vendor_catalog_proto_rawDescGZIP(), []int{7}
}

func (x *LegacyVendorListCatalogStockStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LegacyVendorListCatalogStockStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LegacyVendorListCatalogStockStatusResponse) GetPaging() *v1.LegacyPagingResponse {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *LegacyVendorListCatalogStockStatusResponse) GetResult() []*LegacyVendorCatalogVariant {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_api_catalog_v1_api_vendor_catalog_proto protoreflect.FileDescriptor

var file_api_catalog_v1_api_vendor_catalog_proto_rawDesc = string([]byte{
	0x0a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x28, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x40, 0x73, 0x71, 0x75,
	0x61, 0x73, 0x68, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x0e, 0x40, 0x73, 0x71, 0x75, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x22, 0xb8, 0x01, 0x0a, 0x19, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa5, 0x01,
	0x0a, 0x1f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x40,
	0x73, 0x71, 0x75, 0x61, 0x73, 0x68, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x40, 0x73, 0x71, 0x75, 0x61, 0x73, 0x68, 0x2e, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xc6, 0x01, 0x0a, 0x20, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x06,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c,
	0x01, 0x0a, 0x25, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xd5, 0x01,
	0x0a, 0x26, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x29, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe0, 0x01, 0x0a,
	0x2a, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a,
	0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32,
	0xe6, 0x03, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x41, 0x50, 0x49, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x9f, 0x01, 0x0a, 0x18,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0xa8, 0x01,
	0x0a, 0x1b, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x33, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x32, 0x9e, 0x03, 0x0a, 0x16, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x41, 0x50, 0x49, 0x12, 0xb8, 0x01, 0x0a, 0x1e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a,
	0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0xc8,
	0x01, 0x0a, 0x22, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0xc6, 0x01, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x42, 0x15, 0x41, 0x70, 0x69, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x61, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67,
	0x65, 0x61, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x64,
	0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58,
	0xaa, 0x02, 0x0e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x0e, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x1a, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x10, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_catalog_v1_api_vendor_catalog_proto_rawDescOnce sync.Once
	file_api_catalog_v1_api_vendor_catalog_proto_rawDescData []byte
)

func file_api_catalog_v1_api_vendor_catalog_proto_rawDescGZIP() []byte {
	file_api_catalog_v1_api_vendor_catalog_proto_rawDescOnce.Do(func() {
		file_api_catalog_v1_api_vendor_catalog_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_catalog_v1_api_vendor_catalog_proto_rawDesc), len(file_api_catalog_v1_api_vendor_catalog_proto_rawDesc)))
	})
	return file_api_catalog_v1_api_vendor_catalog_proto_rawDescData
}

var file_api_catalog_v1_api_vendor_catalog_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_catalog_v1_api_vendor_catalog_proto_goTypes = []any{
	(*VendorListCatalogRequest)(nil),                   // 0: api.catalog.v1.VendorListCatalogRequest
	(*VendorListCatalogResponse)(nil),                  // 1: api.catalog.v1.VendorListCatalogResponse
	(*VendorListCatalogVariantRequest)(nil),            // 2: api.catalog.v1.VendorListCatalogVariantRequest
	(*VendorListCatalogVariantResponse)(nil),           // 3: api.catalog.v1.VendorListCatalogVariantResponse
	(*LegacyVendorListCatalogVariantRequest)(nil),      // 4: api.catalog.v1.LegacyVendorListCatalogVariantRequest
	(*LegacyVendorListCatalogVariantResponse)(nil),     // 5: api.catalog.v1.LegacyVendorListCatalogVariantResponse
	(*LegacyVendorListCatalogStockStatusRequest)(nil),  // 6: api.catalog.v1.LegacyVendorListCatalogStockStatusRequest
	(*LegacyVendorListCatalogStockStatusResponse)(nil), // 7: api.catalog.v1.LegacyVendorListCatalogStockStatusResponse
	(*VendorCatalogFilter)(nil),                        // 8: api.catalog.v1.VendorCatalogFilter
	(*v1.Paging)(nil),                                  // 9: common.type.v1.Paging
	(*v1.PagingResponse)(nil),                          // 10: common.type.v1.PagingResponse
	(*VendorCatalog)(nil),                              // 11: api.catalog.v1.VendorCatalog
	(*VendorCatalogVariantFilter)(nil),                 // 12: api.catalog.v1.VendorCatalogVariantFilter
	(*VendorCatalogVariant)(nil),                       // 13: api.catalog.v1.VendorCatalogVariant
	(*v1.LegacyCredentials)(nil),                       // 14: common.type.v1.LegacyCredentials
	(*v1.LegacyPagingResponse)(nil),                    // 15: common.type.v1.LegacyPagingResponse
	(*LegacyVendorCatalog)(nil),                        // 16: api.catalog.v1.LegacyVendorCatalog
	(*LegacyVendorCatalogVariant)(nil),                 // 17: api.catalog.v1.LegacyVendorCatalogVariant
}
var file_api_catalog_v1_api_vendor_catalog_proto_depIdxs = []int32{
	8,  // 0: api.catalog.v1.VendorListCatalogRequest.filter:type_name -> api.catalog.v1.VendorCatalogFilter
	9,  // 1: api.catalog.v1.VendorListCatalogRequest.paging:type_name -> common.type.v1.Paging
	10, // 2: api.catalog.v1.VendorListCatalogResponse.paging:type_name -> common.type.v1.PagingResponse
	11, // 3: api.catalog.v1.VendorListCatalogResponse.data:type_name -> api.catalog.v1.VendorCatalog
	12, // 4: api.catalog.v1.VendorListCatalogVariantRequest.filter:type_name -> api.catalog.v1.VendorCatalogVariantFilter
	9,  // 5: api.catalog.v1.VendorListCatalogVariantRequest.paging:type_name -> common.type.v1.Paging
	10, // 6: api.catalog.v1.VendorListCatalogVariantResponse.paging:type_name -> common.type.v1.PagingResponse
	13, // 7: api.catalog.v1.VendorListCatalogVariantResponse.data:type_name -> api.catalog.v1.VendorCatalogVariant
	9,  // 8: api.catalog.v1.LegacyVendorListCatalogVariantRequest.paging:type_name -> common.type.v1.Paging
	14, // 9: api.catalog.v1.LegacyVendorListCatalogVariantRequest.credentials:type_name -> common.type.v1.LegacyCredentials
	15, // 10: api.catalog.v1.LegacyVendorListCatalogVariantResponse.paging:type_name -> common.type.v1.LegacyPagingResponse
	16, // 11: api.catalog.v1.LegacyVendorListCatalogVariantResponse.result:type_name -> api.catalog.v1.LegacyVendorCatalog
	9,  // 12: api.catalog.v1.LegacyVendorListCatalogStockStatusRequest.paging:type_name -> common.type.v1.Paging
	14, // 13: api.catalog.v1.LegacyVendorListCatalogStockStatusRequest.credentials:type_name -> common.type.v1.LegacyCredentials
	15, // 14: api.catalog.v1.LegacyVendorListCatalogStockStatusResponse.paging:type_name -> common.type.v1.LegacyPagingResponse
	17, // 15: api.catalog.v1.LegacyVendorListCatalogStockStatusResponse.result:type_name -> api.catalog.v1.LegacyVendorCatalogVariant
	0,  // 16: api.catalog.v1.VendorCatalogAPI.VendorListCatalog:input_type -> api.catalog.v1.VendorListCatalogRequest
	2,  // 17: api.catalog.v1.VendorCatalogAPI.VendorListCatalogVariant:input_type -> api.catalog.v1.VendorListCatalogVariantRequest
	2,  // 18: api.catalog.v1.VendorCatalogAPI.VendorGetCatalogStockStatus:input_type -> api.catalog.v1.VendorListCatalogVariantRequest
	4,  // 19: api.catalog.v1.LegacyVendorCatalogAPI.LegacyVendorListCatalogVariant:input_type -> api.catalog.v1.LegacyVendorListCatalogVariantRequest
	6,  // 20: api.catalog.v1.LegacyVendorCatalogAPI.LegacyVendorListCatalogStockStatus:input_type -> api.catalog.v1.LegacyVendorListCatalogStockStatusRequest
	1,  // 21: api.catalog.v1.VendorCatalogAPI.VendorListCatalog:output_type -> api.catalog.v1.VendorListCatalogResponse
	3,  // 22: api.catalog.v1.VendorCatalogAPI.VendorListCatalogVariant:output_type -> api.catalog.v1.VendorListCatalogVariantResponse
	3,  // 23: api.catalog.v1.VendorCatalogAPI.VendorGetCatalogStockStatus:output_type -> api.catalog.v1.VendorListCatalogVariantResponse
	5,  // 24: api.catalog.v1.LegacyVendorCatalogAPI.LegacyVendorListCatalogVariant:output_type -> api.catalog.v1.LegacyVendorListCatalogVariantResponse
	7,  // 25: api.catalog.v1.LegacyVendorCatalogAPI.LegacyVendorListCatalogStockStatus:output_type -> api.catalog.v1.LegacyVendorListCatalogStockStatusResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_catalog_v1_api_vendor_catalog_proto_init() }
func file_api_catalog_v1_api_vendor_catalog_proto_init() {
	if File_api_catalog_v1_api_vendor_catalog_proto != nil {
		return
	}
	file_api_catalog_v1_data_vendor_catalog_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_catalog_v1_api_vendor_catalog_proto_rawDesc), len(file_api_catalog_v1_api_vendor_catalog_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_api_catalog_v1_api_vendor_catalog_proto_goTypes,
		DependencyIndexes: file_api_catalog_v1_api_vendor_catalog_proto_depIdxs,
		MessageInfos:      file_api_catalog_v1_api_vendor_catalog_proto_msgTypes,
	}.Build()
	File_api_catalog_v1_api_vendor_catalog_proto = out.File
	file_api_catalog_v1_api_vendor_catalog_proto_goTypes = nil
	file_api_catalog_v1_api_vendor_catalog_proto_depIdxs = nil
}
