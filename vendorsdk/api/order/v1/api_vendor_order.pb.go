// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/order/v1/api_vendor_order.proto

package orderv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/gearment/gea-next/vendorsdk/common/type/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VendorListOrderDraftRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter criteria for order drafts
	Filter *VendorOrderDraftFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Pagination parameters
	Paging        *v1.Paging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorListOrderDraftRequest) Reset() {
	*x = VendorListOrderDraftRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorListOrderDraftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorListOrderDraftRequest) ProtoMessage() {}

func (x *VendorListOrderDraftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorListOrderDraftRequest.ProtoReflect.Descriptor instead.
func (*VendorListOrderDraftRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{0}
}

func (x *VendorListOrderDraftRequest) GetFilter() *VendorOrderDraftFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *VendorListOrderDraftRequest) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type VendorListOrderDraftResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Response status: "success" or "error"
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Human-readable message describing the result
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Pagination metadata
	// Contains: total count, current page, total pages
	Paging *v1.PagingResponse `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
	// List of order drafts matching the filter criteria
	Data          []*VendorOrderDraft_Short `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorListOrderDraftResponse) Reset() {
	*x = VendorListOrderDraftResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorListOrderDraftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorListOrderDraftResponse) ProtoMessage() {}

func (x *VendorListOrderDraftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorListOrderDraftResponse.ProtoReflect.Descriptor instead.
func (*VendorListOrderDraftResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{1}
}

func (x *VendorListOrderDraftResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VendorListOrderDraftResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VendorListOrderDraftResponse) GetPaging() *v1.PagingResponse {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *VendorListOrderDraftResponse) GetData() []*VendorOrderDraft_Short {
	if x != nil {
		return x.Data
	}
	return nil
}

type VendorListOrderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter criteria for orders
	Filter *VendorOrderFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Pagination parameters (default: page=1, limit=20; max limit: 100)
	Paging        *v1.Paging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorListOrderRequest) Reset() {
	*x = VendorListOrderRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorListOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorListOrderRequest) ProtoMessage() {}

func (x *VendorListOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorListOrderRequest.ProtoReflect.Descriptor instead.
func (*VendorListOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{2}
}

func (x *VendorListOrderRequest) GetFilter() *VendorOrderFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *VendorListOrderRequest) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type VendorListOrderResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Response status: "success" or "error"
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Human-readable message describing the result
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Pagination metadata including total count and pages
	Paging *v1.PagingResponse `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
	// List of orders matching the filter criteria
	// Each order includes: ID, status, line items, tracking info, pricing
	Data          []*VendorOrder_Short `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorListOrderResponse) Reset() {
	*x = VendorListOrderResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorListOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorListOrderResponse) ProtoMessage() {}

func (x *VendorListOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorListOrderResponse.ProtoReflect.Descriptor instead.
func (*VendorListOrderResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{3}
}

func (x *VendorListOrderResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VendorListOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VendorListOrderResponse) GetPaging() *v1.PagingResponse {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *VendorListOrderResponse) GetData() []*VendorOrder_Short {
	if x != nil {
		return x.Data
	}
	return nil
}

type VendorCreateOrderDraftRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Order draft creation parameters (required fields: platform, store_id, shipping address, line_items)
	Data          *VendorOrderDraftManualCreationParams `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorCreateOrderDraftRequest) Reset() {
	*x = VendorCreateOrderDraftRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorCreateOrderDraftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCreateOrderDraftRequest) ProtoMessage() {}

func (x *VendorCreateOrderDraftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCreateOrderDraftRequest.ProtoReflect.Descriptor instead.
func (*VendorCreateOrderDraftRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{4}
}

func (x *VendorCreateOrderDraftRequest) GetData() *VendorOrderDraftManualCreationParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type VendorCreateOrderDraftResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Response status: "success" or "error"
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Human-readable message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Created order draft details
	// Includes: order_id, status, pricing, line items
	Data          *VendorOrderDraft_Short `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorCreateOrderDraftResponse) Reset() {
	*x = VendorCreateOrderDraftResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorCreateOrderDraftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCreateOrderDraftResponse) ProtoMessage() {}

func (x *VendorCreateOrderDraftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCreateOrderDraftResponse.ProtoReflect.Descriptor instead.
func (*VendorCreateOrderDraftResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{5}
}

func (x *VendorCreateOrderDraftResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VendorCreateOrderDraftResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VendorCreateOrderDraftResponse) GetData() *VendorOrderDraft_Short {
	if x != nil {
		return x.Data
	}
	return nil
}

type VendorCreateOrderDraftWithLabelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Order draft creation with shipping label parameters (required: shipping label URL and service type)
	Data          *VendorOrderDraftWithLabelCreationParams `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorCreateOrderDraftWithLabelRequest) Reset() {
	*x = VendorCreateOrderDraftWithLabelRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorCreateOrderDraftWithLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCreateOrderDraftWithLabelRequest) ProtoMessage() {}

func (x *VendorCreateOrderDraftWithLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCreateOrderDraftWithLabelRequest.ProtoReflect.Descriptor instead.
func (*VendorCreateOrderDraftWithLabelRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{6}
}

func (x *VendorCreateOrderDraftWithLabelRequest) GetData() *VendorOrderDraftWithLabelCreationParams {
	if x != nil {
		return x.Data
	}
	return nil
}

type VendorCreateOrderDraftWithLabelResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Response status: "success" or "error"
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Human-readable message describing the result
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Created order draft with shipping label
	Data          *VendorOrderDraft_Short `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorCreateOrderDraftWithLabelResponse) Reset() {
	*x = VendorCreateOrderDraftWithLabelResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorCreateOrderDraftWithLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCreateOrderDraftWithLabelResponse) ProtoMessage() {}

func (x *VendorCreateOrderDraftWithLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCreateOrderDraftWithLabelResponse.ProtoReflect.Descriptor instead.
func (*VendorCreateOrderDraftWithLabelResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{7}
}

func (x *VendorCreateOrderDraftWithLabelResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VendorCreateOrderDraftWithLabelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VendorCreateOrderDraftWithLabelResponse) GetData() *VendorOrderDraft_Short {
	if x != nil {
		return x.Data
	}
	return nil
}

type VendorGetPriceQuoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Platform where the order originates
	OrderPlatform string `protobuf:"bytes,1,opt,name=order_platform,json=orderPlatform,proto3" json:"order_platform,omitempty"`
	// Billing information (optional, used for tax calculation and billing address)
	Billing *VendorOrderPriceCalculation_Billing `protobuf:"bytes,2,opt,name=billing,proto3" json:"billing,omitempty"`
	// Shipping address and method (required: country_code, state_code, method)
	Shipping *VendorOrderPriceCalculation_Shipping `protobuf:"bytes,3,opt,name=shipping,proto3" json:"shipping,omitempty"`
	// List of line items to quote (each item requires: variant_id, quantity, print_locations)
	LineItems []*VendorOrderPriceCalculation_LineItem `protobuf:"bytes,4,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	// Optional gift messages (adds fee if present)
	GiftMessages  []*VendorOrderPriceCalculation_GiftMessage `protobuf:"bytes,5,rep,name=gift_messages,json=giftMessages,proto3" json:"gift_messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorGetPriceQuoteRequest) Reset() {
	*x = VendorGetPriceQuoteRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorGetPriceQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGetPriceQuoteRequest) ProtoMessage() {}

func (x *VendorGetPriceQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGetPriceQuoteRequest.ProtoReflect.Descriptor instead.
func (*VendorGetPriceQuoteRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{8}
}

func (x *VendorGetPriceQuoteRequest) GetOrderPlatform() string {
	if x != nil {
		return x.OrderPlatform
	}
	return ""
}

func (x *VendorGetPriceQuoteRequest) GetBilling() *VendorOrderPriceCalculation_Billing {
	if x != nil {
		return x.Billing
	}
	return nil
}

func (x *VendorGetPriceQuoteRequest) GetShipping() *VendorOrderPriceCalculation_Shipping {
	if x != nil {
		return x.Shipping
	}
	return nil
}

func (x *VendorGetPriceQuoteRequest) GetLineItems() []*VendorOrderPriceCalculation_LineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *VendorGetPriceQuoteRequest) GetGiftMessages() []*VendorOrderPriceCalculation_GiftMessage {
	if x != nil {
		return x.GiftMessages
	}
	return nil
}

type VendorGetPriceQuoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Response status: "success" or "error"
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Human-readable message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Price quote breakdown (includes: order_total, order_subtotal, order_shipping_fee, order_tax, currency; all amounts are in USD unless specified otherwise)
	Data          *VendorOrderPriceCalculation_OrderPriceQuote `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorGetPriceQuoteResponse) Reset() {
	*x = VendorGetPriceQuoteResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorGetPriceQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGetPriceQuoteResponse) ProtoMessage() {}

func (x *VendorGetPriceQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGetPriceQuoteResponse.ProtoReflect.Descriptor instead.
func (*VendorGetPriceQuoteResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{9}
}

func (x *VendorGetPriceQuoteResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VendorGetPriceQuoteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VendorGetPriceQuoteResponse) GetData() *VendorOrderPriceCalculation_OrderPriceQuote {
	if x != nil {
		return x.Data
	}
	return nil
}

type VendorUpdateOrderDraftLineItemsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Order draft ID to update (format: draft_xxxxx or UUID)
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Updated line items (can update: quantity, designs, printing options; max 1000 line items per request)
	LineItems     []*VendorOrderDraftUpdateParams_LineItem `protobuf:"bytes,2,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorUpdateOrderDraftLineItemsRequest) Reset() {
	*x = VendorUpdateOrderDraftLineItemsRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorUpdateOrderDraftLineItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorUpdateOrderDraftLineItemsRequest) ProtoMessage() {}

func (x *VendorUpdateOrderDraftLineItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorUpdateOrderDraftLineItemsRequest.ProtoReflect.Descriptor instead.
func (*VendorUpdateOrderDraftLineItemsRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{10}
}

func (x *VendorUpdateOrderDraftLineItemsRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *VendorUpdateOrderDraftLineItemsRequest) GetLineItems() []*VendorOrderDraftUpdateParams_LineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

type VendorUpdateOrderDraftLineItemsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Response status: "success" or "error"
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Human-readable message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Updated order draft information
	Data          *VendorUpdateOrderDraftLineItemsResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorUpdateOrderDraftLineItemsResponse) Reset() {
	*x = VendorUpdateOrderDraftLineItemsResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorUpdateOrderDraftLineItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorUpdateOrderDraftLineItemsResponse) ProtoMessage() {}

func (x *VendorUpdateOrderDraftLineItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorUpdateOrderDraftLineItemsResponse.ProtoReflect.Descriptor instead.
func (*VendorUpdateOrderDraftLineItemsResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{11}
}

func (x *VendorUpdateOrderDraftLineItemsResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VendorUpdateOrderDraftLineItemsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VendorUpdateOrderDraftLineItemsResponse) GetData() *VendorUpdateOrderDraftLineItemsResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type VendorGetOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorGetOrderRequest) Reset() {
	*x = VendorGetOrderRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorGetOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGetOrderRequest) ProtoMessage() {}

func (x *VendorGetOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGetOrderRequest.ProtoReflect.Descriptor instead.
func (*VendorGetOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{12}
}

type VendorGetOrderResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Response status: "success" or "error"
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Human-readable message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Complete order details
	// Includes: line items, tracking, shipping, payment, pricing
	Data          *VendorOrder `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorGetOrderResponse) Reset() {
	*x = VendorGetOrderResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorGetOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGetOrderResponse) ProtoMessage() {}

func (x *VendorGetOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGetOrderResponse.ProtoReflect.Descriptor instead.
func (*VendorGetOrderResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{13}
}

func (x *VendorGetOrderResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VendorGetOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VendorGetOrderResponse) GetData() *VendorOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type VendorGetOrderDraftRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorGetOrderDraftRequest) Reset() {
	*x = VendorGetOrderDraftRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorGetOrderDraftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGetOrderDraftRequest) ProtoMessage() {}

func (x *VendorGetOrderDraftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGetOrderDraftRequest.ProtoReflect.Descriptor instead.
func (*VendorGetOrderDraftRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{14}
}

type VendorGetOrderDraftResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Response status: "success" or "error"
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Human-readable message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Complete order draft details
	// Includes: line items, shipping, pricing, status
	Data          *VendorOrderDraft `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorGetOrderDraftResponse) Reset() {
	*x = VendorGetOrderDraftResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorGetOrderDraftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGetOrderDraftResponse) ProtoMessage() {}

func (x *VendorGetOrderDraftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGetOrderDraftResponse.ProtoReflect.Descriptor instead.
func (*VendorGetOrderDraftResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{15}
}

func (x *VendorGetOrderDraftResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VendorGetOrderDraftResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VendorGetOrderDraftResponse) GetData() *VendorOrderDraft {
	if x != nil {
		return x.Data
	}
	return nil
}

type VendorListOrderDraftForCheckoutResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Data          []*VendorOrderDraftCheckout `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorListOrderDraftForCheckoutResponse) Reset() {
	*x = VendorListOrderDraftForCheckoutResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorListOrderDraftForCheckoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorListOrderDraftForCheckoutResponse) ProtoMessage() {}

func (x *VendorListOrderDraftForCheckoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorListOrderDraftForCheckoutResponse.ProtoReflect.Descriptor instead.
func (*VendorListOrderDraftForCheckoutResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{16}
}

func (x *VendorListOrderDraftForCheckoutResponse) GetData() []*VendorOrderDraftCheckout {
	if x != nil {
		return x.Data
	}
	return nil
}

type LegacyVendorGetPriceQuoteRequest struct {
	state                protoimpl.MessageState                       `protogen:"open.v1"`
	Credentials          *v1.LegacyCredentials                        `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
	StoreId              string                                       `protobuf:"bytes,2,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	ShippingEmail        string                                       `protobuf:"bytes,3,opt,name=shipping_email,json=shippingEmail,proto3" json:"shipping_email,omitempty"`
	ShippingName         string                                       `protobuf:"bytes,4,opt,name=shipping_name,json=shippingName,proto3" json:"shipping_name,omitempty"`
	ShippingPhone        string                                       `protobuf:"bytes,5,opt,name=shipping_phone,json=shippingPhone,proto3" json:"shipping_phone,omitempty"`
	ShippingCompanyName  string                                       `protobuf:"bytes,6,opt,name=shipping_company_name,json=shippingCompanyName,proto3" json:"shipping_company_name,omitempty"`
	ShippingAddress1     string                                       `protobuf:"bytes,7,opt,name=shipping_address1,json=shippingAddress1,proto3" json:"shipping_address1,omitempty"`
	ShippingAddress2     string                                       `protobuf:"bytes,8,opt,name=shipping_address2,json=shippingAddress2,proto3" json:"shipping_address2,omitempty"`
	ShippingProvinceCode string                                       `protobuf:"bytes,9,opt,name=shipping_province_code,json=shippingProvinceCode,proto3" json:"shipping_province_code,omitempty"`
	ShippingCity         string                                       `protobuf:"bytes,10,opt,name=shipping_city,json=shippingCity,proto3" json:"shipping_city,omitempty"`
	ShippingZipcode      int32                                        `protobuf:"varint,11,opt,name=shipping_zipcode,json=shippingZipcode,proto3" json:"shipping_zipcode,omitempty"`
	ShippingCountryCode  string                                       `protobuf:"bytes,12,opt,name=shipping_country_code,json=shippingCountryCode,proto3" json:"shipping_country_code,omitempty"`
	ShippingMethod       int32                                        `protobuf:"varint,13,opt,name=shipping_method,json=shippingMethod,proto3" json:"shipping_method,omitempty"`
	LineItems            []*LegacyVendorGetPriceQuoteRequest_LineItem `protobuf:"bytes,14,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LegacyVendorGetPriceQuoteRequest) Reset() {
	*x = LegacyVendorGetPriceQuoteRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorGetPriceQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorGetPriceQuoteRequest) ProtoMessage() {}

func (x *LegacyVendorGetPriceQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorGetPriceQuoteRequest.ProtoReflect.Descriptor instead.
func (*LegacyVendorGetPriceQuoteRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{17}
}

func (x *LegacyVendorGetPriceQuoteRequest) GetCredentials() *v1.LegacyCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *LegacyVendorGetPriceQuoteRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteRequest) GetShippingEmail() string {
	if x != nil {
		return x.ShippingEmail
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteRequest) GetShippingName() string {
	if x != nil {
		return x.ShippingName
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteRequest) GetShippingPhone() string {
	if x != nil {
		return x.ShippingPhone
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteRequest) GetShippingCompanyName() string {
	if x != nil {
		return x.ShippingCompanyName
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteRequest) GetShippingAddress1() string {
	if x != nil {
		return x.ShippingAddress1
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteRequest) GetShippingAddress2() string {
	if x != nil {
		return x.ShippingAddress2
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteRequest) GetShippingProvinceCode() string {
	if x != nil {
		return x.ShippingProvinceCode
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteRequest) GetShippingCity() string {
	if x != nil {
		return x.ShippingCity
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteRequest) GetShippingZipcode() int32 {
	if x != nil {
		return x.ShippingZipcode
	}
	return 0
}

func (x *LegacyVendorGetPriceQuoteRequest) GetShippingCountryCode() string {
	if x != nil {
		return x.ShippingCountryCode
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteRequest) GetShippingMethod() int32 {
	if x != nil {
		return x.ShippingMethod
	}
	return 0
}

func (x *LegacyVendorGetPriceQuoteRequest) GetLineItems() []*LegacyVendorGetPriceQuoteRequest_LineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

type LegacyVendorGetPriceQuoteResponse struct {
	state         protoimpl.MessageState                              `protogen:"open.v1"`
	Status        string                                              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                                              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          *LegacyVendorGetPriceQuoteResponse_PriceCalculation `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorGetPriceQuoteResponse) Reset() {
	*x = LegacyVendorGetPriceQuoteResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorGetPriceQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorGetPriceQuoteResponse) ProtoMessage() {}

func (x *LegacyVendorGetPriceQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorGetPriceQuoteResponse.ProtoReflect.Descriptor instead.
func (*LegacyVendorGetPriceQuoteResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{18}
}

func (x *LegacyVendorGetPriceQuoteResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteResponse) GetData() *LegacyVendorGetPriceQuoteResponse_PriceCalculation {
	if x != nil {
		return x.Data
	}
	return nil
}

type LegacyVendorCreateOrderDraftRequest struct {
	state                protoimpl.MessageState                `protogen:"open.v1"`
	Credentials          *v1.LegacyCredentials                 `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
	OrderId              string                                `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ExternalId           string                                `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	StoreId              string                                `protobuf:"bytes,4,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	AgreeAtRisk          *wrapperspb.BoolValue                 `protobuf:"bytes,5,opt,name=agree_at_risk,json=agreeAtRisk,proto3" json:"agree_at_risk,omitempty"`
	ShippingEmail        string                                `protobuf:"bytes,6,opt,name=shipping_email,json=shippingEmail,proto3" json:"shipping_email,omitempty"`
	ShippingName         string                                `protobuf:"bytes,7,opt,name=shipping_name,json=shippingName,proto3" json:"shipping_name,omitempty"`
	ShippingPhone        string                                `protobuf:"bytes,8,opt,name=shipping_phone,json=shippingPhone,proto3" json:"shipping_phone,omitempty"`
	ShippingCompanyName  string                                `protobuf:"bytes,9,opt,name=shipping_company_name,json=shippingCompanyName,proto3" json:"shipping_company_name,omitempty"`
	ShippingAddress1     string                                `protobuf:"bytes,10,opt,name=shipping_address1,json=shippingAddress1,proto3" json:"shipping_address1,omitempty"`
	ShippingAddress2     string                                `protobuf:"bytes,11,opt,name=shipping_address2,json=shippingAddress2,proto3" json:"shipping_address2,omitempty"`
	ShippingProvinceCode string                                `protobuf:"bytes,12,opt,name=shipping_province_code,json=shippingProvinceCode,proto3" json:"shipping_province_code,omitempty"`
	ShippingCity         string                                `protobuf:"bytes,13,opt,name=shipping_city,json=shippingCity,proto3" json:"shipping_city,omitempty"`
	ShippingZipcode      string                                `protobuf:"bytes,14,opt,name=shipping_zipcode,json=shippingZipcode,proto3" json:"shipping_zipcode,omitempty"`
	ShippingCountryCode  string                                `protobuf:"bytes,15,opt,name=shipping_country_code,json=shippingCountryCode,proto3" json:"shipping_country_code,omitempty"`
	ShippingMethod       int32                                 `protobuf:"varint,16,opt,name=shipping_method,json=shippingMethod,proto3" json:"shipping_method,omitempty"`
	GiftMessageBody      string                                `protobuf:"bytes,17,opt,name=gift_message_body,json=giftMessageBody,proto3" json:"gift_message_body,omitempty"`
	IossNumber           string                                `protobuf:"bytes,18,opt,name=ioss_number,json=iossNumber,proto3" json:"ioss_number,omitempty"`
	IossNumberTotal      float32                               `protobuf:"fixed32,19,opt,name=ioss_number_total,json=iossNumberTotal,proto3" json:"ioss_number_total,omitempty"`
	TaxNumber            string                                `protobuf:"bytes,20,opt,name=tax_number,json=taxNumber,proto3" json:"tax_number,omitempty"`
	OrderTaxNumber       float32                               `protobuf:"fixed32,21,opt,name=order_tax_number,json=orderTaxNumber,proto3" json:"order_tax_number,omitempty"`
	LineItems            []*LegacyVendorLineItemCreationParams `protobuf:"bytes,22,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LegacyVendorCreateOrderDraftRequest) Reset() {
	*x = LegacyVendorCreateOrderDraftRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorCreateOrderDraftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorCreateOrderDraftRequest) ProtoMessage() {}

func (x *LegacyVendorCreateOrderDraftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorCreateOrderDraftRequest.ProtoReflect.Descriptor instead.
func (*LegacyVendorCreateOrderDraftRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{19}
}

func (x *LegacyVendorCreateOrderDraftRequest) GetCredentials() *v1.LegacyCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *LegacyVendorCreateOrderDraftRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetAgreeAtRisk() *wrapperspb.BoolValue {
	if x != nil {
		return x.AgreeAtRisk
	}
	return nil
}

func (x *LegacyVendorCreateOrderDraftRequest) GetShippingEmail() string {
	if x != nil {
		return x.ShippingEmail
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetShippingName() string {
	if x != nil {
		return x.ShippingName
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetShippingPhone() string {
	if x != nil {
		return x.ShippingPhone
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetShippingCompanyName() string {
	if x != nil {
		return x.ShippingCompanyName
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetShippingAddress1() string {
	if x != nil {
		return x.ShippingAddress1
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetShippingAddress2() string {
	if x != nil {
		return x.ShippingAddress2
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetShippingProvinceCode() string {
	if x != nil {
		return x.ShippingProvinceCode
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetShippingCity() string {
	if x != nil {
		return x.ShippingCity
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetShippingZipcode() string {
	if x != nil {
		return x.ShippingZipcode
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetShippingCountryCode() string {
	if x != nil {
		return x.ShippingCountryCode
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetShippingMethod() int32 {
	if x != nil {
		return x.ShippingMethod
	}
	return 0
}

func (x *LegacyVendorCreateOrderDraftRequest) GetGiftMessageBody() string {
	if x != nil {
		return x.GiftMessageBody
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetIossNumber() string {
	if x != nil {
		return x.IossNumber
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetIossNumberTotal() float32 {
	if x != nil {
		return x.IossNumberTotal
	}
	return 0
}

func (x *LegacyVendorCreateOrderDraftRequest) GetTaxNumber() string {
	if x != nil {
		return x.TaxNumber
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftRequest) GetOrderTaxNumber() float32 {
	if x != nil {
		return x.OrderTaxNumber
	}
	return 0
}

func (x *LegacyVendorCreateOrderDraftRequest) GetLineItems() []*LegacyVendorLineItemCreationParams {
	if x != nil {
		return x.LineItems
	}
	return nil
}

type LegacyVendorCreateOrderDraftResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Status        string                      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result        *LegacyVendorCreationResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorCreateOrderDraftResponse) Reset() {
	*x = LegacyVendorCreateOrderDraftResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorCreateOrderDraftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorCreateOrderDraftResponse) ProtoMessage() {}

func (x *LegacyVendorCreateOrderDraftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorCreateOrderDraftResponse.ProtoReflect.Descriptor instead.
func (*LegacyVendorCreateOrderDraftResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{20}
}

func (x *LegacyVendorCreateOrderDraftResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftResponse) GetResult() *LegacyVendorCreationResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type LegacyVendorCreateOrderDraftWithLabelRequest struct {
	state               protoimpl.MessageState                `protogen:"open.v1"`
	Credentials         *v1.LegacyCredentials                 `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
	OrderId             string                                `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	StoreId             string                                `protobuf:"bytes,3,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	AgreeAtRisk         *wrapperspb.BoolValue                 `protobuf:"bytes,4,opt,name=agree_at_risk,json=agreeAtRisk,proto3" json:"agree_at_risk,omitempty"`
	ShippingServiceType string                                `protobuf:"bytes,5,opt,name=shipping_service_type,json=shippingServiceType,proto3" json:"shipping_service_type,omitempty"`
	ShippingLabelLink   string                                `protobuf:"bytes,6,opt,name=shipping_label_link,json=shippingLabelLink,proto3" json:"shipping_label_link,omitempty"`
	GiftMessageBody     string                                `protobuf:"bytes,7,opt,name=gift_message_body,json=giftMessageBody,proto3" json:"gift_message_body,omitempty"`
	LineItems           []*LegacyVendorLineItemCreationParams `protobuf:"bytes,8,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *LegacyVendorCreateOrderDraftWithLabelRequest) Reset() {
	*x = LegacyVendorCreateOrderDraftWithLabelRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorCreateOrderDraftWithLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorCreateOrderDraftWithLabelRequest) ProtoMessage() {}

func (x *LegacyVendorCreateOrderDraftWithLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorCreateOrderDraftWithLabelRequest.ProtoReflect.Descriptor instead.
func (*LegacyVendorCreateOrderDraftWithLabelRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{21}
}

func (x *LegacyVendorCreateOrderDraftWithLabelRequest) GetCredentials() *v1.LegacyCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *LegacyVendorCreateOrderDraftWithLabelRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftWithLabelRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftWithLabelRequest) GetAgreeAtRisk() *wrapperspb.BoolValue {
	if x != nil {
		return x.AgreeAtRisk
	}
	return nil
}

func (x *LegacyVendorCreateOrderDraftWithLabelRequest) GetShippingServiceType() string {
	if x != nil {
		return x.ShippingServiceType
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftWithLabelRequest) GetShippingLabelLink() string {
	if x != nil {
		return x.ShippingLabelLink
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftWithLabelRequest) GetGiftMessageBody() string {
	if x != nil {
		return x.GiftMessageBody
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftWithLabelRequest) GetLineItems() []*LegacyVendorLineItemCreationParams {
	if x != nil {
		return x.LineItems
	}
	return nil
}

type LegacyVendorCreateOrderDraftWithLabelResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Status        string                      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result        *LegacyVendorCreationResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorCreateOrderDraftWithLabelResponse) Reset() {
	*x = LegacyVendorCreateOrderDraftWithLabelResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorCreateOrderDraftWithLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorCreateOrderDraftWithLabelResponse) ProtoMessage() {}

func (x *LegacyVendorCreateOrderDraftWithLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorCreateOrderDraftWithLabelResponse.ProtoReflect.Descriptor instead.
func (*LegacyVendorCreateOrderDraftWithLabelResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{22}
}

func (x *LegacyVendorCreateOrderDraftWithLabelResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftWithLabelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LegacyVendorCreateOrderDraftWithLabelResponse) GetResult() *LegacyVendorCreationResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type LegacyVendorListOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Credentials   *v1.LegacyCredentials  `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
	OrderStatus   string                 `protobuf:"bytes,2,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	PaymentStatus string                 `protobuf:"bytes,3,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
	CreatedAtMin  string                 `protobuf:"bytes,4,opt,name=created_at_min,json=createdAtMin,proto3" json:"created_at_min,omitempty"`
	CreatedAtMax  string                 `protobuf:"bytes,5,opt,name=created_at_max,json=createdAtMax,proto3" json:"created_at_max,omitempty"`
	Paging        *v1.Paging             `protobuf:"bytes,6,opt,name=paging,proto3" json:"paging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorListOrderRequest) Reset() {
	*x = LegacyVendorListOrderRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorListOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorListOrderRequest) ProtoMessage() {}

func (x *LegacyVendorListOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorListOrderRequest.ProtoReflect.Descriptor instead.
func (*LegacyVendorListOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{23}
}

func (x *LegacyVendorListOrderRequest) GetCredentials() *v1.LegacyCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *LegacyVendorListOrderRequest) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *LegacyVendorListOrderRequest) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *LegacyVendorListOrderRequest) GetCreatedAtMin() string {
	if x != nil {
		return x.CreatedAtMin
	}
	return ""
}

func (x *LegacyVendorListOrderRequest) GetCreatedAtMax() string {
	if x != nil {
		return x.CreatedAtMax
	}
	return ""
}

func (x *LegacyVendorListOrderRequest) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type LegacyVendorListOrderResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Paging        *v1.LegacyPagingResponse `protobuf:"bytes,1,opt,name=paging,proto3" json:"paging,omitempty"`
	Result        []*LegacyVendorOrder     `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
	Status        string                   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorListOrderResponse) Reset() {
	*x = LegacyVendorListOrderResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorListOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorListOrderResponse) ProtoMessage() {}

func (x *LegacyVendorListOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorListOrderResponse.ProtoReflect.Descriptor instead.
func (*LegacyVendorListOrderResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{24}
}

func (x *LegacyVendorListOrderResponse) GetPaging() *v1.LegacyPagingResponse {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *LegacyVendorListOrderResponse) GetResult() []*LegacyVendorOrder {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *LegacyVendorListOrderResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LegacyVendorListOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type LegacyVendorUpdateOrderDraftLineItemsRequest struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Credentials   *v1.LegacyCredentials               `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
	OrderId       int32                               `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	LineItems     []*LegacyVendorLineItemUpdateParams `protobuf:"bytes,3,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorUpdateOrderDraftLineItemsRequest) Reset() {
	*x = LegacyVendorUpdateOrderDraftLineItemsRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorUpdateOrderDraftLineItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorUpdateOrderDraftLineItemsRequest) ProtoMessage() {}

func (x *LegacyVendorUpdateOrderDraftLineItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorUpdateOrderDraftLineItemsRequest.ProtoReflect.Descriptor instead.
func (*LegacyVendorUpdateOrderDraftLineItemsRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{25}
}

func (x *LegacyVendorUpdateOrderDraftLineItemsRequest) GetCredentials() *v1.LegacyCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *LegacyVendorUpdateOrderDraftLineItemsRequest) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *LegacyVendorUpdateOrderDraftLineItemsRequest) GetLineItems() []*LegacyVendorLineItemUpdateParams {
	if x != nil {
		return x.LineItems
	}
	return nil
}

type LegacyVendorUpdateOrderDraftLineItemsResponse struct {
	state         protoimpl.MessageState                              `protogen:"open.v1"`
	Status        string                                              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                                              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Result        *LegacyVendorUpdateOrderDraftLineItemsResponse_Data `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorUpdateOrderDraftLineItemsResponse) Reset() {
	*x = LegacyVendorUpdateOrderDraftLineItemsResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorUpdateOrderDraftLineItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorUpdateOrderDraftLineItemsResponse) ProtoMessage() {}

func (x *LegacyVendorUpdateOrderDraftLineItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorUpdateOrderDraftLineItemsResponse.ProtoReflect.Descriptor instead.
func (*LegacyVendorUpdateOrderDraftLineItemsResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{26}
}

func (x *LegacyVendorUpdateOrderDraftLineItemsResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LegacyVendorUpdateOrderDraftLineItemsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LegacyVendorUpdateOrderDraftLineItemsResponse) GetResult() *LegacyVendorUpdateOrderDraftLineItemsResponse_Data {
	if x != nil {
		return x.Result
	}
	return nil
}

type LegacyVendorGetOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Credentials   *v1.LegacyCredentials  `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty"`
	OrderId       string                 `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorGetOrderRequest) Reset() {
	*x = LegacyVendorGetOrderRequest{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorGetOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorGetOrderRequest) ProtoMessage() {}

func (x *LegacyVendorGetOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorGetOrderRequest.ProtoReflect.Descriptor instead.
func (*LegacyVendorGetOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{27}
}

func (x *LegacyVendorGetOrderRequest) GetCredentials() *v1.LegacyCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *LegacyVendorGetOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type LegacyVendorGetOrderResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *LegacyVendorOrder     `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorGetOrderResponse) Reset() {
	*x = LegacyVendorGetOrderResponse{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorGetOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorGetOrderResponse) ProtoMessage() {}

func (x *LegacyVendorGetOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorGetOrderResponse.ProtoReflect.Descriptor instead.
func (*LegacyVendorGetOrderResponse) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{28}
}

func (x *LegacyVendorGetOrderResponse) GetResult() *LegacyVendorOrder {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *LegacyVendorGetOrderResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LegacyVendorGetOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type VendorUpdateOrderDraftLineItemsResponse_Data struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Order draft ID that was updated
	OrderId       string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorUpdateOrderDraftLineItemsResponse_Data) Reset() {
	*x = VendorUpdateOrderDraftLineItemsResponse_Data{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorUpdateOrderDraftLineItemsResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorUpdateOrderDraftLineItemsResponse_Data) ProtoMessage() {}

func (x *VendorUpdateOrderDraftLineItemsResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorUpdateOrderDraftLineItemsResponse_Data.ProtoReflect.Descriptor instead.
func (*VendorUpdateOrderDraftLineItemsResponse_Data) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{11, 0}
}

func (x *VendorUpdateOrderDraftLineItemsResponse_Data) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type LegacyVendorGetPriceQuoteRequest_LineItem struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	VariantId      int32                  `protobuf:"varint,1,opt,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"`
	Quantity       int32                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Side           string                 `protobuf:"bytes,3,opt,name=side,proto3" json:"side,omitempty"`
	DesignLink     string                 `protobuf:"bytes,4,opt,name=design_link,json=designLink,proto3" json:"design_link,omitempty"`
	DesignLinkBack string                 `protobuf:"bytes,5,opt,name=design_link_back,json=designLinkBack,proto3" json:"design_link_back,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LegacyVendorGetPriceQuoteRequest_LineItem) Reset() {
	*x = LegacyVendorGetPriceQuoteRequest_LineItem{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorGetPriceQuoteRequest_LineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorGetPriceQuoteRequest_LineItem) ProtoMessage() {}

func (x *LegacyVendorGetPriceQuoteRequest_LineItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorGetPriceQuoteRequest_LineItem.ProtoReflect.Descriptor instead.
func (*LegacyVendorGetPriceQuoteRequest_LineItem) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{17, 0}
}

func (x *LegacyVendorGetPriceQuoteRequest_LineItem) GetVariantId() int32 {
	if x != nil {
		return x.VariantId
	}
	return 0
}

func (x *LegacyVendorGetPriceQuoteRequest_LineItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *LegacyVendorGetPriceQuoteRequest_LineItem) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteRequest_LineItem) GetDesignLink() string {
	if x != nil {
		return x.DesignLink
	}
	return ""
}

func (x *LegacyVendorGetPriceQuoteRequest_LineItem) GetDesignLinkBack() string {
	if x != nil {
		return x.DesignLinkBack
	}
	return ""
}

type LegacyVendorGetPriceQuoteResponse_PriceCalculation struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Total          float32                `protobuf:"fixed32,1,opt,name=total,proto3" json:"total,omitempty"`
	SubTotal       float32                `protobuf:"fixed32,2,opt,name=sub_total,json=subTotal,proto3" json:"sub_total,omitempty"`
	Tax            float32                `protobuf:"fixed32,3,opt,name=tax,proto3" json:"tax,omitempty"`
	ShippingFee    float32                `protobuf:"fixed32,4,opt,name=shipping_fee,json=shippingFee,proto3" json:"shipping_fee,omitempty"`
	GiftMessageFee float32                `protobuf:"fixed32,5,opt,name=gift_message_fee,json=giftMessageFee,proto3" json:"gift_message_fee,omitempty"`
	HandleFee      float32                `protobuf:"fixed32,6,opt,name=handle_fee,json=handleFee,proto3" json:"handle_fee,omitempty"`
	TotalDiscount  float32                `protobuf:"fixed32,7,opt,name=total_discount,json=totalDiscount,proto3" json:"total_discount,omitempty"`
	Currency       string                 `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LegacyVendorGetPriceQuoteResponse_PriceCalculation) Reset() {
	*x = LegacyVendorGetPriceQuoteResponse_PriceCalculation{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorGetPriceQuoteResponse_PriceCalculation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorGetPriceQuoteResponse_PriceCalculation) ProtoMessage() {}

func (x *LegacyVendorGetPriceQuoteResponse_PriceCalculation) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorGetPriceQuoteResponse_PriceCalculation.ProtoReflect.Descriptor instead.
func (*LegacyVendorGetPriceQuoteResponse_PriceCalculation) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{18, 0}
}

func (x *LegacyVendorGetPriceQuoteResponse_PriceCalculation) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *LegacyVendorGetPriceQuoteResponse_PriceCalculation) GetSubTotal() float32 {
	if x != nil {
		return x.SubTotal
	}
	return 0
}

func (x *LegacyVendorGetPriceQuoteResponse_PriceCalculation) GetTax() float32 {
	if x != nil {
		return x.Tax
	}
	return 0
}

func (x *LegacyVendorGetPriceQuoteResponse_PriceCalculation) GetShippingFee() float32 {
	if x != nil {
		return x.ShippingFee
	}
	return 0
}

func (x *LegacyVendorGetPriceQuoteResponse_PriceCalculation) GetGiftMessageFee() float32 {
	if x != nil {
		return x.GiftMessageFee
	}
	return 0
}

func (x *LegacyVendorGetPriceQuoteResponse_PriceCalculation) GetHandleFee() float32 {
	if x != nil {
		return x.HandleFee
	}
	return 0
}

func (x *LegacyVendorGetPriceQuoteResponse_PriceCalculation) GetTotalDiscount() float32 {
	if x != nil {
		return x.TotalDiscount
	}
	return 0
}

func (x *LegacyVendorGetPriceQuoteResponse_PriceCalculation) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type LegacyVendorUpdateOrderDraftLineItemsResponse_Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyVendorUpdateOrderDraftLineItemsResponse_Data) Reset() {
	*x = LegacyVendorUpdateOrderDraftLineItemsResponse_Data{}
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorUpdateOrderDraftLineItemsResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorUpdateOrderDraftLineItemsResponse_Data) ProtoMessage() {}

func (x *LegacyVendorUpdateOrderDraftLineItemsResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_api_vendor_order_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorUpdateOrderDraftLineItemsResponse_Data.ProtoReflect.Descriptor instead.
func (*LegacyVendorUpdateOrderDraftLineItemsResponse_Data) Descriptor() ([]byte, []int) {
	return file_api_order_v1_api_vendor_order_proto_rawDescGZIP(), []int{26, 0}
}

func (x *LegacyVendorUpdateOrderDraftLineItemsResponse_Data) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_api_order_v1_api_vendor_order_proto protoreflect.FileDescriptor

var file_api_order_v1_api_vendor_order_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x1a, 0x24, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61,
	0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x1b, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xb8, 0x01,
	0x0a, 0x17, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x1d, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x73, 0x0a, 0x26, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x01, 0x0a, 0x27, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb6, 0x04,
	0x0a, 0x1a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xcb, 0x01, 0x0a,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa3, 0x01, 0xba, 0x48, 0x9f, 0x01, 0x72, 0x9c, 0x01, 0x52,
	0x00, 0x52, 0x04, 0x65, 0x62, 0x61, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x52,
	0x07, 0x73, 0x68, 0x6f, 0x70, 0x69, 0x66, 0x79, 0x52, 0x0b, 0x77, 0x6f, 0x6f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x65, 0x52, 0x04, 0x65, 0x74, 0x73, 0x79, 0x52, 0x08, 0x73, 0x68, 0x6f,
	0x70, 0x62, 0x61, 0x73, 0x65, 0x52, 0x08, 0x67, 0x65, 0x61, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x64, 0x65, 0x73, 0x6b, 0x52, 0x0a, 0x74, 0x69, 0x6b, 0x74,
	0x6f, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x74, 0x61, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x05, 0x69, 0x6e,
	0x6b, 0x67, 0x6f, 0x52, 0x04, 0x77, 0x69, 0x73, 0x68, 0x52, 0x0b, 0x62, 0x69, 0x67, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x6c,
	0x79, 0x92, 0x02, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x69, 0x66, 0x79, 0x52, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x4b, 0x0a, 0x07, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x5a, 0x0a, 0x0d, 0x67, 0x69,
	0x66, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x66,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x1b, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x26, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0a, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x0b, 0xba, 0x48, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0xe8, 0x07, 0x52,
	0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x27, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x79, 0x0a, 0x16, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x1c, 0x0a, 0x1a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x83, 0x01,
	0x0a, 0x1b, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x27, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x07, 0x0a, 0x20, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba,
	0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x1e, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xac, 0x02, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a,
	0x0d, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x1e, 0x52,
	0x0c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a,
	0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xba, 0x48, 0x09, 0x1a, 0x07, 0x18, 0x80,
	0xad, 0xe2, 0x04, 0x20, 0x00, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5a,
	0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x1e,
	0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d,
	0xba, 0x48, 0x0a, 0x1a, 0x08, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x52, 0x0e, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x56, 0x0a,
	0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xba, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xba, 0x48, 0x08, 0x1a, 0x06, 0x18, 0xa0, 0x8d,
	0x06, 0x20, 0x00, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x61,
	0x63, 0x6b, 0x22, 0xb4, 0x03, 0x0a, 0x21, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x86, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x46, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xbe, 0x09, 0x0a, 0x23, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18,
	0xff, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18,
	0xff, 0x01, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x41, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x0e, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x0d, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x0d,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52,
	0x0c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52,
	0x0d, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x3c,
	0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x11,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xff, 0x01, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x35, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x12, 0x3e, 0x0a, 0x16,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x14, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x0d,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52,
	0x0c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a,
	0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xff, 0x01, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5a, 0x69, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52,
	0x13, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xba,
	0x48, 0x0a, 0x1a, 0x08, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x52, 0x0e, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x34, 0x0a, 0x11,
	0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xe8,
	0x07, 0x52, 0x0f, 0x67, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x29, 0x0a, 0x0b, 0x69, 0x6f, 0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xff,
	0x01, 0x52, 0x0a, 0x69, 0x6f, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x6f, 0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x69, 0x6f, 0x73, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x61, 0x78,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x09, 0x74, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0a,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x42, 0x0b, 0xba, 0x48, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0xe8, 0x07, 0x52,
	0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x24, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8d, 0x04, 0x0a, 0x2c, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x23, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x67, 0x72, 0x65, 0x65,
	0x5f, 0x61, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x41, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x3e, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xff, 0x01, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xe8, 0x07,
	0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x11, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xe8, 0x07, 0x52, 0x0f, 0x67, 0x69, 0x66, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x5c, 0x0a, 0x0a, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42,
	0x0b, 0xba, 0x48, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0xe8, 0x07, 0x52, 0x09, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x2d, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa8, 0x03,
	0x0a, 0x1c, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xba, 0x48, 0x33, 0x72, 0x31,
	0x10, 0x01, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54,
	0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xba, 0x48, 0x2a, 0x72, 0x28, 0x10, 0x01, 0x52,
	0x03, 0x61, 0x6e, 0x79, 0x52, 0x06, 0x75, 0x6e, 0x70, 0x61, 0x69, 0x64, 0x52, 0x04, 0x70, 0x61,
	0x69, 0x64, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xc8, 0x01, 0x0a, 0x1d, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x2c, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x1a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5a, 0x0a,
	0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x42, 0x0b, 0xba, 0x48, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0xe8, 0x07, 0x52, 0x09,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x2d, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x16, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x7d, 0x0a, 0x1b, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x89,
	0x01, 0x0a, 0x1c, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xc8, 0x09, 0x0a, 0x0e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0x76, 0x0a,
	0x0f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x16, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x2b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0xb7, 0x01, 0x0a, 0x1f, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x34,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x1f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x32, 0x1f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x7e, 0x0a, 0x0e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x93, 0x01, 0x0a, 0x13, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x32, 0x9e, 0x08, 0x0a, 0x14, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0x9d,
	0x01, 0x0a, 0x19, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x32, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0xa6,
	0x01, 0x0a, 0x1c, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01,
	0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0xc9, 0x01, 0x0a, 0x25, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x15, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01,
	0x2a, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0xcc, 0x01, 0x0a, 0x25, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22,
	0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x93, 0x01, 0x0a, 0x14, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x12, 0x19, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0xb6, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x41, 0x70, 0x69,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x65, 0x61, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x61, 0x2d, 0x6e, 0x65, 0x78, 0x74,
	0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x64, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x41, 0x4f, 0x58, 0xaa, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x41, 0x70, 0x69, 0x5c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x41, 0x70, 0x69, 0x5c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0e, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_order_v1_api_vendor_order_proto_rawDescOnce sync.Once
	file_api_order_v1_api_vendor_order_proto_rawDescData []byte
)

func file_api_order_v1_api_vendor_order_proto_rawDescGZIP() []byte {
	file_api_order_v1_api_vendor_order_proto_rawDescOnce.Do(func() {
		file_api_order_v1_api_vendor_order_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_order_v1_api_vendor_order_proto_rawDesc), len(file_api_order_v1_api_vendor_order_proto_rawDesc)))
	})
	return file_api_order_v1_api_vendor_order_proto_rawDescData
}

var file_api_order_v1_api_vendor_order_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_api_order_v1_api_vendor_order_proto_goTypes = []any{
	(*VendorListOrderDraftRequest)(nil),                        // 0: api.order.v1.VendorListOrderDraftRequest
	(*VendorListOrderDraftResponse)(nil),                       // 1: api.order.v1.VendorListOrderDraftResponse
	(*VendorListOrderRequest)(nil),                             // 2: api.order.v1.VendorListOrderRequest
	(*VendorListOrderResponse)(nil),                            // 3: api.order.v1.VendorListOrderResponse
	(*VendorCreateOrderDraftRequest)(nil),                      // 4: api.order.v1.VendorCreateOrderDraftRequest
	(*VendorCreateOrderDraftResponse)(nil),                     // 5: api.order.v1.VendorCreateOrderDraftResponse
	(*VendorCreateOrderDraftWithLabelRequest)(nil),             // 6: api.order.v1.VendorCreateOrderDraftWithLabelRequest
	(*VendorCreateOrderDraftWithLabelResponse)(nil),            // 7: api.order.v1.VendorCreateOrderDraftWithLabelResponse
	(*VendorGetPriceQuoteRequest)(nil),                         // 8: api.order.v1.VendorGetPriceQuoteRequest
	(*VendorGetPriceQuoteResponse)(nil),                        // 9: api.order.v1.VendorGetPriceQuoteResponse
	(*VendorUpdateOrderDraftLineItemsRequest)(nil),             // 10: api.order.v1.VendorUpdateOrderDraftLineItemsRequest
	(*VendorUpdateOrderDraftLineItemsResponse)(nil),            // 11: api.order.v1.VendorUpdateOrderDraftLineItemsResponse
	(*VendorGetOrderRequest)(nil),                              // 12: api.order.v1.VendorGetOrderRequest
	(*VendorGetOrderResponse)(nil),                             // 13: api.order.v1.VendorGetOrderResponse
	(*VendorGetOrderDraftRequest)(nil),                         // 14: api.order.v1.VendorGetOrderDraftRequest
	(*VendorGetOrderDraftResponse)(nil),                        // 15: api.order.v1.VendorGetOrderDraftResponse
	(*VendorListOrderDraftForCheckoutResponse)(nil),            // 16: api.order.v1.VendorListOrderDraftForCheckoutResponse
	(*LegacyVendorGetPriceQuoteRequest)(nil),                   // 17: api.order.v1.LegacyVendorGetPriceQuoteRequest
	(*LegacyVendorGetPriceQuoteResponse)(nil),                  // 18: api.order.v1.LegacyVendorGetPriceQuoteResponse
	(*LegacyVendorCreateOrderDraftRequest)(nil),                // 19: api.order.v1.LegacyVendorCreateOrderDraftRequest
	(*LegacyVendorCreateOrderDraftResponse)(nil),               // 20: api.order.v1.LegacyVendorCreateOrderDraftResponse
	(*LegacyVendorCreateOrderDraftWithLabelRequest)(nil),       // 21: api.order.v1.LegacyVendorCreateOrderDraftWithLabelRequest
	(*LegacyVendorCreateOrderDraftWithLabelResponse)(nil),      // 22: api.order.v1.LegacyVendorCreateOrderDraftWithLabelResponse
	(*LegacyVendorListOrderRequest)(nil),                       // 23: api.order.v1.LegacyVendorListOrderRequest
	(*LegacyVendorListOrderResponse)(nil),                      // 24: api.order.v1.LegacyVendorListOrderResponse
	(*LegacyVendorUpdateOrderDraftLineItemsRequest)(nil),       // 25: api.order.v1.LegacyVendorUpdateOrderDraftLineItemsRequest
	(*LegacyVendorUpdateOrderDraftLineItemsResponse)(nil),      // 26: api.order.v1.LegacyVendorUpdateOrderDraftLineItemsResponse
	(*LegacyVendorGetOrderRequest)(nil),                        // 27: api.order.v1.LegacyVendorGetOrderRequest
	(*LegacyVendorGetOrderResponse)(nil),                       // 28: api.order.v1.LegacyVendorGetOrderResponse
	(*VendorUpdateOrderDraftLineItemsResponse_Data)(nil),       // 29: api.order.v1.VendorUpdateOrderDraftLineItemsResponse.Data
	(*LegacyVendorGetPriceQuoteRequest_LineItem)(nil),          // 30: api.order.v1.LegacyVendorGetPriceQuoteRequest.LineItem
	(*LegacyVendorGetPriceQuoteResponse_PriceCalculation)(nil), // 31: api.order.v1.LegacyVendorGetPriceQuoteResponse.PriceCalculation
	(*LegacyVendorUpdateOrderDraftLineItemsResponse_Data)(nil), // 32: api.order.v1.LegacyVendorUpdateOrderDraftLineItemsResponse.Data
	(*VendorOrderDraftFilter)(nil),                             // 33: api.order.v1.VendorOrderDraftFilter
	(*v1.Paging)(nil),                                          // 34: common.type.v1.Paging
	(*v1.PagingResponse)(nil),                                  // 35: common.type.v1.PagingResponse
	(*VendorOrderDraft_Short)(nil),                             // 36: api.order.v1.VendorOrderDraft.Short
	(*VendorOrderFilter)(nil),                                  // 37: api.order.v1.VendorOrderFilter
	(*VendorOrder_Short)(nil),                                  // 38: api.order.v1.VendorOrder.Short
	(*VendorOrderDraftManualCreationParams)(nil),               // 39: api.order.v1.VendorOrderDraftManualCreationParams
	(*VendorOrderDraftWithLabelCreationParams)(nil),            // 40: api.order.v1.VendorOrderDraftWithLabelCreationParams
	(*VendorOrderPriceCalculation_Billing)(nil),                // 41: api.order.v1.VendorOrderPriceCalculation.Billing
	(*VendorOrderPriceCalculation_Shipping)(nil),               // 42: api.order.v1.VendorOrderPriceCalculation.Shipping
	(*VendorOrderPriceCalculation_LineItem)(nil),               // 43: api.order.v1.VendorOrderPriceCalculation.LineItem
	(*VendorOrderPriceCalculation_GiftMessage)(nil),            // 44: api.order.v1.VendorOrderPriceCalculation.GiftMessage
	(*VendorOrderPriceCalculation_OrderPriceQuote)(nil),        // 45: api.order.v1.VendorOrderPriceCalculation.OrderPriceQuote
	(*VendorOrderDraftUpdateParams_LineItem)(nil),              // 46: api.order.v1.VendorOrderDraftUpdateParams.LineItem
	(*VendorOrder)(nil),                                        // 47: api.order.v1.VendorOrder
	(*VendorOrderDraft)(nil),                                   // 48: api.order.v1.VendorOrderDraft
	(*VendorOrderDraftCheckout)(nil),                           // 49: api.order.v1.VendorOrderDraftCheckout
	(*v1.LegacyCredentials)(nil),                               // 50: common.type.v1.LegacyCredentials
	(*wrapperspb.BoolValue)(nil),                               // 51: google.protobuf.BoolValue
	(*LegacyVendorLineItemCreationParams)(nil),                 // 52: api.order.v1.LegacyVendorLineItemCreationParams
	(*LegacyVendorCreationResult)(nil),                         // 53: api.order.v1.LegacyVendorCreationResult
	(*v1.LegacyPagingResponse)(nil),                            // 54: common.type.v1.LegacyPagingResponse
	(*LegacyVendorOrder)(nil),                                  // 55: api.order.v1.LegacyVendorOrder
	(*LegacyVendorLineItemUpdateParams)(nil),                   // 56: api.order.v1.LegacyVendorLineItemUpdateParams
}
var file_api_order_v1_api_vendor_order_proto_depIdxs = []int32{
	33, // 0: api.order.v1.VendorListOrderDraftRequest.filter:type_name -> api.order.v1.VendorOrderDraftFilter
	34, // 1: api.order.v1.VendorListOrderDraftRequest.paging:type_name -> common.type.v1.Paging
	35, // 2: api.order.v1.VendorListOrderDraftResponse.paging:type_name -> common.type.v1.PagingResponse
	36, // 3: api.order.v1.VendorListOrderDraftResponse.data:type_name -> api.order.v1.VendorOrderDraft.Short
	37, // 4: api.order.v1.VendorListOrderRequest.filter:type_name -> api.order.v1.VendorOrderFilter
	34, // 5: api.order.v1.VendorListOrderRequest.paging:type_name -> common.type.v1.Paging
	35, // 6: api.order.v1.VendorListOrderResponse.paging:type_name -> common.type.v1.PagingResponse
	38, // 7: api.order.v1.VendorListOrderResponse.data:type_name -> api.order.v1.VendorOrder.Short
	39, // 8: api.order.v1.VendorCreateOrderDraftRequest.data:type_name -> api.order.v1.VendorOrderDraftManualCreationParams
	36, // 9: api.order.v1.VendorCreateOrderDraftResponse.data:type_name -> api.order.v1.VendorOrderDraft.Short
	40, // 10: api.order.v1.VendorCreateOrderDraftWithLabelRequest.data:type_name -> api.order.v1.VendorOrderDraftWithLabelCreationParams
	36, // 11: api.order.v1.VendorCreateOrderDraftWithLabelResponse.data:type_name -> api.order.v1.VendorOrderDraft.Short
	41, // 12: api.order.v1.VendorGetPriceQuoteRequest.billing:type_name -> api.order.v1.VendorOrderPriceCalculation.Billing
	42, // 13: api.order.v1.VendorGetPriceQuoteRequest.shipping:type_name -> api.order.v1.VendorOrderPriceCalculation.Shipping
	43, // 14: api.order.v1.VendorGetPriceQuoteRequest.line_items:type_name -> api.order.v1.VendorOrderPriceCalculation.LineItem
	44, // 15: api.order.v1.VendorGetPriceQuoteRequest.gift_messages:type_name -> api.order.v1.VendorOrderPriceCalculation.GiftMessage
	45, // 16: api.order.v1.VendorGetPriceQuoteResponse.data:type_name -> api.order.v1.VendorOrderPriceCalculation.OrderPriceQuote
	46, // 17: api.order.v1.VendorUpdateOrderDraftLineItemsRequest.line_items:type_name -> api.order.v1.VendorOrderDraftUpdateParams.LineItem
	29, // 18: api.order.v1.VendorUpdateOrderDraftLineItemsResponse.data:type_name -> api.order.v1.VendorUpdateOrderDraftLineItemsResponse.Data
	47, // 19: api.order.v1.VendorGetOrderResponse.data:type_name -> api.order.v1.VendorOrder
	48, // 20: api.order.v1.VendorGetOrderDraftResponse.data:type_name -> api.order.v1.VendorOrderDraft
	49, // 21: api.order.v1.VendorListOrderDraftForCheckoutResponse.data:type_name -> api.order.v1.VendorOrderDraftCheckout
	50, // 22: api.order.v1.LegacyVendorGetPriceQuoteRequest.credentials:type_name -> common.type.v1.LegacyCredentials
	30, // 23: api.order.v1.LegacyVendorGetPriceQuoteRequest.line_items:type_name -> api.order.v1.LegacyVendorGetPriceQuoteRequest.LineItem
	31, // 24: api.order.v1.LegacyVendorGetPriceQuoteResponse.data:type_name -> api.order.v1.LegacyVendorGetPriceQuoteResponse.PriceCalculation
	50, // 25: api.order.v1.LegacyVendorCreateOrderDraftRequest.credentials:type_name -> common.type.v1.LegacyCredentials
	51, // 26: api.order.v1.LegacyVendorCreateOrderDraftRequest.agree_at_risk:type_name -> google.protobuf.BoolValue
	52, // 27: api.order.v1.LegacyVendorCreateOrderDraftRequest.line_items:type_name -> api.order.v1.LegacyVendorLineItemCreationParams
	53, // 28: api.order.v1.LegacyVendorCreateOrderDraftResponse.result:type_name -> api.order.v1.LegacyVendorCreationResult
	50, // 29: api.order.v1.LegacyVendorCreateOrderDraftWithLabelRequest.credentials:type_name -> common.type.v1.LegacyCredentials
	51, // 30: api.order.v1.LegacyVendorCreateOrderDraftWithLabelRequest.agree_at_risk:type_name -> google.protobuf.BoolValue
	52, // 31: api.order.v1.LegacyVendorCreateOrderDraftWithLabelRequest.line_items:type_name -> api.order.v1.LegacyVendorLineItemCreationParams
	53, // 32: api.order.v1.LegacyVendorCreateOrderDraftWithLabelResponse.result:type_name -> api.order.v1.LegacyVendorCreationResult
	50, // 33: api.order.v1.LegacyVendorListOrderRequest.credentials:type_name -> common.type.v1.LegacyCredentials
	34, // 34: api.order.v1.LegacyVendorListOrderRequest.paging:type_name -> common.type.v1.Paging
	54, // 35: api.order.v1.LegacyVendorListOrderResponse.paging:type_name -> common.type.v1.LegacyPagingResponse
	55, // 36: api.order.v1.LegacyVendorListOrderResponse.result:type_name -> api.order.v1.LegacyVendorOrder
	50, // 37: api.order.v1.LegacyVendorUpdateOrderDraftLineItemsRequest.credentials:type_name -> common.type.v1.LegacyCredentials
	56, // 38: api.order.v1.LegacyVendorUpdateOrderDraftLineItemsRequest.line_items:type_name -> api.order.v1.LegacyVendorLineItemUpdateParams
	32, // 39: api.order.v1.LegacyVendorUpdateOrderDraftLineItemsResponse.result:type_name -> api.order.v1.LegacyVendorUpdateOrderDraftLineItemsResponse.Data
	50, // 40: api.order.v1.LegacyVendorGetOrderRequest.credentials:type_name -> common.type.v1.LegacyCredentials
	55, // 41: api.order.v1.LegacyVendorGetOrderResponse.result:type_name -> api.order.v1.LegacyVendorOrder
	2,  // 42: api.order.v1.VendorOrderAPI.VendorListOrder:input_type -> api.order.v1.VendorListOrderRequest
	0,  // 43: api.order.v1.VendorOrderAPI.VendorListOrderDraft:input_type -> api.order.v1.VendorListOrderDraftRequest
	4,  // 44: api.order.v1.VendorOrderAPI.VendorCreateOrderDraft:input_type -> api.order.v1.VendorCreateOrderDraftRequest
	6,  // 45: api.order.v1.VendorOrderAPI.VendorCreateOrderDraftWithLabel:input_type -> api.order.v1.VendorCreateOrderDraftWithLabelRequest
	8,  // 46: api.order.v1.VendorOrderAPI.VendorGetPriceQuote:input_type -> api.order.v1.VendorGetPriceQuoteRequest
	10, // 47: api.order.v1.VendorOrderAPI.VendorUpdateOrderDraftLineItems:input_type -> api.order.v1.VendorUpdateOrderDraftLineItemsRequest
	12, // 48: api.order.v1.VendorOrderAPI.VendorGetOrder:input_type -> api.order.v1.VendorGetOrderRequest
	14, // 49: api.order.v1.VendorOrderAPI.VendorGetOrderDraft:input_type -> api.order.v1.VendorGetOrderDraftRequest
	17, // 50: api.order.v1.LegacyVendorOrderAPI.LegacyVendorGetPriceQuote:input_type -> api.order.v1.LegacyVendorGetPriceQuoteRequest
	19, // 51: api.order.v1.LegacyVendorOrderAPI.LegacyVendorCreateOrderDraft:input_type -> api.order.v1.LegacyVendorCreateOrderDraftRequest
	21, // 52: api.order.v1.LegacyVendorOrderAPI.LegacyVendorCreateOrderDraftWithLabel:input_type -> api.order.v1.LegacyVendorCreateOrderDraftWithLabelRequest
	23, // 53: api.order.v1.LegacyVendorOrderAPI.LegacyVendorListOrder:input_type -> api.order.v1.LegacyVendorListOrderRequest
	25, // 54: api.order.v1.LegacyVendorOrderAPI.LegacyVendorUpdateOrderDraftLineItems:input_type -> api.order.v1.LegacyVendorUpdateOrderDraftLineItemsRequest
	27, // 55: api.order.v1.LegacyVendorOrderAPI.LegacyVendorGetOrder:input_type -> api.order.v1.LegacyVendorGetOrderRequest
	3,  // 56: api.order.v1.VendorOrderAPI.VendorListOrder:output_type -> api.order.v1.VendorListOrderResponse
	1,  // 57: api.order.v1.VendorOrderAPI.VendorListOrderDraft:output_type -> api.order.v1.VendorListOrderDraftResponse
	5,  // 58: api.order.v1.VendorOrderAPI.VendorCreateOrderDraft:output_type -> api.order.v1.VendorCreateOrderDraftResponse
	7,  // 59: api.order.v1.VendorOrderAPI.VendorCreateOrderDraftWithLabel:output_type -> api.order.v1.VendorCreateOrderDraftWithLabelResponse
	9,  // 60: api.order.v1.VendorOrderAPI.VendorGetPriceQuote:output_type -> api.order.v1.VendorGetPriceQuoteResponse
	11, // 61: api.order.v1.VendorOrderAPI.VendorUpdateOrderDraftLineItems:output_type -> api.order.v1.VendorUpdateOrderDraftLineItemsResponse
	13, // 62: api.order.v1.VendorOrderAPI.VendorGetOrder:output_type -> api.order.v1.VendorGetOrderResponse
	15, // 63: api.order.v1.VendorOrderAPI.VendorGetOrderDraft:output_type -> api.order.v1.VendorGetOrderDraftResponse
	18, // 64: api.order.v1.LegacyVendorOrderAPI.LegacyVendorGetPriceQuote:output_type -> api.order.v1.LegacyVendorGetPriceQuoteResponse
	20, // 65: api.order.v1.LegacyVendorOrderAPI.LegacyVendorCreateOrderDraft:output_type -> api.order.v1.LegacyVendorCreateOrderDraftResponse
	22, // 66: api.order.v1.LegacyVendorOrderAPI.LegacyVendorCreateOrderDraftWithLabel:output_type -> api.order.v1.LegacyVendorCreateOrderDraftWithLabelResponse
	24, // 67: api.order.v1.LegacyVendorOrderAPI.LegacyVendorListOrder:output_type -> api.order.v1.LegacyVendorListOrderResponse
	26, // 68: api.order.v1.LegacyVendorOrderAPI.LegacyVendorUpdateOrderDraftLineItems:output_type -> api.order.v1.LegacyVendorUpdateOrderDraftLineItemsResponse
	28, // 69: api.order.v1.LegacyVendorOrderAPI.LegacyVendorGetOrder:output_type -> api.order.v1.LegacyVendorGetOrderResponse
	56, // [56:70] is the sub-list for method output_type
	42, // [42:56] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_api_order_v1_api_vendor_order_proto_init() }
func file_api_order_v1_api_vendor_order_proto_init() {
	if File_api_order_v1_api_vendor_order_proto != nil {
		return
	}
	file_api_order_v1_data_vendor_order_proto_init()
	file_api_order_v1_data_vendor_order_draft_proto_init()
	file_api_order_v1_data_vendor_order_draft_creation_proto_init()
	file_api_order_v1_data_vendor_order_draft_update_proto_init()
	file_api_order_v1_data_vendor_order_price_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_order_v1_api_vendor_order_proto_rawDesc), len(file_api_order_v1_api_vendor_order_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_api_order_v1_api_vendor_order_proto_goTypes,
		DependencyIndexes: file_api_order_v1_api_vendor_order_proto_depIdxs,
		MessageInfos:      file_api_order_v1_api_vendor_order_proto_msgTypes,
	}.Build()
	File_api_order_v1_api_vendor_order_proto = out.File
	file_api_order_v1_api_vendor_order_proto_goTypes = nil
	file_api_order_v1_api_vendor_order_proto_depIdxs = nil
}
