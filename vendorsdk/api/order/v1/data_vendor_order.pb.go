// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/order/v1/data_vendor_order.proto

package orderv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/gearment/gea-next/vendorsdk/common/platform/v1"
	v11 "github.com/gearment/gea-next/vendorsdk/common/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VendorOrderRefundStatus int32

const (
	VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_ALL                     VendorOrderRefundStatus = 0
	VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_UNKNOWN                 VendorOrderRefundStatus = 1
	VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_NOT_REQUESTED           VendorOrderRefundStatus = 2  // No refund requested
	VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_NOT_APPLICABLE          VendorOrderRefundStatus = 3  // Refund not applicable for this order
	VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_REQUESTED               VendorOrderRefundStatus = 4  // Refund requested, awaiting approval
	VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_PROCESSING              VendorOrderRefundStatus = 5  // Refund is being processed
	VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_REFUNDED                VendorOrderRefundStatus = 6  // Fully refunded
	VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_PARTIALLY_REFUNDED      VendorOrderRefundStatus = 7  // Partially refunded
	VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_RETURN_REFUND_REQUESTED VendorOrderRefundStatus = 8  // Return and refund requested
	VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_RETURN_REFUNDED         VendorOrderRefundStatus = 9  // Returned and refunded
	VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_REJECTED                VendorOrderRefundStatus = 10 // Refund request rejected
	VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_FAILED                  VendorOrderRefundStatus = 11 // Refund processing failed
)

// Enum value maps for VendorOrderRefundStatus.
var (
	VendorOrderRefundStatus_name = map[int32]string{
		0:  "VENDOR_ORDER_REFUND_STATUS_ALL",
		1:  "VENDOR_ORDER_REFUND_STATUS_UNKNOWN",
		2:  "VENDOR_ORDER_REFUND_STATUS_NOT_REQUESTED",
		3:  "VENDOR_ORDER_REFUND_STATUS_NOT_APPLICABLE",
		4:  "VENDOR_ORDER_REFUND_STATUS_REQUESTED",
		5:  "VENDOR_ORDER_REFUND_STATUS_PROCESSING",
		6:  "VENDOR_ORDER_REFUND_STATUS_REFUNDED",
		7:  "VENDOR_ORDER_REFUND_STATUS_PARTIALLY_REFUNDED",
		8:  "VENDOR_ORDER_REFUND_STATUS_RETURN_REFUND_REQUESTED",
		9:  "VENDOR_ORDER_REFUND_STATUS_RETURN_REFUNDED",
		10: "VENDOR_ORDER_REFUND_STATUS_REJECTED",
		11: "VENDOR_ORDER_REFUND_STATUS_FAILED",
	}
	VendorOrderRefundStatus_value = map[string]int32{
		"VENDOR_ORDER_REFUND_STATUS_ALL":                     0,
		"VENDOR_ORDER_REFUND_STATUS_UNKNOWN":                 1,
		"VENDOR_ORDER_REFUND_STATUS_NOT_REQUESTED":           2,
		"VENDOR_ORDER_REFUND_STATUS_NOT_APPLICABLE":          3,
		"VENDOR_ORDER_REFUND_STATUS_REQUESTED":               4,
		"VENDOR_ORDER_REFUND_STATUS_PROCESSING":              5,
		"VENDOR_ORDER_REFUND_STATUS_REFUNDED":                6,
		"VENDOR_ORDER_REFUND_STATUS_PARTIALLY_REFUNDED":      7,
		"VENDOR_ORDER_REFUND_STATUS_RETURN_REFUND_REQUESTED": 8,
		"VENDOR_ORDER_REFUND_STATUS_RETURN_REFUNDED":         9,
		"VENDOR_ORDER_REFUND_STATUS_REJECTED":                10,
		"VENDOR_ORDER_REFUND_STATUS_FAILED":                  11,
	}
)

func (x VendorOrderRefundStatus) Enum() *VendorOrderRefundStatus {
	p := new(VendorOrderRefundStatus)
	*p = x
	return p
}

func (x VendorOrderRefundStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VendorOrderRefundStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_order_v1_data_vendor_order_proto_enumTypes[0].Descriptor()
}

func (VendorOrderRefundStatus) Type() protoreflect.EnumType {
	return &file_api_order_v1_data_vendor_order_proto_enumTypes[0]
}

func (x VendorOrderRefundStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VendorOrderRefundStatus.Descriptor instead.
func (VendorOrderRefundStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_proto_rawDescGZIP(), []int{0}
}

type VendorOrderCancelStatus int32

const (
	VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_ALL                VendorOrderCancelStatus = 0
	VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_UNKNOWN            VendorOrderCancelStatus = 1
	VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_NOT_REQUESTED      VendorOrderCancelStatus = 2  // No cancellation requested
	VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_REQUESTED          VendorOrderCancelStatus = 3  // Cancellation requested, awaiting approval
	VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_PROCESSING         VendorOrderCancelStatus = 4  // Cancellation is being processed
	VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_CANCELED           VendorOrderCancelStatus = 5  // Fully canceled
	VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_PARTIALLY_CANCELED VendorOrderCancelStatus = 6  // Partially canceled
	VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_RETURN_REQUESTED   VendorOrderCancelStatus = 7  // Return requested
	VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_RETURNED           VendorOrderCancelStatus = 8  // Item returned
	VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_RETURN_REJECTED    VendorOrderCancelStatus = 9  // Return request rejected
	VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_REJECTED           VendorOrderCancelStatus = 10 // Cancellation request rejected
	VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_FAILED             VendorOrderCancelStatus = 11 // Cancellation processing failed
)

// Enum value maps for VendorOrderCancelStatus.
var (
	VendorOrderCancelStatus_name = map[int32]string{
		0:  "VENDOR_ORDER_CANCEL_STATUS_ALL",
		1:  "VENDOR_ORDER_CANCEL_STATUS_UNKNOWN",
		2:  "VENDOR_ORDER_CANCEL_STATUS_NOT_REQUESTED",
		3:  "VENDOR_ORDER_CANCEL_STATUS_REQUESTED",
		4:  "VENDOR_ORDER_CANCEL_STATUS_PROCESSING",
		5:  "VENDOR_ORDER_CANCEL_STATUS_CANCELED",
		6:  "VENDOR_ORDER_CANCEL_STATUS_PARTIALLY_CANCELED",
		7:  "VENDOR_ORDER_CANCEL_STATUS_RETURN_REQUESTED",
		8:  "VENDOR_ORDER_CANCEL_STATUS_RETURNED",
		9:  "VENDOR_ORDER_CANCEL_STATUS_RETURN_REJECTED",
		10: "VENDOR_ORDER_CANCEL_STATUS_REJECTED",
		11: "VENDOR_ORDER_CANCEL_STATUS_FAILED",
	}
	VendorOrderCancelStatus_value = map[string]int32{
		"VENDOR_ORDER_CANCEL_STATUS_ALL":                0,
		"VENDOR_ORDER_CANCEL_STATUS_UNKNOWN":            1,
		"VENDOR_ORDER_CANCEL_STATUS_NOT_REQUESTED":      2,
		"VENDOR_ORDER_CANCEL_STATUS_REQUESTED":          3,
		"VENDOR_ORDER_CANCEL_STATUS_PROCESSING":         4,
		"VENDOR_ORDER_CANCEL_STATUS_CANCELED":           5,
		"VENDOR_ORDER_CANCEL_STATUS_PARTIALLY_CANCELED": 6,
		"VENDOR_ORDER_CANCEL_STATUS_RETURN_REQUESTED":   7,
		"VENDOR_ORDER_CANCEL_STATUS_RETURNED":           8,
		"VENDOR_ORDER_CANCEL_STATUS_RETURN_REJECTED":    9,
		"VENDOR_ORDER_CANCEL_STATUS_REJECTED":           10,
		"VENDOR_ORDER_CANCEL_STATUS_FAILED":             11,
	}
)

func (x VendorOrderCancelStatus) Enum() *VendorOrderCancelStatus {
	p := new(VendorOrderCancelStatus)
	*p = x
	return p
}

func (x VendorOrderCancelStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VendorOrderCancelStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_order_v1_data_vendor_order_proto_enumTypes[1].Descriptor()
}

func (VendorOrderCancelStatus) Type() protoreflect.EnumType {
	return &file_api_order_v1_data_vendor_order_proto_enumTypes[1]
}

func (x VendorOrderCancelStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VendorOrderCancelStatus.Descriptor instead.
func (VendorOrderCancelStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_proto_rawDescGZIP(), []int{1}
}

type VendorOrderStatus int32

const (
	VendorOrderStatus_VENDOR_ORDER_STATUS_UNKNOWN              VendorOrderStatus = 0
	VendorOrderStatus_VENDOR_ORDER_STATUS_ALL                  VendorOrderStatus = 1 // All statuses (used for filtering)
	VendorOrderStatus_VENDOR_ORDER_STATUS_AWAITING_PAYMENT     VendorOrderStatus = 2 // Waiting for payment
	VendorOrderStatus_VENDOR_ORDER_STATUS_PAYMENT_FAILED       VendorOrderStatus = 3 // Payment failed
	VendorOrderStatus_VENDOR_ORDER_STATUS_AWAITING_FULFILLMENT VendorOrderStatus = 4 // Paid, waiting to start production
	VendorOrderStatus_VENDOR_ORDER_STATUS_IN_PRODUCTION        VendorOrderStatus = 5 // Currently being produced
	VendorOrderStatus_VENDOR_ORDER_STATUS_PACKED               VendorOrderStatus = 6 // Packed and ready to ship
	VendorOrderStatus_VENDOR_ORDER_STATUS_SHIPPED              VendorOrderStatus = 7 // Shipped to customer
	VendorOrderStatus_VENDOR_ORDER_STATUS_CANCELLED            VendorOrderStatus = 8 // Order canceled
	VendorOrderStatus_VENDOR_ORDER_STATUS_ON_HOLD              VendorOrderStatus = 9 // Order on hold (requires attention)
)

// Enum value maps for VendorOrderStatus.
var (
	VendorOrderStatus_name = map[int32]string{
		0: "VENDOR_ORDER_STATUS_UNKNOWN",
		1: "VENDOR_ORDER_STATUS_ALL",
		2: "VENDOR_ORDER_STATUS_AWAITING_PAYMENT",
		3: "VENDOR_ORDER_STATUS_PAYMENT_FAILED",
		4: "VENDOR_ORDER_STATUS_AWAITING_FULFILLMENT",
		5: "VENDOR_ORDER_STATUS_IN_PRODUCTION",
		6: "VENDOR_ORDER_STATUS_PACKED",
		7: "VENDOR_ORDER_STATUS_SHIPPED",
		8: "VENDOR_ORDER_STATUS_CANCELLED",
		9: "VENDOR_ORDER_STATUS_ON_HOLD",
	}
	VendorOrderStatus_value = map[string]int32{
		"VENDOR_ORDER_STATUS_UNKNOWN":              0,
		"VENDOR_ORDER_STATUS_ALL":                  1,
		"VENDOR_ORDER_STATUS_AWAITING_PAYMENT":     2,
		"VENDOR_ORDER_STATUS_PAYMENT_FAILED":       3,
		"VENDOR_ORDER_STATUS_AWAITING_FULFILLMENT": 4,
		"VENDOR_ORDER_STATUS_IN_PRODUCTION":        5,
		"VENDOR_ORDER_STATUS_PACKED":               6,
		"VENDOR_ORDER_STATUS_SHIPPED":              7,
		"VENDOR_ORDER_STATUS_CANCELLED":            8,
		"VENDOR_ORDER_STATUS_ON_HOLD":              9,
	}
)

func (x VendorOrderStatus) Enum() *VendorOrderStatus {
	p := new(VendorOrderStatus)
	*p = x
	return p
}

func (x VendorOrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VendorOrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_order_v1_data_vendor_order_proto_enumTypes[2].Descriptor()
}

func (VendorOrderStatus) Type() protoreflect.EnumType {
	return &file_api_order_v1_data_vendor_order_proto_enumTypes[2]
}

func (x VendorOrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VendorOrderStatus.Descriptor instead.
func (VendorOrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_proto_rawDescGZIP(), []int{2}
}

type VendorOrderPaymentStatus int32

const (
	VendorOrderPaymentStatus_VENDOR_ORDER_PAYMENT_STATUS_UNKNOWN           VendorOrderPaymentStatus = 0
	VendorOrderPaymentStatus_VENDOR_ORDER_PAYMENT_STATUS_ALL               VendorOrderPaymentStatus = 1 // All payment statuses (used for filtering)
	VendorOrderPaymentStatus_VENDOR_ORDER_PAYMENT_STATUS_PENDING           VendorOrderPaymentStatus = 2 // Payment pending
	VendorOrderPaymentStatus_VENDOR_ORDER_PAYMENT_STATUS_SUCCESS           VendorOrderPaymentStatus = 3 // Payment successful
	VendorOrderPaymentStatus_VENDOR_ORDER_PAYMENT_STATUS_FAILED            VendorOrderPaymentStatus = 4 // Payment failed
	VendorOrderPaymentStatus_VENDOR_ORDER_PAYMENT_STATUS_EXPIRED           VendorOrderPaymentStatus = 5 // Payment link expired
	VendorOrderPaymentStatus_VENDOR_ORDER_PAYMENT_STATUS_SUCCESS_PARTIALLY VendorOrderPaymentStatus = 6 // Partially paid
)

// Enum value maps for VendorOrderPaymentStatus.
var (
	VendorOrderPaymentStatus_name = map[int32]string{
		0: "VENDOR_ORDER_PAYMENT_STATUS_UNKNOWN",
		1: "VENDOR_ORDER_PAYMENT_STATUS_ALL",
		2: "VENDOR_ORDER_PAYMENT_STATUS_PENDING",
		3: "VENDOR_ORDER_PAYMENT_STATUS_SUCCESS",
		4: "VENDOR_ORDER_PAYMENT_STATUS_FAILED",
		5: "VENDOR_ORDER_PAYMENT_STATUS_EXPIRED",
		6: "VENDOR_ORDER_PAYMENT_STATUS_SUCCESS_PARTIALLY",
	}
	VendorOrderPaymentStatus_value = map[string]int32{
		"VENDOR_ORDER_PAYMENT_STATUS_UNKNOWN":           0,
		"VENDOR_ORDER_PAYMENT_STATUS_ALL":               1,
		"VENDOR_ORDER_PAYMENT_STATUS_PENDING":           2,
		"VENDOR_ORDER_PAYMENT_STATUS_SUCCESS":           3,
		"VENDOR_ORDER_PAYMENT_STATUS_FAILED":            4,
		"VENDOR_ORDER_PAYMENT_STATUS_EXPIRED":           5,
		"VENDOR_ORDER_PAYMENT_STATUS_SUCCESS_PARTIALLY": 6,
	}
)

func (x VendorOrderPaymentStatus) Enum() *VendorOrderPaymentStatus {
	p := new(VendorOrderPaymentStatus)
	*p = x
	return p
}

func (x VendorOrderPaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VendorOrderPaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_order_v1_data_vendor_order_proto_enumTypes[3].Descriptor()
}

func (VendorOrderPaymentStatus) Type() protoreflect.EnumType {
	return &file_api_order_v1_data_vendor_order_proto_enumTypes[3]
}

func (x VendorOrderPaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VendorOrderPaymentStatus.Descriptor instead.
func (VendorOrderPaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_proto_rawDescGZIP(), []int{3}
}

type VendorOrder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique order ID
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Store ID this order belongs to
	StoreId string `protobuf:"bytes,2,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	// Team ID (your account ID)
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// How this order was created (manual, API, store sync, etc.)
	CreatedMethod VendorCreatedMethod `protobuf:"varint,4,opt,name=created_method,json=createdMethod,proto3,enum=api.order.v1.VendorCreatedMethod" json:"created_method,omitempty"`
	// Marketplace platform (Shopify, Etsy, WooCommerce, etc.)
	OrderPlatform v1.MarketplacePlatform `protobuf:"varint,5,opt,name=order_platform,json=orderPlatform,proto3,enum=common.platform.v1.MarketplacePlatform" json:"order_platform,omitempty"`
	// Platform reference ID (deprecated, will be removed)
	PlatformRef string `protobuf:"bytes,6,opt,name=platform_ref,json=platformRef,proto3" json:"platform_ref,omitempty"` // will be deleted soon
	// Fulfillment vendor (Gearment, etc.)
	FulfillmentVendor VendorFulfillmentVendor `protobuf:"varint,7,opt,name=fulfillment_vendor,json=fulfillmentVendor,proto3,enum=api.order.v1.VendorFulfillmentVendor" json:"fulfillment_vendor,omitempty"`
	// Vendor's reference ID for this order
	VendorRef string `protobuf:"bytes,8,opt,name=vendor_ref,json=vendorRef,proto3" json:"vendor_ref,omitempty"`
	// Fulfillment priority (standard, rush, etc.)
	Priority VendorFulfillmentPriority `protobuf:"varint,9,opt,name=priority,proto3,enum=api.order.v1.VendorFulfillmentPriority" json:"priority,omitempty"`
	// Fulfillment configuration options
	FulfillmentOption *VendorFulfillmentOption `protobuf:"bytes,10,opt,name=fulfillment_option,json=fulfillmentOption,proto3" json:"fulfillment_option,omitempty"`
	// Shipping method and carrier details
	ShippingOption *VendorShippingOption `protobuf:"bytes,11,opt,name=shipping_option,json=shippingOption,proto3" json:"shipping_option,omitempty"`
	// Billing and tax options (IOSS, etc.)
	BillingOption *VendorBillingOption `protobuf:"bytes,12,opt,name=billing_option,json=billingOption,proto3" json:"billing_option,omitempty"`
	// Shipping label URLs (if pre-purchased)
	ShippingLabels []string `protobuf:"bytes,13,rep,name=shipping_labels,json=shippingLabels,proto3" json:"shipping_labels,omitempty"`
	// When the order was originally placed
	OrderDate *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	// When the order was approved for fulfillment
	ApprovedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=approved_at,json=approvedAt,proto3" json:"approved_at,omitempty"`
	// When the payment was confirmed
	PaidAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=paid_at,json=paidAt,proto3" json:"paid_at,omitempty"`
	// Current order status
	OrderStatus VendorOrderStatus `protobuf:"varint,17,opt,name=order_status,json=orderStatus,proto3,enum=api.order.v1.VendorOrderStatus" json:"order_status,omitempty"`
	// Primary package ID for this order
	PrimaryPackageId string `protobuf:"bytes,18,opt,name=primary_package_id,json=primaryPackageId,proto3" json:"primary_package_id,omitempty"`
	// Primary shipment ID for this order
	PrimaryShipmentId string `protobuf:"bytes,19,opt,name=primary_shipment_id,json=primaryShipmentId,proto3" json:"primary_shipment_id,omitempty"`
	// Whether shipping label is attached
	IsLabelAttached bool `protobuf:"varint,20,opt,name=is_label_attached,json=isLabelAttached,proto3" json:"is_label_attached,omitempty"`
	// Subtotal (sum of all line items before fees/tax/discount)
	OrderSubtotal *v11.Money `protobuf:"bytes,21,opt,name=order_subtotal,json=orderSubtotal,proto3" json:"order_subtotal,omitempty"`
	// Total tax amount
	OrderTax *v11.Money `protobuf:"bytes,22,opt,name=order_tax,json=orderTax,proto3" json:"order_tax,omitempty"`
	// Additional processing fees
	OrderFee *v11.Money `protobuf:"bytes,23,opt,name=order_fee,json=orderFee,proto3" json:"order_fee,omitempty"`
	// Total discount applied
	OrderDiscount *v11.Money `protobuf:"bytes,24,opt,name=order_discount,json=orderDiscount,proto3" json:"order_discount,omitempty"`
	// Final total amount (subtotal + fees + tax - discount)
	OrderTotal *v11.Money `protobuf:"bytes,25,opt,name=order_total,json=orderTotal,proto3" json:"order_total,omitempty"`
	// Amount redeemed from credits/wallet
	OrderRedeem *v11.Money `protobuf:"bytes,26,opt,name=order_redeem,json=orderRedeem,proto3" json:"order_redeem,omitempty"`
	// Amount already paid
	PaidTotal *v11.Money `protobuf:"bytes,27,opt,name=paid_total,json=paidTotal,proto3" json:"paid_total,omitempty"`
	// Amount still needed to complete payment
	PaidNeeded *v11.Money `protobuf:"bytes,28,opt,name=paid_needed,json=paidNeeded,proto3" json:"paid_needed,omitempty"`
	// Primary tracking number
	TrackingNo string `protobuf:"bytes,29,opt,name=tracking_no,json=trackingNo,proto3" json:"tracking_no,omitempty"`
	// When this order record was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// When this order was last updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// All line items in this order
	LineItems []*VendorOrderLineItem `protobuf:"bytes,32,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	// Store name for display
	StoreName string `protobuf:"bytes,33,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// Shipping and billing addresses
	Addresses []*VendorAddress `protobuf:"bytes,34,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Processing stages (printing, packing, shipping, etc.)
	Stages []*VendorProcessingStage `protobuf:"bytes,35,rep,name=stages,proto3" json:"stages,omitempty"`
	// Gift message fee (if applicable)
	OrderGiftMessageFee *v11.Money `protobuf:"bytes,36,opt,name=order_gift_message_fee,json=orderGiftMessageFee,proto3" json:"order_gift_message_fee,omitempty"`
	// Shipping cost
	OrderShippingFee *v11.Money `protobuf:"bytes,37,opt,name=order_shipping_fee,json=orderShippingFee,proto3" json:"order_shipping_fee,omitempty"`
	// Order handling fee
	OrderHandleFee *v11.Money `protobuf:"bytes,38,opt,name=order_handle_fee,json=orderHandleFee,proto3" json:"order_handle_fee,omitempty"`
	// Additional surcharges
	OrderSurcharge *v11.Money `protobuf:"bytes,39,opt,name=order_surcharge,json=orderSurcharge,proto3" json:"order_surcharge,omitempty"`
	// Rush processing fee (if applicable)
	OrderRushFee *v11.Money `protobuf:"bytes,40,opt,name=order_rush_fee,json=orderRushFee,proto3" json:"order_rush_fee,omitempty"`
	// Thank you card fee (if applicable)
	OrderThankCardFee *v11.Money `protobuf:"bytes,41,opt,name=order_thank_card_fee,json=orderThankCardFee,proto3" json:"order_thank_card_fee,omitempty"`
	// All tracking information for this order
	OrderTrackings []*VendorOrderTracking `protobuf:"bytes,42,rep,name=order_trackings,json=orderTrackings,proto3" json:"order_trackings,omitempty"`
	// Gift messages for this order
	GiftMessages []*VendorGiftMessage `protobuf:"bytes,43,rep,name=gift_messages,json=giftMessages,proto3" json:"gift_messages,omitempty"`
	// Refund status
	RefundStatus VendorOrderRefundStatus `protobuf:"varint,44,opt,name=refund_status,json=refundStatus,proto3,enum=api.order.v1.VendorOrderRefundStatus" json:"refund_status,omitempty"`
	// Cancellation status
	CancelStatus VendorOrderCancelStatus `protobuf:"varint,45,opt,name=cancel_status,json=cancelStatus,proto3,enum=api.order.v1.VendorOrderCancelStatus" json:"cancel_status,omitempty"`
	// Order priority label (for display)
	OrderPriority string `protobuf:"bytes,46,opt,name=order_priority,json=orderPriority,proto3" json:"order_priority,omitempty"`
	// Payment transaction details
	TransactionInfo *VendorTransactionInfo `protobuf:"bytes,48,opt,name=transaction_info,json=transactionInfo,proto3" json:"transaction_info,omitempty"`
	// Cancellation reason (if canceled)
	CancelReason *VendorCancelReason `protobuf:"bytes,49,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`
	// Total amount refunded
	RefundedTotal *v11.Money `protobuf:"bytes,50,opt,name=refunded_total,json=refundedTotal,proto3" json:"refunded_total,omitempty"`
	// Legacy external ID (for OMS backward compatibility)
	LegacyExternalId string `protobuf:"bytes,52,opt,name=legacy_external_id,json=legacyExternalId,proto3" json:"legacy_external_id,omitempty"` // for oms order's external id
	// Your custom reference ID
	ReferenceId   string `protobuf:"bytes,53,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorOrder) Reset() {
	*x = VendorOrder{}
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrder) ProtoMessage() {}

func (x *VendorOrder) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrder.ProtoReflect.Descriptor instead.
func (*VendorOrder) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_proto_rawDescGZIP(), []int{0}
}

func (x *VendorOrder) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *VendorOrder) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *VendorOrder) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *VendorOrder) GetCreatedMethod() VendorCreatedMethod {
	if x != nil {
		return x.CreatedMethod
	}
	return VendorCreatedMethod_VENDOR_CREATED_METHOD_UNKNOWN
}

func (x *VendorOrder) GetOrderPlatform() v1.MarketplacePlatform {
	if x != nil {
		return x.OrderPlatform
	}
	return v1.MarketplacePlatform(0)
}

func (x *VendorOrder) GetPlatformRef() string {
	if x != nil {
		return x.PlatformRef
	}
	return ""
}

func (x *VendorOrder) GetFulfillmentVendor() VendorFulfillmentVendor {
	if x != nil {
		return x.FulfillmentVendor
	}
	return VendorFulfillmentVendor_VENDOR_FULFILLMENT_VENDOR_UNKNOWN
}

func (x *VendorOrder) GetVendorRef() string {
	if x != nil {
		return x.VendorRef
	}
	return ""
}

func (x *VendorOrder) GetPriority() VendorFulfillmentPriority {
	if x != nil {
		return x.Priority
	}
	return VendorFulfillmentPriority_VENDOR_FULFILLMENT_PRIORITY_UNKNOWN
}

func (x *VendorOrder) GetFulfillmentOption() *VendorFulfillmentOption {
	if x != nil {
		return x.FulfillmentOption
	}
	return nil
}

func (x *VendorOrder) GetShippingOption() *VendorShippingOption {
	if x != nil {
		return x.ShippingOption
	}
	return nil
}

func (x *VendorOrder) GetBillingOption() *VendorBillingOption {
	if x != nil {
		return x.BillingOption
	}
	return nil
}

func (x *VendorOrder) GetShippingLabels() []string {
	if x != nil {
		return x.ShippingLabels
	}
	return nil
}

func (x *VendorOrder) GetOrderDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *VendorOrder) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *VendorOrder) GetPaidAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PaidAt
	}
	return nil
}

func (x *VendorOrder) GetOrderStatus() VendorOrderStatus {
	if x != nil {
		return x.OrderStatus
	}
	return VendorOrderStatus_VENDOR_ORDER_STATUS_UNKNOWN
}

func (x *VendorOrder) GetPrimaryPackageId() string {
	if x != nil {
		return x.PrimaryPackageId
	}
	return ""
}

func (x *VendorOrder) GetPrimaryShipmentId() string {
	if x != nil {
		return x.PrimaryShipmentId
	}
	return ""
}

func (x *VendorOrder) GetIsLabelAttached() bool {
	if x != nil {
		return x.IsLabelAttached
	}
	return false
}

func (x *VendorOrder) GetOrderSubtotal() *v11.Money {
	if x != nil {
		return x.OrderSubtotal
	}
	return nil
}

func (x *VendorOrder) GetOrderTax() *v11.Money {
	if x != nil {
		return x.OrderTax
	}
	return nil
}

func (x *VendorOrder) GetOrderFee() *v11.Money {
	if x != nil {
		return x.OrderFee
	}
	return nil
}

func (x *VendorOrder) GetOrderDiscount() *v11.Money {
	if x != nil {
		return x.OrderDiscount
	}
	return nil
}

func (x *VendorOrder) GetOrderTotal() *v11.Money {
	if x != nil {
		return x.OrderTotal
	}
	return nil
}

func (x *VendorOrder) GetOrderRedeem() *v11.Money {
	if x != nil {
		return x.OrderRedeem
	}
	return nil
}

func (x *VendorOrder) GetPaidTotal() *v11.Money {
	if x != nil {
		return x.PaidTotal
	}
	return nil
}

func (x *VendorOrder) GetPaidNeeded() *v11.Money {
	if x != nil {
		return x.PaidNeeded
	}
	return nil
}

func (x *VendorOrder) GetTrackingNo() string {
	if x != nil {
		return x.TrackingNo
	}
	return ""
}

func (x *VendorOrder) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VendorOrder) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *VendorOrder) GetLineItems() []*VendorOrderLineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *VendorOrder) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *VendorOrder) GetAddresses() []*VendorAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *VendorOrder) GetStages() []*VendorProcessingStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *VendorOrder) GetOrderGiftMessageFee() *v11.Money {
	if x != nil {
		return x.OrderGiftMessageFee
	}
	return nil
}

func (x *VendorOrder) GetOrderShippingFee() *v11.Money {
	if x != nil {
		return x.OrderShippingFee
	}
	return nil
}

func (x *VendorOrder) GetOrderHandleFee() *v11.Money {
	if x != nil {
		return x.OrderHandleFee
	}
	return nil
}

func (x *VendorOrder) GetOrderSurcharge() *v11.Money {
	if x != nil {
		return x.OrderSurcharge
	}
	return nil
}

func (x *VendorOrder) GetOrderRushFee() *v11.Money {
	if x != nil {
		return x.OrderRushFee
	}
	return nil
}

func (x *VendorOrder) GetOrderThankCardFee() *v11.Money {
	if x != nil {
		return x.OrderThankCardFee
	}
	return nil
}

func (x *VendorOrder) GetOrderTrackings() []*VendorOrderTracking {
	if x != nil {
		return x.OrderTrackings
	}
	return nil
}

func (x *VendorOrder) GetGiftMessages() []*VendorGiftMessage {
	if x != nil {
		return x.GiftMessages
	}
	return nil
}

func (x *VendorOrder) GetRefundStatus() VendorOrderRefundStatus {
	if x != nil {
		return x.RefundStatus
	}
	return VendorOrderRefundStatus_VENDOR_ORDER_REFUND_STATUS_ALL
}

func (x *VendorOrder) GetCancelStatus() VendorOrderCancelStatus {
	if x != nil {
		return x.CancelStatus
	}
	return VendorOrderCancelStatus_VENDOR_ORDER_CANCEL_STATUS_ALL
}

func (x *VendorOrder) GetOrderPriority() string {
	if x != nil {
		return x.OrderPriority
	}
	return ""
}

func (x *VendorOrder) GetTransactionInfo() *VendorTransactionInfo {
	if x != nil {
		return x.TransactionInfo
	}
	return nil
}

func (x *VendorOrder) GetCancelReason() *VendorCancelReason {
	if x != nil {
		return x.CancelReason
	}
	return nil
}

func (x *VendorOrder) GetRefundedTotal() *v11.Money {
	if x != nil {
		return x.RefundedTotal
	}
	return nil
}

func (x *VendorOrder) GetLegacyExternalId() string {
	if x != nil {
		return x.LegacyExternalId
	}
	return ""
}

func (x *VendorOrder) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

type VendorCancelReason struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cancellation reason ID
	ReasonId string `protobuf:"bytes,1,opt,name=reason_id,json=reasonId,proto3" json:"reason_id,omitempty"`
	// Human-readable cancellation reason
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Custom cancellation reason (if not using predefined reasons)
	CustomReason  string `protobuf:"bytes,3,opt,name=custom_reason,json=customReason,proto3" json:"custom_reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorCancelReason) Reset() {
	*x = VendorCancelReason{}
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorCancelReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorCancelReason) ProtoMessage() {}

func (x *VendorCancelReason) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorCancelReason.ProtoReflect.Descriptor instead.
func (*VendorCancelReason) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_proto_rawDescGZIP(), []int{1}
}

func (x *VendorCancelReason) GetReasonId() string {
	if x != nil {
		return x.ReasonId
	}
	return ""
}

func (x *VendorCancelReason) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *VendorCancelReason) GetCustomReason() string {
	if x != nil {
		return x.CustomReason
	}
	return ""
}

type VendorProcessingStage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Processing stage ID
	StageId string `protobuf:"bytes,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	// Processing stage name (e.g., "Printing", "Packing", "Shipping")
	StageName string `protobuf:"bytes,2,opt,name=stage_name,json=stageName,proto3" json:"stage_name,omitempty"`
	// When this stage started
	StageStartedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stage_started_at,json=stageStartedAt,proto3" json:"stage_started_at,omitempty"`
	// When this stage completed
	StageCompletedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=stage_completed_at,json=stageCompletedAt,proto3" json:"stage_completed_at,omitempty"`
	// Whether this stage is completed
	IsCompleted   bool `protobuf:"varint,5,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorProcessingStage) Reset() {
	*x = VendorProcessingStage{}
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorProcessingStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorProcessingStage) ProtoMessage() {}

func (x *VendorProcessingStage) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorProcessingStage.ProtoReflect.Descriptor instead.
func (*VendorProcessingStage) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_proto_rawDescGZIP(), []int{2}
}

func (x *VendorProcessingStage) GetStageId() string {
	if x != nil {
		return x.StageId
	}
	return ""
}

func (x *VendorProcessingStage) GetStageName() string {
	if x != nil {
		return x.StageName
	}
	return ""
}

func (x *VendorProcessingStage) GetStageStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StageStartedAt
	}
	return nil
}

func (x *VendorProcessingStage) GetStageCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StageCompletedAt
	}
	return nil
}

func (x *VendorProcessingStage) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

type VendorOrderFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter by specific order IDs
	OrderIds []string `protobuf:"bytes,1,rep,name=order_ids,json=orderIds,proto3" json:"order_ids,omitempty"`
	// Filter by order statuses
	Statuses []VendorOrderStatus `protobuf:"varint,2,rep,packed,name=statuses,proto3,enum=api.order.v1.VendorOrderStatus" json:"statuses,omitempty"`
	// Filter by order creation methods
	CreatedMethods []VendorCreatedMethod `protobuf:"varint,3,rep,packed,name=created_methods,json=createdMethods,proto3,enum=api.order.v1.VendorCreatedMethod" json:"created_methods,omitempty"`
	// Filter orders created after this date (inclusive, ISO 8601 format)
	// In query params, this is sent as a string, not as seconds/nanos
	CreatedAtMin *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at_min,json=createdAtMin,proto3" json:"created_at_min,omitempty"`
	// Filter orders created before this date (inclusive, ISO 8601 format)
	CreatedAtMax *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at_max,json=createdAtMax,proto3" json:"created_at_max,omitempty"`
	// Filter by payment status (for legacy API compatibility)
	PaymentStatus []VendorOrderPaymentStatus `protobuf:"varint,6,rep,packed,name=payment_status,json=paymentStatus,proto3,enum=api.order.v1.VendorOrderPaymentStatus" json:"payment_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorOrderFilter) Reset() {
	*x = VendorOrderFilter{}
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorOrderFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrderFilter) ProtoMessage() {}

func (x *VendorOrderFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrderFilter.ProtoReflect.Descriptor instead.
func (*VendorOrderFilter) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_proto_rawDescGZIP(), []int{3}
}

func (x *VendorOrderFilter) GetOrderIds() []string {
	if x != nil {
		return x.OrderIds
	}
	return nil
}

func (x *VendorOrderFilter) GetStatuses() []VendorOrderStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *VendorOrderFilter) GetCreatedMethods() []VendorCreatedMethod {
	if x != nil {
		return x.CreatedMethods
	}
	return nil
}

func (x *VendorOrderFilter) GetCreatedAtMin() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAtMin
	}
	return nil
}

func (x *VendorOrderFilter) GetCreatedAtMax() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAtMax
	}
	return nil
}

func (x *VendorOrderFilter) GetPaymentStatus() []VendorOrderPaymentStatus {
	if x != nil {
		return x.PaymentStatus
	}
	return nil
}

type LegacyVendorOrder struct {
	state              protoimpl.MessageState  `protogen:"open.v1"`
	OrdId              int32                   `protobuf:"varint,1,opt,name=ord_id,json=ordId,proto3" json:"ord_id,omitempty"`
	OrderNumber        string                  `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	ExternalId         string                  `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	OrdTime            *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=ord_time,json=ordTime,proto3" json:"ord_time,omitempty"`
	OrdPaymentAt       *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=ord_payment_at,json=ordPaymentAt,proto3" json:"ord_payment_at,omitempty"`
	OrdSubtotal        string                  `protobuf:"bytes,6,opt,name=ord_subtotal,json=ordSubtotal,proto3" json:"ord_subtotal,omitempty"`
	OrdFeeShipping     string                  `protobuf:"bytes,7,opt,name=ord_fee_shipping,json=ordFeeShipping,proto3" json:"ord_fee_shipping,omitempty"`
	OrdTax             string                  `protobuf:"bytes,8,opt,name=ord_tax,json=ordTax,proto3" json:"ord_tax,omitempty"`
	OrdTotal           string                  `protobuf:"bytes,9,opt,name=ord_total,json=ordTotal,proto3" json:"ord_total,omitempty"`
	VerifyAddress      string                  `protobuf:"bytes,10,opt,name=verify_address,json=verifyAddress,proto3" json:"verify_address,omitempty"`
	FulfillmentNotes   string                  `protobuf:"bytes,11,opt,name=fulfillment_notes,json=fulfillmentNotes,proto3" json:"fulfillment_notes,omitempty"`
	OrdStatus          string                  `protobuf:"bytes,12,opt,name=ord_status,json=ordStatus,proto3" json:"ord_status,omitempty"`
	OrdCompletedTime   *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=ord_completed_time,json=ordCompletedTime,proto3" json:"ord_completed_time,omitempty"`
	IsApprove          string                  `protobuf:"bytes,14,opt,name=is_approve,json=isApprove,proto3" json:"is_approve,omitempty"`
	OrdArchive         string                  `protobuf:"bytes,15,opt,name=ord_archive,json=ordArchive,proto3" json:"ord_archive,omitempty"`
	OrdPaymentStatus   string                  `protobuf:"bytes,16,opt,name=ord_payment_status,json=ordPaymentStatus,proto3" json:"ord_payment_status,omitempty"`
	OrdIossNumber      string                  `protobuf:"bytes,17,opt,name=ord_ioss_number,json=ordIossNumber,proto3" json:"ord_ioss_number,omitempty"`
	OrdIossNumberTotal string                  `protobuf:"bytes,18,opt,name=ord_ioss_number_total,json=ordIossNumberTotal,proto3" json:"ord_ioss_number_total,omitempty"`
	Trackings          *LegacyTracking         `protobuf:"bytes,19,opt,name=trackings,proto3" json:"trackings,omitempty"`
	Items              []*LegacyItem           `protobuf:"bytes,20,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LegacyVendorOrder) Reset() {
	*x = LegacyVendorOrder{}
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyVendorOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVendorOrder) ProtoMessage() {}

func (x *LegacyVendorOrder) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVendorOrder.ProtoReflect.Descriptor instead.
func (*LegacyVendorOrder) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_proto_rawDescGZIP(), []int{4}
}

func (x *LegacyVendorOrder) GetOrdId() int32 {
	if x != nil {
		return x.OrdId
	}
	return 0
}

func (x *LegacyVendorOrder) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *LegacyVendorOrder) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *LegacyVendorOrder) GetOrdTime() *wrapperspb.StringValue {
	if x != nil {
		return x.OrdTime
	}
	return nil
}

func (x *LegacyVendorOrder) GetOrdPaymentAt() *wrapperspb.StringValue {
	if x != nil {
		return x.OrdPaymentAt
	}
	return nil
}

func (x *LegacyVendorOrder) GetOrdSubtotal() string {
	if x != nil {
		return x.OrdSubtotal
	}
	return ""
}

func (x *LegacyVendorOrder) GetOrdFeeShipping() string {
	if x != nil {
		return x.OrdFeeShipping
	}
	return ""
}

func (x *LegacyVendorOrder) GetOrdTax() string {
	if x != nil {
		return x.OrdTax
	}
	return ""
}

func (x *LegacyVendorOrder) GetOrdTotal() string {
	if x != nil {
		return x.OrdTotal
	}
	return ""
}

func (x *LegacyVendorOrder) GetVerifyAddress() string {
	if x != nil {
		return x.VerifyAddress
	}
	return ""
}

func (x *LegacyVendorOrder) GetFulfillmentNotes() string {
	if x != nil {
		return x.FulfillmentNotes
	}
	return ""
}

func (x *LegacyVendorOrder) GetOrdStatus() string {
	if x != nil {
		return x.OrdStatus
	}
	return ""
}

func (x *LegacyVendorOrder) GetOrdCompletedTime() *wrapperspb.StringValue {
	if x != nil {
		return x.OrdCompletedTime
	}
	return nil
}

func (x *LegacyVendorOrder) GetIsApprove() string {
	if x != nil {
		return x.IsApprove
	}
	return ""
}

func (x *LegacyVendorOrder) GetOrdArchive() string {
	if x != nil {
		return x.OrdArchive
	}
	return ""
}

func (x *LegacyVendorOrder) GetOrdPaymentStatus() string {
	if x != nil {
		return x.OrdPaymentStatus
	}
	return ""
}

func (x *LegacyVendorOrder) GetOrdIossNumber() string {
	if x != nil {
		return x.OrdIossNumber
	}
	return ""
}

func (x *LegacyVendorOrder) GetOrdIossNumberTotal() string {
	if x != nil {
		return x.OrdIossNumberTotal
	}
	return ""
}

func (x *LegacyVendorOrder) GetTrackings() *LegacyTracking {
	if x != nil {
		return x.Trackings
	}
	return nil
}

func (x *LegacyVendorOrder) GetItems() []*LegacyItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type LegacyItem struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	OrderItemId        int32                  `protobuf:"varint,1,opt,name=order_item_id,json=orderItemId,proto3" json:"order_item_id,omitempty"`
	ItemSubtotal       string                 `protobuf:"bytes,2,opt,name=item_subtotal,json=itemSubtotal,proto3" json:"item_subtotal,omitempty"`
	ItemTotal          string                 `protobuf:"bytes,3,opt,name=item_total,json=itemTotal,proto3" json:"item_total,omitempty"`
	Style              string                 `protobuf:"bytes,4,opt,name=style,proto3" json:"style,omitempty"`
	Size               string                 `protobuf:"bytes,5,opt,name=size,proto3" json:"size,omitempty"`
	Color              string                 `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
	Quantity           string                 `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	ProductName        string                 `protobuf:"bytes,8,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductSku         string                 `protobuf:"bytes,9,opt,name=product_sku,json=productSku,proto3" json:"product_sku,omitempty"`
	ProductSku1        string                 `protobuf:"bytes,10,opt,name=product_sku1,json=productSku1,proto3" json:"product_sku1,omitempty"`
	AvailabilityStatus string                 `protobuf:"bytes,11,opt,name=availability_status,json=availabilityStatus,proto3" json:"availability_status,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LegacyItem) Reset() {
	*x = LegacyItem{}
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyItem) ProtoMessage() {}

func (x *LegacyItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyItem.ProtoReflect.Descriptor instead.
func (*LegacyItem) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_proto_rawDescGZIP(), []int{5}
}

func (x *LegacyItem) GetOrderItemId() int32 {
	if x != nil {
		return x.OrderItemId
	}
	return 0
}

func (x *LegacyItem) GetItemSubtotal() string {
	if x != nil {
		return x.ItemSubtotal
	}
	return ""
}

func (x *LegacyItem) GetItemTotal() string {
	if x != nil {
		return x.ItemTotal
	}
	return ""
}

func (x *LegacyItem) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *LegacyItem) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *LegacyItem) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *LegacyItem) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *LegacyItem) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *LegacyItem) GetProductSku() string {
	if x != nil {
		return x.ProductSku
	}
	return ""
}

func (x *LegacyItem) GetProductSku1() string {
	if x != nil {
		return x.ProductSku1
	}
	return ""
}

func (x *LegacyItem) GetAvailabilityStatus() string {
	if x != nil {
		return x.AvailabilityStatus
	}
	return ""
}

type LegacyTracking struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	TrackingNumber  string                  `protobuf:"bytes,1,opt,name=tracking_number,json=trackingNumber,proto3" json:"tracking_number,omitempty"`
	TrackingCompany string                  `protobuf:"bytes,2,opt,name=tracking_company,json=trackingCompany,proto3" json:"tracking_company,omitempty"`
	LinkTracking    string                  `protobuf:"bytes,3,opt,name=link_tracking,json=linkTracking,proto3" json:"link_tracking,omitempty"`
	ProductType     string                  `protobuf:"bytes,4,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
	DateCreated     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	NewTracking     string                  `protobuf:"bytes,6,opt,name=new_tracking,json=newTracking,proto3" json:"new_tracking,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LegacyTracking) Reset() {
	*x = LegacyTracking{}
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyTracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyTracking) ProtoMessage() {}

func (x *LegacyTracking) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyTracking.ProtoReflect.Descriptor instead.
func (*LegacyTracking) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_proto_rawDescGZIP(), []int{6}
}

func (x *LegacyTracking) GetTrackingNumber() string {
	if x != nil {
		return x.TrackingNumber
	}
	return ""
}

func (x *LegacyTracking) GetTrackingCompany() string {
	if x != nil {
		return x.TrackingCompany
	}
	return ""
}

func (x *LegacyTracking) GetLinkTracking() string {
	if x != nil {
		return x.LinkTracking
	}
	return ""
}

func (x *LegacyTracking) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *LegacyTracking) GetDateCreated() *wrapperspb.StringValue {
	if x != nil {
		return x.DateCreated
	}
	return nil
}

func (x *LegacyTracking) GetNewTracking() string {
	if x != nil {
		return x.NewTracking
	}
	return ""
}

// Short is a lightweight version of VendorOrder containing essential fields
// for listing and display purposes, with flattened tracking data and minimal nested objects
type VendorOrder_Short struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique order ID
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Store ID this order belongs to
	StoreId string `protobuf:"bytes,2,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	// Store name for display
	StoreName string `protobuf:"bytes,3,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// Team ID (your account ID)
	TeamId string `protobuf:"bytes,4,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// How this order was created (manual, API, store sync, etc.)
	CreatedMethod VendorCreatedMethod `protobuf:"varint,5,opt,name=created_method,json=createdMethod,proto3,enum=api.order.v1.VendorCreatedMethod" json:"created_method,omitempty"`
	// Marketplace platform (Shopify, Etsy, WooCommerce, etc.)
	OrderPlatform v1.MarketplacePlatform `protobuf:"varint,6,opt,name=order_platform,json=orderPlatform,proto3,enum=common.platform.v1.MarketplacePlatform" json:"order_platform,omitempty"`
	// Platform reference ID (deprecated, will be removed)
	PlatformRef string `protobuf:"bytes,7,opt,name=platform_ref,json=platformRef,proto3" json:"platform_ref,omitempty"` // will be deleted soon
	// Shipping label URLs (if pre-purchased)
	ShippingLabels []string `protobuf:"bytes,8,rep,name=shipping_labels,json=shippingLabels,proto3" json:"shipping_labels,omitempty"`
	// When the order was originally placed
	OrderDate *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	// When the order was approved for fulfillment
	ApprovedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=approved_at,json=approvedAt,proto3" json:"approved_at,omitempty"`
	// When the payment was confirmed
	PaidAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=paid_at,json=paidAt,proto3" json:"paid_at,omitempty"`
	// Current order status
	OrderStatus VendorOrderStatus `protobuf:"varint,12,opt,name=order_status,json=orderStatus,proto3,enum=api.order.v1.VendorOrderStatus" json:"order_status,omitempty"`
	// Subtotal (sum of all line items before fees/tax/discount)
	OrderSubtotal *v11.Money `protobuf:"bytes,13,opt,name=order_subtotal,json=orderSubtotal,proto3" json:"order_subtotal,omitempty"`
	// Shipping cost
	OrderShippingFee *v11.Money `protobuf:"bytes,14,opt,name=order_shipping_fee,json=orderShippingFee,proto3" json:"order_shipping_fee,omitempty"`
	// Gift message fee (if applicable)
	OrderGiftMessageFee *v11.Money `protobuf:"bytes,15,opt,name=order_gift_message_fee,json=orderGiftMessageFee,proto3" json:"order_gift_message_fee,omitempty"`
	// Total tax amount
	OrderTax *v11.Money `protobuf:"bytes,16,opt,name=order_tax,json=orderTax,proto3" json:"order_tax,omitempty"`
	// Final total amount (subtotal + fees + tax - discount)
	OrderTotal *v11.Money `protobuf:"bytes,17,opt,name=order_total,json=orderTotal,proto3" json:"order_total,omitempty"`
	// Fulfillment configuration options
	FulfillmentOption *VendorFulfillmentOption `protobuf:"bytes,18,opt,name=fulfillment_option,json=fulfillmentOption,proto3" json:"fulfillment_option,omitempty"`
	// Shipping method and carrier details
	ShippingOption *VendorShippingOption `protobuf:"bytes,19,opt,name=shipping_option,json=shippingOption,proto3" json:"shipping_option,omitempty"`
	// Billing and tax options (IOSS, etc.)
	BillingOption *VendorBillingOption `protobuf:"bytes,20,opt,name=billing_option,json=billingOption,proto3" json:"billing_option,omitempty"`
	// All line items in this order
	LineItems []*VendorOrderLineItem_Short `protobuf:"bytes,21,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	// Primary tracking number
	TrackingNumber string `protobuf:"bytes,22,opt,name=tracking_number,json=trackingNumber,proto3" json:"tracking_number,omitempty"`
	// Tracking link URL
	TrackingLink string `protobuf:"bytes,23,opt,name=tracking_link,json=trackingLink,proto3" json:"tracking_link,omitempty"`
	// Carrier name
	TrackingCompany string `protobuf:"bytes,24,opt,name=tracking_company,json=trackingCompany,proto3" json:"tracking_company,omitempty"`
	// Product type for tracking
	TrackingProductType string `protobuf:"bytes,25,opt,name=tracking_product_type,json=trackingProductType,proto3" json:"tracking_product_type,omitempty"`
	// When tracking was created
	TrackingDateCreated *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=tracking_date_created,json=trackingDateCreated,proto3" json:"tracking_date_created,omitempty"`
	// Tracking type
	TrackingType string `protobuf:"bytes,27,opt,name=tracking_type,json=trackingType,proto3" json:"tracking_type,omitempty"`
	// Payment status
	PaymentStatus VendorOrderPaymentStatus `protobuf:"varint,28,opt,name=payment_status,json=paymentStatus,proto3,enum=api.order.v1.VendorOrderPaymentStatus" json:"payment_status,omitempty"`
	// When the order was shipped
	ShippedAt *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=shipped_at,json=shippedAt,proto3" json:"shipped_at,omitempty"`
	// Legacy external ID (for OMS backward compatibility)
	LegacyExternalId string `protobuf:"bytes,31,opt,name=legacy_external_id,json=legacyExternalId,proto3" json:"legacy_external_id,omitempty"` // for oms order's external id
	// Your custom reference ID
	ReferenceId string `protobuf:"bytes,32,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	// Gift messages for this order
	GiftMessages []*VendorGiftMessage `protobuf:"bytes,33,rep,name=gift_messages,json=giftMessages,proto3" json:"gift_messages,omitempty"`
	// Shipping and billing addresses
	Addresses     []*VendorAddress `protobuf:"bytes,34,rep,name=addresses,proto3" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorOrder_Short) Reset() {
	*x = VendorOrder_Short{}
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorOrder_Short) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrder_Short) ProtoMessage() {}

func (x *VendorOrder_Short) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_order_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrder_Short.ProtoReflect.Descriptor instead.
func (*VendorOrder_Short) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VendorOrder_Short) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *VendorOrder_Short) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *VendorOrder_Short) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *VendorOrder_Short) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *VendorOrder_Short) GetCreatedMethod() VendorCreatedMethod {
	if x != nil {
		return x.CreatedMethod
	}
	return VendorCreatedMethod_VENDOR_CREATED_METHOD_UNKNOWN
}

func (x *VendorOrder_Short) GetOrderPlatform() v1.MarketplacePlatform {
	if x != nil {
		return x.OrderPlatform
	}
	return v1.MarketplacePlatform(0)
}

func (x *VendorOrder_Short) GetPlatformRef() string {
	if x != nil {
		return x.PlatformRef
	}
	return ""
}

func (x *VendorOrder_Short) GetShippingLabels() []string {
	if x != nil {
		return x.ShippingLabels
	}
	return nil
}

func (x *VendorOrder_Short) GetOrderDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *VendorOrder_Short) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *VendorOrder_Short) GetPaidAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PaidAt
	}
	return nil
}

func (x *VendorOrder_Short) GetOrderStatus() VendorOrderStatus {
	if x != nil {
		return x.OrderStatus
	}
	return VendorOrderStatus_VENDOR_ORDER_STATUS_UNKNOWN
}

func (x *VendorOrder_Short) GetOrderSubtotal() *v11.Money {
	if x != nil {
		return x.OrderSubtotal
	}
	return nil
}

func (x *VendorOrder_Short) GetOrderShippingFee() *v11.Money {
	if x != nil {
		return x.OrderShippingFee
	}
	return nil
}

func (x *VendorOrder_Short) GetOrderGiftMessageFee() *v11.Money {
	if x != nil {
		return x.OrderGiftMessageFee
	}
	return nil
}

func (x *VendorOrder_Short) GetOrderTax() *v11.Money {
	if x != nil {
		return x.OrderTax
	}
	return nil
}

func (x *VendorOrder_Short) GetOrderTotal() *v11.Money {
	if x != nil {
		return x.OrderTotal
	}
	return nil
}

func (x *VendorOrder_Short) GetFulfillmentOption() *VendorFulfillmentOption {
	if x != nil {
		return x.FulfillmentOption
	}
	return nil
}

func (x *VendorOrder_Short) GetShippingOption() *VendorShippingOption {
	if x != nil {
		return x.ShippingOption
	}
	return nil
}

func (x *VendorOrder_Short) GetBillingOption() *VendorBillingOption {
	if x != nil {
		return x.BillingOption
	}
	return nil
}

func (x *VendorOrder_Short) GetLineItems() []*VendorOrderLineItem_Short {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *VendorOrder_Short) GetTrackingNumber() string {
	if x != nil {
		return x.TrackingNumber
	}
	return ""
}

func (x *VendorOrder_Short) GetTrackingLink() string {
	if x != nil {
		return x.TrackingLink
	}
	return ""
}

func (x *VendorOrder_Short) GetTrackingCompany() string {
	if x != nil {
		return x.TrackingCompany
	}
	return ""
}

func (x *VendorOrder_Short) GetTrackingProductType() string {
	if x != nil {
		return x.TrackingProductType
	}
	return ""
}

func (x *VendorOrder_Short) GetTrackingDateCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.TrackingDateCreated
	}
	return nil
}

func (x *VendorOrder_Short) GetTrackingType() string {
	if x != nil {
		return x.TrackingType
	}
	return ""
}

func (x *VendorOrder_Short) GetPaymentStatus() VendorOrderPaymentStatus {
	if x != nil {
		return x.PaymentStatus
	}
	return VendorOrderPaymentStatus_VENDOR_ORDER_PAYMENT_STATUS_UNKNOWN
}

func (x *VendorOrder_Short) GetShippedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShippedAt
	}
	return nil
}

func (x *VendorOrder_Short) GetLegacyExternalId() string {
	if x != nil {
		return x.LegacyExternalId
	}
	return ""
}

func (x *VendorOrder_Short) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *VendorOrder_Short) GetGiftMessages() []*VendorGiftMessage {
	if x != nil {
		return x.GiftMessages
	}
	return nil
}

func (x *VendorOrder_Short) GetAddresses() []*VendorAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

var File_api_order_v1_data_vendor_order_proto protoreflect.FileDescriptor

var file_api_order_v1_data_vendor_order_proto_rawDesc = string([]byte{
	0x0a, 0x24, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x1a, 0x26, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x66, 0x75,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x27, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf5, 0x25, 0x0a, 0x0b, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x48, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x54, 0x0a,
	0x12, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46,
	0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x52, 0x11, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52,
	0x65, 0x66, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a,
	0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x70, 0x61, 0x69, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x61, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x78, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x3c,
	0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x12, 0x34,
	0x0a, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x70, 0x61, 0x69, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x16,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x10, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x3f, 0x0a,
	0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x65, 0x65, 0x12, 0x3e,
	0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x3b,
	0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x75, 0x73, 0x68, 0x46, 0x65, 0x65, 0x12, 0x46, 0x0a, 0x14, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64,
	0x46, 0x65, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x44, 0x0a, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0e, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xc0, 0x0e, 0x0a, 0x05, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4e, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x70,
	0x61, 0x69, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x4a, 0x0a, 0x16,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x78, 0x12, 0x36, 0x0a, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x09,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c,
	0x67, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x1d, 0x10, 0x1e, 0x4a, 0x04, 0x08,
	0x2f, 0x10, 0x30, 0x4a, 0x04, 0x08, 0x33, 0x10, 0x34, 0x22, 0x79, 0x0a, 0x12, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x48,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xca, 0x03, 0x0a, 0x11,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0x92, 0x01, 0x18, 0x22, 0x16, 0x72, 0x14,
	0x10, 0x01, 0x18, 0x64, 0x92, 0x02, 0x0d, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x62, 0x63, 0x31, 0x32,
	0x33, 0x78, 0x79, 0x7a, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x4a,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe2, 0x06, 0x0a, 0x11, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x75,
	0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x53, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x46, 0x65, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x54, 0x61, 0x78, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x12,
	0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x5f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6f,
	0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x72, 0x64, 0x49, 0x6f, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x15, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6f, 0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f,
	0x72, 0x64, 0x49, 0x6f, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe8, 0x02,
	0x0a, 0x0a, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x75, 0x62,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73,
	0x6b, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x6b, 0x75, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x6b, 0x75, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x31, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x0e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2a, 0xab, 0x04, 0x0a, 0x17,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x45, 0x4e, 0x44, 0x4f,
	0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x56,
	0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x55,
	0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x2d, 0x0a, 0x29, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x28, 0x0a, 0x24, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x56, 0x45,
	0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x31,
	0x0a, 0x2d, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x36, 0x0a, 0x32, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x45, 0x4e,
	0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x52,
	0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x45, 0x4e,
	0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x2a, 0x9e, 0x04, 0x0a, 0x17, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x45, 0x4e,
	0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x12, 0x2c, 0x0a, 0x28, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x28, 0x0a, 0x24, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x56, 0x45, 0x4e,
	0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x31, 0x0a,
	0x2d, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x2f, 0x0a, 0x2b, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x45,
	0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x45,
	0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x2a, 0xfd, 0x02, 0x0a, 0x11, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x28,
	0x0a, 0x24, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x45, 0x4e, 0x44,
	0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x2c, 0x0a, 0x28, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x25,
	0x0a, 0x21, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x48, 0x49,
	0x50, 0x50, 0x45, 0x44, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x45, 0x4e,
	0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x09, 0x2a, 0xbe, 0x02, 0x0a, 0x18, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x45, 0x4e, 0x44, 0x4f,
	0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x27,
	0x0a, 0x23, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x45, 0x4e, 0x44, 0x4f,
	0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x27, 0x0a, 0x23, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x31, 0x0a, 0x2d, 0x56, 0x45, 0x4e, 0x44,
	0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x06, 0x42, 0xb7, 0x01, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x42, 0x14, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x61, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65,
	0x61, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x64, 0x6b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x4f, 0x58, 0xaa, 0x02, 0x0c, 0x41, 0x70,
	0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x41, 0x70, 0x69,
	0x5c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x41, 0x70, 0x69, 0x5c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_order_v1_data_vendor_order_proto_rawDescOnce sync.Once
	file_api_order_v1_data_vendor_order_proto_rawDescData []byte
)

func file_api_order_v1_data_vendor_order_proto_rawDescGZIP() []byte {
	file_api_order_v1_data_vendor_order_proto_rawDescOnce.Do(func() {
		file_api_order_v1_data_vendor_order_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_order_v1_data_vendor_order_proto_rawDesc), len(file_api_order_v1_data_vendor_order_proto_rawDesc)))
	})
	return file_api_order_v1_data_vendor_order_proto_rawDescData
}

var file_api_order_v1_data_vendor_order_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_order_v1_data_vendor_order_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_order_v1_data_vendor_order_proto_goTypes = []any{
	(VendorOrderRefundStatus)(0),      // 0: api.order.v1.VendorOrderRefundStatus
	(VendorOrderCancelStatus)(0),      // 1: api.order.v1.VendorOrderCancelStatus
	(VendorOrderStatus)(0),            // 2: api.order.v1.VendorOrderStatus
	(VendorOrderPaymentStatus)(0),     // 3: api.order.v1.VendorOrderPaymentStatus
	(*VendorOrder)(nil),               // 4: api.order.v1.VendorOrder
	(*VendorCancelReason)(nil),        // 5: api.order.v1.VendorCancelReason
	(*VendorProcessingStage)(nil),     // 6: api.order.v1.VendorProcessingStage
	(*VendorOrderFilter)(nil),         // 7: api.order.v1.VendorOrderFilter
	(*LegacyVendorOrder)(nil),         // 8: api.order.v1.LegacyVendorOrder
	(*LegacyItem)(nil),                // 9: api.order.v1.LegacyItem
	(*LegacyTracking)(nil),            // 10: api.order.v1.LegacyTracking
	(*VendorOrder_Short)(nil),         // 11: api.order.v1.VendorOrder.Short
	(VendorCreatedMethod)(0),          // 12: api.order.v1.VendorCreatedMethod
	(v1.MarketplacePlatform)(0),       // 13: common.platform.v1.MarketplacePlatform
	(VendorFulfillmentVendor)(0),      // 14: api.order.v1.VendorFulfillmentVendor
	(VendorFulfillmentPriority)(0),    // 15: api.order.v1.VendorFulfillmentPriority
	(*VendorFulfillmentOption)(nil),   // 16: api.order.v1.VendorFulfillmentOption
	(*VendorShippingOption)(nil),      // 17: api.order.v1.VendorShippingOption
	(*VendorBillingOption)(nil),       // 18: api.order.v1.VendorBillingOption
	(*timestamppb.Timestamp)(nil),     // 19: google.protobuf.Timestamp
	(*v11.Money)(nil),                 // 20: common.type.v1.Money
	(*VendorOrderLineItem)(nil),       // 21: api.order.v1.VendorOrderLineItem
	(*VendorAddress)(nil),             // 22: api.order.v1.VendorAddress
	(*VendorOrderTracking)(nil),       // 23: api.order.v1.VendorOrderTracking
	(*VendorGiftMessage)(nil),         // 24: api.order.v1.VendorGiftMessage
	(*VendorTransactionInfo)(nil),     // 25: api.order.v1.VendorTransactionInfo
	(*wrapperspb.StringValue)(nil),    // 26: google.protobuf.StringValue
	(*VendorOrderLineItem_Short)(nil), // 27: api.order.v1.VendorOrderLineItem.Short
}
var file_api_order_v1_data_vendor_order_proto_depIdxs = []int32{
	12, // 0: api.order.v1.VendorOrder.created_method:type_name -> api.order.v1.VendorCreatedMethod
	13, // 1: api.order.v1.VendorOrder.order_platform:type_name -> common.platform.v1.MarketplacePlatform
	14, // 2: api.order.v1.VendorOrder.fulfillment_vendor:type_name -> api.order.v1.VendorFulfillmentVendor
	15, // 3: api.order.v1.VendorOrder.priority:type_name -> api.order.v1.VendorFulfillmentPriority
	16, // 4: api.order.v1.VendorOrder.fulfillment_option:type_name -> api.order.v1.VendorFulfillmentOption
	17, // 5: api.order.v1.VendorOrder.shipping_option:type_name -> api.order.v1.VendorShippingOption
	18, // 6: api.order.v1.VendorOrder.billing_option:type_name -> api.order.v1.VendorBillingOption
	19, // 7: api.order.v1.VendorOrder.order_date:type_name -> google.protobuf.Timestamp
	19, // 8: api.order.v1.VendorOrder.approved_at:type_name -> google.protobuf.Timestamp
	19, // 9: api.order.v1.VendorOrder.paid_at:type_name -> google.protobuf.Timestamp
	2,  // 10: api.order.v1.VendorOrder.order_status:type_name -> api.order.v1.VendorOrderStatus
	20, // 11: api.order.v1.VendorOrder.order_subtotal:type_name -> common.type.v1.Money
	20, // 12: api.order.v1.VendorOrder.order_tax:type_name -> common.type.v1.Money
	20, // 13: api.order.v1.VendorOrder.order_fee:type_name -> common.type.v1.Money
	20, // 14: api.order.v1.VendorOrder.order_discount:type_name -> common.type.v1.Money
	20, // 15: api.order.v1.VendorOrder.order_total:type_name -> common.type.v1.Money
	20, // 16: api.order.v1.VendorOrder.order_redeem:type_name -> common.type.v1.Money
	20, // 17: api.order.v1.VendorOrder.paid_total:type_name -> common.type.v1.Money
	20, // 18: api.order.v1.VendorOrder.paid_needed:type_name -> common.type.v1.Money
	19, // 19: api.order.v1.VendorOrder.created_at:type_name -> google.protobuf.Timestamp
	19, // 20: api.order.v1.VendorOrder.updated_at:type_name -> google.protobuf.Timestamp
	21, // 21: api.order.v1.VendorOrder.line_items:type_name -> api.order.v1.VendorOrderLineItem
	22, // 22: api.order.v1.VendorOrder.addresses:type_name -> api.order.v1.VendorAddress
	6,  // 23: api.order.v1.VendorOrder.stages:type_name -> api.order.v1.VendorProcessingStage
	20, // 24: api.order.v1.VendorOrder.order_gift_message_fee:type_name -> common.type.v1.Money
	20, // 25: api.order.v1.VendorOrder.order_shipping_fee:type_name -> common.type.v1.Money
	20, // 26: api.order.v1.VendorOrder.order_handle_fee:type_name -> common.type.v1.Money
	20, // 27: api.order.v1.VendorOrder.order_surcharge:type_name -> common.type.v1.Money
	20, // 28: api.order.v1.VendorOrder.order_rush_fee:type_name -> common.type.v1.Money
	20, // 29: api.order.v1.VendorOrder.order_thank_card_fee:type_name -> common.type.v1.Money
	23, // 30: api.order.v1.VendorOrder.order_trackings:type_name -> api.order.v1.VendorOrderTracking
	24, // 31: api.order.v1.VendorOrder.gift_messages:type_name -> api.order.v1.VendorGiftMessage
	0,  // 32: api.order.v1.VendorOrder.refund_status:type_name -> api.order.v1.VendorOrderRefundStatus
	1,  // 33: api.order.v1.VendorOrder.cancel_status:type_name -> api.order.v1.VendorOrderCancelStatus
	25, // 34: api.order.v1.VendorOrder.transaction_info:type_name -> api.order.v1.VendorTransactionInfo
	5,  // 35: api.order.v1.VendorOrder.cancel_reason:type_name -> api.order.v1.VendorCancelReason
	20, // 36: api.order.v1.VendorOrder.refunded_total:type_name -> common.type.v1.Money
	19, // 37: api.order.v1.VendorProcessingStage.stage_started_at:type_name -> google.protobuf.Timestamp
	19, // 38: api.order.v1.VendorProcessingStage.stage_completed_at:type_name -> google.protobuf.Timestamp
	2,  // 39: api.order.v1.VendorOrderFilter.statuses:type_name -> api.order.v1.VendorOrderStatus
	12, // 40: api.order.v1.VendorOrderFilter.created_methods:type_name -> api.order.v1.VendorCreatedMethod
	19, // 41: api.order.v1.VendorOrderFilter.created_at_min:type_name -> google.protobuf.Timestamp
	19, // 42: api.order.v1.VendorOrderFilter.created_at_max:type_name -> google.protobuf.Timestamp
	3,  // 43: api.order.v1.VendorOrderFilter.payment_status:type_name -> api.order.v1.VendorOrderPaymentStatus
	26, // 44: api.order.v1.LegacyVendorOrder.ord_time:type_name -> google.protobuf.StringValue
	26, // 45: api.order.v1.LegacyVendorOrder.ord_payment_at:type_name -> google.protobuf.StringValue
	26, // 46: api.order.v1.LegacyVendorOrder.ord_completed_time:type_name -> google.protobuf.StringValue
	10, // 47: api.order.v1.LegacyVendorOrder.trackings:type_name -> api.order.v1.LegacyTracking
	9,  // 48: api.order.v1.LegacyVendorOrder.items:type_name -> api.order.v1.LegacyItem
	26, // 49: api.order.v1.LegacyTracking.date_created:type_name -> google.protobuf.StringValue
	12, // 50: api.order.v1.VendorOrder.Short.created_method:type_name -> api.order.v1.VendorCreatedMethod
	13, // 51: api.order.v1.VendorOrder.Short.order_platform:type_name -> common.platform.v1.MarketplacePlatform
	19, // 52: api.order.v1.VendorOrder.Short.order_date:type_name -> google.protobuf.Timestamp
	19, // 53: api.order.v1.VendorOrder.Short.approved_at:type_name -> google.protobuf.Timestamp
	19, // 54: api.order.v1.VendorOrder.Short.paid_at:type_name -> google.protobuf.Timestamp
	2,  // 55: api.order.v1.VendorOrder.Short.order_status:type_name -> api.order.v1.VendorOrderStatus
	20, // 56: api.order.v1.VendorOrder.Short.order_subtotal:type_name -> common.type.v1.Money
	20, // 57: api.order.v1.VendorOrder.Short.order_shipping_fee:type_name -> common.type.v1.Money
	20, // 58: api.order.v1.VendorOrder.Short.order_gift_message_fee:type_name -> common.type.v1.Money
	20, // 59: api.order.v1.VendorOrder.Short.order_tax:type_name -> common.type.v1.Money
	20, // 60: api.order.v1.VendorOrder.Short.order_total:type_name -> common.type.v1.Money
	16, // 61: api.order.v1.VendorOrder.Short.fulfillment_option:type_name -> api.order.v1.VendorFulfillmentOption
	17, // 62: api.order.v1.VendorOrder.Short.shipping_option:type_name -> api.order.v1.VendorShippingOption
	18, // 63: api.order.v1.VendorOrder.Short.billing_option:type_name -> api.order.v1.VendorBillingOption
	27, // 64: api.order.v1.VendorOrder.Short.line_items:type_name -> api.order.v1.VendorOrderLineItem.Short
	19, // 65: api.order.v1.VendorOrder.Short.tracking_date_created:type_name -> google.protobuf.Timestamp
	3,  // 66: api.order.v1.VendorOrder.Short.payment_status:type_name -> api.order.v1.VendorOrderPaymentStatus
	19, // 67: api.order.v1.VendorOrder.Short.shipped_at:type_name -> google.protobuf.Timestamp
	24, // 68: api.order.v1.VendorOrder.Short.gift_messages:type_name -> api.order.v1.VendorGiftMessage
	22, // 69: api.order.v1.VendorOrder.Short.addresses:type_name -> api.order.v1.VendorAddress
	70, // [70:70] is the sub-list for method output_type
	70, // [70:70] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_api_order_v1_data_vendor_order_proto_init() }
func file_api_order_v1_data_vendor_order_proto_init() {
	if File_api_order_v1_data_vendor_order_proto != nil {
		return
	}
	file_api_order_v1_data_vendor_address_proto_init()
	file_api_order_v1_data_vendor_billing_proto_init()
	file_api_order_v1_data_vendor_created_method_proto_init()
	file_api_order_v1_data_vendor_fulfillment_proto_init()
	file_api_order_v1_data_vendor_gift_message_proto_init()
	file_api_order_v1_data_vendor_line_item_proto_init()
	file_api_order_v1_data_vendor_shipping_proto_init()
	file_api_order_v1_data_vendor_tracking_proto_init()
	file_api_order_v1_data_vendor_transaction_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_order_v1_data_vendor_order_proto_rawDesc), len(file_api_order_v1_data_vendor_order_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_order_v1_data_vendor_order_proto_goTypes,
		DependencyIndexes: file_api_order_v1_data_vendor_order_proto_depIdxs,
		EnumInfos:         file_api_order_v1_data_vendor_order_proto_enumTypes,
		MessageInfos:      file_api_order_v1_data_vendor_order_proto_msgTypes,
	}.Build()
	File_api_order_v1_data_vendor_order_proto = out.File
	file_api_order_v1_data_vendor_order_proto_goTypes = nil
	file_api_order_v1_data_vendor_order_proto_depIdxs = nil
}
