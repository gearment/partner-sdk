// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/order/v1/api_vendor_order.proto

package orderv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VendorOrderAPI_VendorListOrder_FullMethodName = "/api.order.v1.VendorOrderAPI/VendorListOrder"
)

// VendorOrderAPIClient is the client API for VendorOrderAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ProductListingVendorAPI provide an abstraction to all of read and write data access for order businesses
type VendorOrderAPIClient interface {
	VendorListOrder(ctx context.Context, in *VendorListOrderRequest, opts ...grpc.CallOption) (*VendorListOrderResponse, error)
}

type vendorOrderAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorOrderAPIClient(cc grpc.ClientConnInterface) VendorOrderAPIClient {
	return &vendorOrderAPIClient{cc}
}

func (c *vendorOrderAPIClient) VendorListOrder(ctx context.Context, in *VendorListOrderRequest, opts ...grpc.CallOption) (*VendorListOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorListOrderResponse)
	err := c.cc.Invoke(ctx, VendorOrderAPI_VendorListOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorOrderAPIServer is the server API for VendorOrderAPI service.
// All implementations should embed UnimplementedVendorOrderAPIServer
// for forward compatibility.
//
// ProductListingVendorAPI provide an abstraction to all of read and write data access for order businesses
type VendorOrderAPIServer interface {
	VendorListOrder(context.Context, *VendorListOrderRequest) (*VendorListOrderResponse, error)
}

// UnimplementedVendorOrderAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVendorOrderAPIServer struct{}

func (UnimplementedVendorOrderAPIServer) VendorListOrder(context.Context, *VendorListOrderRequest) (*VendorListOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VendorListOrder not implemented")
}
func (UnimplementedVendorOrderAPIServer) testEmbeddedByValue() {}

// UnsafeVendorOrderAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VendorOrderAPIServer will
// result in compilation errors.
type UnsafeVendorOrderAPIServer interface {
	mustEmbedUnimplementedVendorOrderAPIServer()
}

func RegisterVendorOrderAPIServer(s grpc.ServiceRegistrar, srv VendorOrderAPIServer) {
	// If the following call pancis, it indicates UnimplementedVendorOrderAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VendorOrderAPI_ServiceDesc, srv)
}

func _VendorOrderAPI_VendorListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorListOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorOrderAPIServer).VendorListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorOrderAPI_VendorListOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorOrderAPIServer).VendorListOrder(ctx, req.(*VendorListOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VendorOrderAPI_ServiceDesc is the grpc.ServiceDesc for VendorOrderAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VendorOrderAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.order.v1.VendorOrderAPI",
	HandlerType: (*VendorOrderAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VendorListOrder",
			Handler:    _VendorOrderAPI_VendorListOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/order/v1/api_vendor_order.proto",
}
