// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/order/v1/api_vendor_order.proto

package orderv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VendorOrderAPI_VendorListOrder_FullMethodName                 = "/api.order.v1.VendorOrderAPI/VendorListOrder"
	VendorOrderAPI_VendorListOrderDraft_FullMethodName            = "/api.order.v1.VendorOrderAPI/VendorListOrderDraft"
	VendorOrderAPI_VendorCreateOrderDraft_FullMethodName          = "/api.order.v1.VendorOrderAPI/VendorCreateOrderDraft"
	VendorOrderAPI_VendorCreateOrderDraftWithLabel_FullMethodName = "/api.order.v1.VendorOrderAPI/VendorCreateOrderDraftWithLabel"
	VendorOrderAPI_VendorGetPriceQuote_FullMethodName             = "/api.order.v1.VendorOrderAPI/VendorGetPriceQuote"
	VendorOrderAPI_VendorUpdateOrderDraftLineItems_FullMethodName = "/api.order.v1.VendorOrderAPI/VendorUpdateOrderDraftLineItems"
)

// VendorOrderAPIClient is the client API for VendorOrderAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VendorOrderAPI provide an abstraction to all of read and write data access for order businesses
type VendorOrderAPIClient interface {
	VendorListOrder(ctx context.Context, in *VendorListOrderRequest, opts ...grpc.CallOption) (*VendorListOrderResponse, error)
	VendorListOrderDraft(ctx context.Context, in *VendorListOrderDraftRequest, opts ...grpc.CallOption) (*VendorListOrderDraftResponse, error)
	VendorCreateOrderDraft(ctx context.Context, in *VendorCreateOrderDraftRequest, opts ...grpc.CallOption) (*VendorCreateOrderDraftResponse, error)
	VendorCreateOrderDraftWithLabel(ctx context.Context, in *VendorCreateOrderDraftWithLabelRequest, opts ...grpc.CallOption) (*VendorCreateOrderDraftWithLabelResponse, error)
	VendorGetPriceQuote(ctx context.Context, in *VendorGetPriceQuoteRequest, opts ...grpc.CallOption) (*VendorGetPriceQuoteResponse, error)
	VendorUpdateOrderDraftLineItems(ctx context.Context, in *VendorUpdateOrderDraftLineItemsRequest, opts ...grpc.CallOption) (*VendorUpdateOrderDraftLineItemsResponse, error)
}

type vendorOrderAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorOrderAPIClient(cc grpc.ClientConnInterface) VendorOrderAPIClient {
	return &vendorOrderAPIClient{cc}
}

func (c *vendorOrderAPIClient) VendorListOrder(ctx context.Context, in *VendorListOrderRequest, opts ...grpc.CallOption) (*VendorListOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorListOrderResponse)
	err := c.cc.Invoke(ctx, VendorOrderAPI_VendorListOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorOrderAPIClient) VendorListOrderDraft(ctx context.Context, in *VendorListOrderDraftRequest, opts ...grpc.CallOption) (*VendorListOrderDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorListOrderDraftResponse)
	err := c.cc.Invoke(ctx, VendorOrderAPI_VendorListOrderDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorOrderAPIClient) VendorCreateOrderDraft(ctx context.Context, in *VendorCreateOrderDraftRequest, opts ...grpc.CallOption) (*VendorCreateOrderDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorCreateOrderDraftResponse)
	err := c.cc.Invoke(ctx, VendorOrderAPI_VendorCreateOrderDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorOrderAPIClient) VendorCreateOrderDraftWithLabel(ctx context.Context, in *VendorCreateOrderDraftWithLabelRequest, opts ...grpc.CallOption) (*VendorCreateOrderDraftWithLabelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorCreateOrderDraftWithLabelResponse)
	err := c.cc.Invoke(ctx, VendorOrderAPI_VendorCreateOrderDraftWithLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorOrderAPIClient) VendorGetPriceQuote(ctx context.Context, in *VendorGetPriceQuoteRequest, opts ...grpc.CallOption) (*VendorGetPriceQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorGetPriceQuoteResponse)
	err := c.cc.Invoke(ctx, VendorOrderAPI_VendorGetPriceQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorOrderAPIClient) VendorUpdateOrderDraftLineItems(ctx context.Context, in *VendorUpdateOrderDraftLineItemsRequest, opts ...grpc.CallOption) (*VendorUpdateOrderDraftLineItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorUpdateOrderDraftLineItemsResponse)
	err := c.cc.Invoke(ctx, VendorOrderAPI_VendorUpdateOrderDraftLineItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorOrderAPIServer is the server API for VendorOrderAPI service.
// All implementations should embed UnimplementedVendorOrderAPIServer
// for forward compatibility.
//
// VendorOrderAPI provide an abstraction to all of read and write data access for order businesses
type VendorOrderAPIServer interface {
	VendorListOrder(context.Context, *VendorListOrderRequest) (*VendorListOrderResponse, error)
	VendorListOrderDraft(context.Context, *VendorListOrderDraftRequest) (*VendorListOrderDraftResponse, error)
	VendorCreateOrderDraft(context.Context, *VendorCreateOrderDraftRequest) (*VendorCreateOrderDraftResponse, error)
	VendorCreateOrderDraftWithLabel(context.Context, *VendorCreateOrderDraftWithLabelRequest) (*VendorCreateOrderDraftWithLabelResponse, error)
	VendorGetPriceQuote(context.Context, *VendorGetPriceQuoteRequest) (*VendorGetPriceQuoteResponse, error)
	VendorUpdateOrderDraftLineItems(context.Context, *VendorUpdateOrderDraftLineItemsRequest) (*VendorUpdateOrderDraftLineItemsResponse, error)
}

// UnimplementedVendorOrderAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVendorOrderAPIServer struct{}

func (UnimplementedVendorOrderAPIServer) VendorListOrder(context.Context, *VendorListOrderRequest) (*VendorListOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VendorListOrder not implemented")
}
func (UnimplementedVendorOrderAPIServer) VendorListOrderDraft(context.Context, *VendorListOrderDraftRequest) (*VendorListOrderDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VendorListOrderDraft not implemented")
}
func (UnimplementedVendorOrderAPIServer) VendorCreateOrderDraft(context.Context, *VendorCreateOrderDraftRequest) (*VendorCreateOrderDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VendorCreateOrderDraft not implemented")
}
func (UnimplementedVendorOrderAPIServer) VendorCreateOrderDraftWithLabel(context.Context, *VendorCreateOrderDraftWithLabelRequest) (*VendorCreateOrderDraftWithLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VendorCreateOrderDraftWithLabel not implemented")
}
func (UnimplementedVendorOrderAPIServer) VendorGetPriceQuote(context.Context, *VendorGetPriceQuoteRequest) (*VendorGetPriceQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VendorGetPriceQuote not implemented")
}
func (UnimplementedVendorOrderAPIServer) VendorUpdateOrderDraftLineItems(context.Context, *VendorUpdateOrderDraftLineItemsRequest) (*VendorUpdateOrderDraftLineItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VendorUpdateOrderDraftLineItems not implemented")
}
func (UnimplementedVendorOrderAPIServer) testEmbeddedByValue() {}

// UnsafeVendorOrderAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VendorOrderAPIServer will
// result in compilation errors.
type UnsafeVendorOrderAPIServer interface {
	mustEmbedUnimplementedVendorOrderAPIServer()
}

func RegisterVendorOrderAPIServer(s grpc.ServiceRegistrar, srv VendorOrderAPIServer) {
	// If the following call pancis, it indicates UnimplementedVendorOrderAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VendorOrderAPI_ServiceDesc, srv)
}

func _VendorOrderAPI_VendorListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorListOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorOrderAPIServer).VendorListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorOrderAPI_VendorListOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorOrderAPIServer).VendorListOrder(ctx, req.(*VendorListOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorOrderAPI_VendorListOrderDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorListOrderDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorOrderAPIServer).VendorListOrderDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorOrderAPI_VendorListOrderDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorOrderAPIServer).VendorListOrderDraft(ctx, req.(*VendorListOrderDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorOrderAPI_VendorCreateOrderDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorCreateOrderDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorOrderAPIServer).VendorCreateOrderDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorOrderAPI_VendorCreateOrderDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorOrderAPIServer).VendorCreateOrderDraft(ctx, req.(*VendorCreateOrderDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorOrderAPI_VendorCreateOrderDraftWithLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorCreateOrderDraftWithLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorOrderAPIServer).VendorCreateOrderDraftWithLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorOrderAPI_VendorCreateOrderDraftWithLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorOrderAPIServer).VendorCreateOrderDraftWithLabel(ctx, req.(*VendorCreateOrderDraftWithLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorOrderAPI_VendorGetPriceQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorGetPriceQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorOrderAPIServer).VendorGetPriceQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorOrderAPI_VendorGetPriceQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorOrderAPIServer).VendorGetPriceQuote(ctx, req.(*VendorGetPriceQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorOrderAPI_VendorUpdateOrderDraftLineItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorUpdateOrderDraftLineItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorOrderAPIServer).VendorUpdateOrderDraftLineItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorOrderAPI_VendorUpdateOrderDraftLineItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorOrderAPIServer).VendorUpdateOrderDraftLineItems(ctx, req.(*VendorUpdateOrderDraftLineItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VendorOrderAPI_ServiceDesc is the grpc.ServiceDesc for VendorOrderAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VendorOrderAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.order.v1.VendorOrderAPI",
	HandlerType: (*VendorOrderAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VendorListOrder",
			Handler:    _VendorOrderAPI_VendorListOrder_Handler,
		},
		{
			MethodName: "VendorListOrderDraft",
			Handler:    _VendorOrderAPI_VendorListOrderDraft_Handler,
		},
		{
			MethodName: "VendorCreateOrderDraft",
			Handler:    _VendorOrderAPI_VendorCreateOrderDraft_Handler,
		},
		{
			MethodName: "VendorCreateOrderDraftWithLabel",
			Handler:    _VendorOrderAPI_VendorCreateOrderDraftWithLabel_Handler,
		},
		{
			MethodName: "VendorGetPriceQuote",
			Handler:    _VendorOrderAPI_VendorGetPriceQuote_Handler,
		},
		{
			MethodName: "VendorUpdateOrderDraftLineItems",
			Handler:    _VendorOrderAPI_VendorUpdateOrderDraftLineItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/order/v1/api_vendor_order.proto",
}

const (
	LegacyVendorOrderAPI_LegacyVendorGetPriceQuote_FullMethodName             = "/api.order.v1.LegacyVendorOrderAPI/LegacyVendorGetPriceQuote"
	LegacyVendorOrderAPI_LegacyVendorCreateOrderDraft_FullMethodName          = "/api.order.v1.LegacyVendorOrderAPI/LegacyVendorCreateOrderDraft"
	LegacyVendorOrderAPI_LegacyVendorCreateOrderDraftWithLabel_FullMethodName = "/api.order.v1.LegacyVendorOrderAPI/LegacyVendorCreateOrderDraftWithLabel"
	LegacyVendorOrderAPI_LegacyVendorListOrder_FullMethodName                 = "/api.order.v1.LegacyVendorOrderAPI/LegacyVendorListOrder"
	LegacyVendorOrderAPI_LegacyVendorUpdateOrderDraftLineItems_FullMethodName = "/api.order.v1.LegacyVendorOrderAPI/LegacyVendorUpdateOrderDraftLineItems"
)

// LegacyVendorOrderAPIClient is the client API for LegacyVendorOrderAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LegacyVendorOrderAPI provide an abstraction to support the legacy api call format
type LegacyVendorOrderAPIClient interface {
	LegacyVendorGetPriceQuote(ctx context.Context, in *LegacyVendorGetPriceQuoteRequest, opts ...grpc.CallOption) (*LegacyVendorGetPriceQuoteResponse, error)
	LegacyVendorCreateOrderDraft(ctx context.Context, in *LegacyVendorCreateOrderDraftRequest, opts ...grpc.CallOption) (*LegacyVendorCreateOrderDraftResponse, error)
	LegacyVendorCreateOrderDraftWithLabel(ctx context.Context, in *LegacyVendorCreateOrderDraftWithLabelRequest, opts ...grpc.CallOption) (*LegacyVendorCreateOrderDraftWithLabelResponse, error)
	LegacyVendorListOrder(ctx context.Context, in *LegacyVendorListOrderRequest, opts ...grpc.CallOption) (*LegacyVendorListOrderResponse, error)
	LegacyVendorUpdateOrderDraftLineItems(ctx context.Context, in *LegacyVendorUpdateOrderDraftLineItemsRequest, opts ...grpc.CallOption) (*LegacyVendorUpdateOrderDraftLineItemsResponse, error)
}

type legacyVendorOrderAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLegacyVendorOrderAPIClient(cc grpc.ClientConnInterface) LegacyVendorOrderAPIClient {
	return &legacyVendorOrderAPIClient{cc}
}

func (c *legacyVendorOrderAPIClient) LegacyVendorGetPriceQuote(ctx context.Context, in *LegacyVendorGetPriceQuoteRequest, opts ...grpc.CallOption) (*LegacyVendorGetPriceQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LegacyVendorGetPriceQuoteResponse)
	err := c.cc.Invoke(ctx, LegacyVendorOrderAPI_LegacyVendorGetPriceQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legacyVendorOrderAPIClient) LegacyVendorCreateOrderDraft(ctx context.Context, in *LegacyVendorCreateOrderDraftRequest, opts ...grpc.CallOption) (*LegacyVendorCreateOrderDraftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LegacyVendorCreateOrderDraftResponse)
	err := c.cc.Invoke(ctx, LegacyVendorOrderAPI_LegacyVendorCreateOrderDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legacyVendorOrderAPIClient) LegacyVendorCreateOrderDraftWithLabel(ctx context.Context, in *LegacyVendorCreateOrderDraftWithLabelRequest, opts ...grpc.CallOption) (*LegacyVendorCreateOrderDraftWithLabelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LegacyVendorCreateOrderDraftWithLabelResponse)
	err := c.cc.Invoke(ctx, LegacyVendorOrderAPI_LegacyVendorCreateOrderDraftWithLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legacyVendorOrderAPIClient) LegacyVendorListOrder(ctx context.Context, in *LegacyVendorListOrderRequest, opts ...grpc.CallOption) (*LegacyVendorListOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LegacyVendorListOrderResponse)
	err := c.cc.Invoke(ctx, LegacyVendorOrderAPI_LegacyVendorListOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legacyVendorOrderAPIClient) LegacyVendorUpdateOrderDraftLineItems(ctx context.Context, in *LegacyVendorUpdateOrderDraftLineItemsRequest, opts ...grpc.CallOption) (*LegacyVendorUpdateOrderDraftLineItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LegacyVendorUpdateOrderDraftLineItemsResponse)
	err := c.cc.Invoke(ctx, LegacyVendorOrderAPI_LegacyVendorUpdateOrderDraftLineItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LegacyVendorOrderAPIServer is the server API for LegacyVendorOrderAPI service.
// All implementations should embed UnimplementedLegacyVendorOrderAPIServer
// for forward compatibility.
//
// LegacyVendorOrderAPI provide an abstraction to support the legacy api call format
type LegacyVendorOrderAPIServer interface {
	LegacyVendorGetPriceQuote(context.Context, *LegacyVendorGetPriceQuoteRequest) (*LegacyVendorGetPriceQuoteResponse, error)
	LegacyVendorCreateOrderDraft(context.Context, *LegacyVendorCreateOrderDraftRequest) (*LegacyVendorCreateOrderDraftResponse, error)
	LegacyVendorCreateOrderDraftWithLabel(context.Context, *LegacyVendorCreateOrderDraftWithLabelRequest) (*LegacyVendorCreateOrderDraftWithLabelResponse, error)
	LegacyVendorListOrder(context.Context, *LegacyVendorListOrderRequest) (*LegacyVendorListOrderResponse, error)
	LegacyVendorUpdateOrderDraftLineItems(context.Context, *LegacyVendorUpdateOrderDraftLineItemsRequest) (*LegacyVendorUpdateOrderDraftLineItemsResponse, error)
}

// UnimplementedLegacyVendorOrderAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLegacyVendorOrderAPIServer struct{}

func (UnimplementedLegacyVendorOrderAPIServer) LegacyVendorGetPriceQuote(context.Context, *LegacyVendorGetPriceQuoteRequest) (*LegacyVendorGetPriceQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegacyVendorGetPriceQuote not implemented")
}
func (UnimplementedLegacyVendorOrderAPIServer) LegacyVendorCreateOrderDraft(context.Context, *LegacyVendorCreateOrderDraftRequest) (*LegacyVendorCreateOrderDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegacyVendorCreateOrderDraft not implemented")
}
func (UnimplementedLegacyVendorOrderAPIServer) LegacyVendorCreateOrderDraftWithLabel(context.Context, *LegacyVendorCreateOrderDraftWithLabelRequest) (*LegacyVendorCreateOrderDraftWithLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegacyVendorCreateOrderDraftWithLabel not implemented")
}
func (UnimplementedLegacyVendorOrderAPIServer) LegacyVendorListOrder(context.Context, *LegacyVendorListOrderRequest) (*LegacyVendorListOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegacyVendorListOrder not implemented")
}
func (UnimplementedLegacyVendorOrderAPIServer) LegacyVendorUpdateOrderDraftLineItems(context.Context, *LegacyVendorUpdateOrderDraftLineItemsRequest) (*LegacyVendorUpdateOrderDraftLineItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegacyVendorUpdateOrderDraftLineItems not implemented")
}
func (UnimplementedLegacyVendorOrderAPIServer) testEmbeddedByValue() {}

// UnsafeLegacyVendorOrderAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LegacyVendorOrderAPIServer will
// result in compilation errors.
type UnsafeLegacyVendorOrderAPIServer interface {
	mustEmbedUnimplementedLegacyVendorOrderAPIServer()
}

func RegisterLegacyVendorOrderAPIServer(s grpc.ServiceRegistrar, srv LegacyVendorOrderAPIServer) {
	// If the following call pancis, it indicates UnimplementedLegacyVendorOrderAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LegacyVendorOrderAPI_ServiceDesc, srv)
}

func _LegacyVendorOrderAPI_LegacyVendorGetPriceQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LegacyVendorGetPriceQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyVendorOrderAPIServer).LegacyVendorGetPriceQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegacyVendorOrderAPI_LegacyVendorGetPriceQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyVendorOrderAPIServer).LegacyVendorGetPriceQuote(ctx, req.(*LegacyVendorGetPriceQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegacyVendorOrderAPI_LegacyVendorCreateOrderDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LegacyVendorCreateOrderDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyVendorOrderAPIServer).LegacyVendorCreateOrderDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegacyVendorOrderAPI_LegacyVendorCreateOrderDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyVendorOrderAPIServer).LegacyVendorCreateOrderDraft(ctx, req.(*LegacyVendorCreateOrderDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegacyVendorOrderAPI_LegacyVendorCreateOrderDraftWithLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LegacyVendorCreateOrderDraftWithLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyVendorOrderAPIServer).LegacyVendorCreateOrderDraftWithLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegacyVendorOrderAPI_LegacyVendorCreateOrderDraftWithLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyVendorOrderAPIServer).LegacyVendorCreateOrderDraftWithLabel(ctx, req.(*LegacyVendorCreateOrderDraftWithLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegacyVendorOrderAPI_LegacyVendorListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LegacyVendorListOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyVendorOrderAPIServer).LegacyVendorListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegacyVendorOrderAPI_LegacyVendorListOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyVendorOrderAPIServer).LegacyVendorListOrder(ctx, req.(*LegacyVendorListOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegacyVendorOrderAPI_LegacyVendorUpdateOrderDraftLineItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LegacyVendorUpdateOrderDraftLineItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyVendorOrderAPIServer).LegacyVendorUpdateOrderDraftLineItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegacyVendorOrderAPI_LegacyVendorUpdateOrderDraftLineItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyVendorOrderAPIServer).LegacyVendorUpdateOrderDraftLineItems(ctx, req.(*LegacyVendorUpdateOrderDraftLineItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LegacyVendorOrderAPI_ServiceDesc is the grpc.ServiceDesc for LegacyVendorOrderAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LegacyVendorOrderAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.order.v1.LegacyVendorOrderAPI",
	HandlerType: (*LegacyVendorOrderAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LegacyVendorGetPriceQuote",
			Handler:    _LegacyVendorOrderAPI_LegacyVendorGetPriceQuote_Handler,
		},
		{
			MethodName: "LegacyVendorCreateOrderDraft",
			Handler:    _LegacyVendorOrderAPI_LegacyVendorCreateOrderDraft_Handler,
		},
		{
			MethodName: "LegacyVendorCreateOrderDraftWithLabel",
			Handler:    _LegacyVendorOrderAPI_LegacyVendorCreateOrderDraftWithLabel_Handler,
		},
		{
			MethodName: "LegacyVendorListOrder",
			Handler:    _LegacyVendorOrderAPI_LegacyVendorListOrder_Handler,
		},
		{
			MethodName: "LegacyVendorUpdateOrderDraftLineItems",
			Handler:    _LegacyVendorOrderAPI_LegacyVendorUpdateOrderDraftLineItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/order/v1/api_vendor_order.proto",
}
