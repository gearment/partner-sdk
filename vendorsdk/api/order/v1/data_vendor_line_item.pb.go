// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/order/v1/data_vendor_line_item.proto

package orderv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/gearment/gea-next/vendorsdk/common/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VendorStockLabel int32

const (
	VendorStockLabel_VENDOR_STOCK_LABEL_UNKNOWN      VendorStockLabel = 0
	VendorStockLabel_VENDOR_STOCK_LABEL_IN_STOCK     VendorStockLabel = 1 // Product is in stock and available
	VendorStockLabel_VENDOR_STOCK_LABEL_OUT_OF_STOCK VendorStockLabel = 2 // Temporarily out of stock
	VendorStockLabel_VENDOR_STOCK_LABEL_AT_RISK      VendorStockLabel = 3 // Low stock, may run out soon
	VendorStockLabel_VENDOR_STOCK_LABEL_DISCONTINUED VendorStockLabel = 4 // Product discontinued, no longer available
)

// Enum value maps for VendorStockLabel.
var (
	VendorStockLabel_name = map[int32]string{
		0: "VENDOR_STOCK_LABEL_UNKNOWN",
		1: "VENDOR_STOCK_LABEL_IN_STOCK",
		2: "VENDOR_STOCK_LABEL_OUT_OF_STOCK",
		3: "VENDOR_STOCK_LABEL_AT_RISK",
		4: "VENDOR_STOCK_LABEL_DISCONTINUED",
	}
	VendorStockLabel_value = map[string]int32{
		"VENDOR_STOCK_LABEL_UNKNOWN":      0,
		"VENDOR_STOCK_LABEL_IN_STOCK":     1,
		"VENDOR_STOCK_LABEL_OUT_OF_STOCK": 2,
		"VENDOR_STOCK_LABEL_AT_RISK":      3,
		"VENDOR_STOCK_LABEL_DISCONTINUED": 4,
	}
)

func (x VendorStockLabel) Enum() *VendorStockLabel {
	p := new(VendorStockLabel)
	*p = x
	return p
}

func (x VendorStockLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VendorStockLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_order_v1_data_vendor_line_item_proto_enumTypes[0].Descriptor()
}

func (VendorStockLabel) Type() protoreflect.EnumType {
	return &file_api_order_v1_data_vendor_line_item_proto_enumTypes[0]
}

func (x VendorStockLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VendorStockLabel.Descriptor instead.
func (VendorStockLabel) EnumDescriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{0}
}

type VendorLineItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Order ID this line item belongs to
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Quantity ordered (minimum 1)
	Quantity int32 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Printing options for this line item (design URLs and locations)
	PrintingOptions []*VendorPrintingOption `protobuf:"bytes,3,rep,name=printing_options,json=printingOptions,proto3" json:"printing_options,omitempty"`
	// Original product options from marketplace (e.g., color, size selections)
	OriginOptions []*VendorLineItem_OriginOption `protobuf:"bytes,4,rep,name=origin_options,json=originOptions,proto3" json:"origin_options,omitempty"`
	// Fulfillment options (barcode, etc.)
	FulfillmentOption *VendorLineItem_FulfillmentOption `protobuf:"bytes,5,opt,name=fulfillment_option,json=fulfillmentOption,proto3" json:"fulfillment_option,omitempty"`
	// Product variant details
	Variant *VendorLineItem_Variant `protobuf:"bytes,6,opt,name=variant,proto3" json:"variant,omitempty"`
	// Product details
	Product *VendorLineItem_Product `protobuf:"bytes,7,opt,name=product,proto3" json:"product,omitempty"`
	// Internal line item ID
	Id int64 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	// Unit price per item
	ItemPrice *v1.Money `protobuf:"bytes,9,opt,name=item_price,json=itemPrice,proto3" json:"item_price,omitempty"`
	// Tax amount for this line
	LineTax *v1.Money `protobuf:"bytes,10,opt,name=line_tax,json=lineTax,proto3" json:"line_tax,omitempty"`
	// Additional fees for this line
	LineFee *v1.Money `protobuf:"bytes,11,opt,name=line_fee,json=lineFee,proto3" json:"line_fee,omitempty"`
	// Discount applied to this line
	LineDiscount *v1.Money `protobuf:"bytes,12,opt,name=line_discount,json=lineDiscount,proto3" json:"line_discount,omitempty"`
	// Subtotal before tax and fees (item_price Ã— quantity)
	LineSubtotal *v1.Money `protobuf:"bytes,13,opt,name=line_subtotal,json=lineSubtotal,proto3" json:"line_subtotal,omitempty"`
	// Total amount for this line (subtotal + tax + fees - discount)
	LineTotal *v1.Money `protobuf:"bytes,14,opt,name=line_total,json=lineTotal,proto3" json:"line_total,omitempty"`
	// Line item ID (string format)
	LineItemId    string `protobuf:"bytes,15,opt,name=line_item_id,json=lineItemId,proto3" json:"line_item_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorLineItem) Reset() {
	*x = VendorLineItem{}
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorLineItem) ProtoMessage() {}

func (x *VendorLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorLineItem.ProtoReflect.Descriptor instead.
func (*VendorLineItem) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{0}
}

func (x *VendorLineItem) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *VendorLineItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *VendorLineItem) GetPrintingOptions() []*VendorPrintingOption {
	if x != nil {
		return x.PrintingOptions
	}
	return nil
}

func (x *VendorLineItem) GetOriginOptions() []*VendorLineItem_OriginOption {
	if x != nil {
		return x.OriginOptions
	}
	return nil
}

func (x *VendorLineItem) GetFulfillmentOption() *VendorLineItem_FulfillmentOption {
	if x != nil {
		return x.FulfillmentOption
	}
	return nil
}

func (x *VendorLineItem) GetVariant() *VendorLineItem_Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *VendorLineItem) GetProduct() *VendorLineItem_Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *VendorLineItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VendorLineItem) GetItemPrice() *v1.Money {
	if x != nil {
		return x.ItemPrice
	}
	return nil
}

func (x *VendorLineItem) GetLineTax() *v1.Money {
	if x != nil {
		return x.LineTax
	}
	return nil
}

func (x *VendorLineItem) GetLineFee() *v1.Money {
	if x != nil {
		return x.LineFee
	}
	return nil
}

func (x *VendorLineItem) GetLineDiscount() *v1.Money {
	if x != nil {
		return x.LineDiscount
	}
	return nil
}

func (x *VendorLineItem) GetLineSubtotal() *v1.Money {
	if x != nil {
		return x.LineSubtotal
	}
	return nil
}

func (x *VendorLineItem) GetLineTotal() *v1.Money {
	if x != nil {
		return x.LineTotal
	}
	return nil
}

func (x *VendorLineItem) GetLineItemId() string {
	if x != nil {
		return x.LineItemId
	}
	return ""
}

type VendorOrderLineItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Internal line item ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Product variant ID
	VariantId string `protobuf:"bytes,2,opt,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"`
	// Quantity ordered (minimum 1)
	Quantity int32 `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Printing options for this line item
	PrintingOptions []*VendorPrintingOption `protobuf:"bytes,4,rep,name=printing_options,json=printingOptions,proto3" json:"printing_options,omitempty"`
	// Seller's variant ID (from marketplace)
	SellerVariantId string `protobuf:"bytes,5,opt,name=seller_variant_id,json=sellerVariantId,proto3" json:"seller_variant_id,omitempty"`
	// Product ID
	ProductId string `protobuf:"bytes,7,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// First option value (e.g., "Black" for color)
	Option_1 string `protobuf:"bytes,8,opt,name=option_1,json=option1,proto3" json:"option_1,omitempty"`
	// Second option value (e.g., "Medium" for size)
	Option_2 string `protobuf:"bytes,9,opt,name=option_2,json=option2,proto3" json:"option_2,omitempty"`
	// Product name
	ProductName string `protobuf:"bytes,10,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// Unit price per item
	ItemPrice *v1.Money `protobuf:"bytes,11,opt,name=item_price,json=itemPrice,proto3" json:"item_price,omitempty"`
	// Tax amount for this line
	LineTax *v1.Money `protobuf:"bytes,12,opt,name=line_tax,json=lineTax,proto3" json:"line_tax,omitempty"`
	// Additional fees for this line
	LineFee *v1.Money `protobuf:"bytes,13,opt,name=line_fee,json=lineFee,proto3" json:"line_fee,omitempty"`
	// Discount applied to this line
	LineDiscount *v1.Money `protobuf:"bytes,14,opt,name=line_discount,json=lineDiscount,proto3" json:"line_discount,omitempty"`
	// Subtotal before tax and fees
	LineSubtotal *v1.Money `protobuf:"bytes,15,opt,name=line_subtotal,json=lineSubtotal,proto3" json:"line_subtotal,omitempty"`
	// Total amount for this line
	LineTotal *v1.Money `protobuf:"bytes,16,opt,name=line_total,json=lineTotal,proto3" json:"line_total,omitempty"`
	// Variant name (e.g., "Black / Medium")
	VariantName string `protobuf:"bytes,17,opt,name=variant_name,json=variantName,proto3" json:"variant_name,omitempty"`
	// Product URL (link to product page)
	ProductUrl string `protobuf:"bytes,18,opt,name=product_url,json=productUrl,proto3" json:"product_url,omitempty"`
	// Variant SKU
	VariantSku string `protobuf:"bytes,29,opt,name=variant_sku,json=variantSku,proto3" json:"variant_sku,omitempty"`
	// Product type name (e.g., "T-Shirt", "Hoodie")
	ProductTypeName string `protobuf:"bytes,20,opt,name=product_type_name,json=productTypeName,proto3" json:"product_type_name,omitempty"`
	// Order ID this line item belongs to
	OrderId string `protobuf:"bytes,21,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Line item ID (string format)
	LineItemId    string `protobuf:"bytes,22,opt,name=line_item_id,json=lineItemId,proto3" json:"line_item_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorOrderLineItem) Reset() {
	*x = VendorOrderLineItem{}
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorOrderLineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrderLineItem) ProtoMessage() {}

func (x *VendorOrderLineItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrderLineItem.ProtoReflect.Descriptor instead.
func (*VendorOrderLineItem) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{1}
}

func (x *VendorOrderLineItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VendorOrderLineItem) GetVariantId() string {
	if x != nil {
		return x.VariantId
	}
	return ""
}

func (x *VendorOrderLineItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *VendorOrderLineItem) GetPrintingOptions() []*VendorPrintingOption {
	if x != nil {
		return x.PrintingOptions
	}
	return nil
}

func (x *VendorOrderLineItem) GetSellerVariantId() string {
	if x != nil {
		return x.SellerVariantId
	}
	return ""
}

func (x *VendorOrderLineItem) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *VendorOrderLineItem) GetOption_1() string {
	if x != nil {
		return x.Option_1
	}
	return ""
}

func (x *VendorOrderLineItem) GetOption_2() string {
	if x != nil {
		return x.Option_2
	}
	return ""
}

func (x *VendorOrderLineItem) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *VendorOrderLineItem) GetItemPrice() *v1.Money {
	if x != nil {
		return x.ItemPrice
	}
	return nil
}

func (x *VendorOrderLineItem) GetLineTax() *v1.Money {
	if x != nil {
		return x.LineTax
	}
	return nil
}

func (x *VendorOrderLineItem) GetLineFee() *v1.Money {
	if x != nil {
		return x.LineFee
	}
	return nil
}

func (x *VendorOrderLineItem) GetLineDiscount() *v1.Money {
	if x != nil {
		return x.LineDiscount
	}
	return nil
}

func (x *VendorOrderLineItem) GetLineSubtotal() *v1.Money {
	if x != nil {
		return x.LineSubtotal
	}
	return nil
}

func (x *VendorOrderLineItem) GetLineTotal() *v1.Money {
	if x != nil {
		return x.LineTotal
	}
	return nil
}

func (x *VendorOrderLineItem) GetVariantName() string {
	if x != nil {
		return x.VariantName
	}
	return ""
}

func (x *VendorOrderLineItem) GetProductUrl() string {
	if x != nil {
		return x.ProductUrl
	}
	return ""
}

func (x *VendorOrderLineItem) GetVariantSku() string {
	if x != nil {
		return x.VariantSku
	}
	return ""
}

func (x *VendorOrderLineItem) GetProductTypeName() string {
	if x != nil {
		return x.ProductTypeName
	}
	return ""
}

func (x *VendorOrderLineItem) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *VendorOrderLineItem) GetLineItemId() string {
	if x != nil {
		return x.LineItemId
	}
	return ""
}

type VendorLineItem_OriginOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Option display name (e.g., "Color", "Size")
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Option key/identifier
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Option value (e.g., "Black", "Medium")
	Value         string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorLineItem_OriginOption) Reset() {
	*x = VendorLineItem_OriginOption{}
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorLineItem_OriginOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorLineItem_OriginOption) ProtoMessage() {}

func (x *VendorLineItem_OriginOption) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorLineItem_OriginOption.ProtoReflect.Descriptor instead.
func (*VendorLineItem_OriginOption) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VendorLineItem_OriginOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorLineItem_OriginOption) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *VendorLineItem_OriginOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type VendorLineItem_FulfillmentOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Barcode URL for inventory tracking (optional)
	BarcodeUrl    string `protobuf:"bytes,1,opt,name=barcode_url,json=barcodeUrl,proto3" json:"barcode_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorLineItem_FulfillmentOption) Reset() {
	*x = VendorLineItem_FulfillmentOption{}
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorLineItem_FulfillmentOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorLineItem_FulfillmentOption) ProtoMessage() {}

func (x *VendorLineItem_FulfillmentOption) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorLineItem_FulfillmentOption.ProtoReflect.Descriptor instead.
func (*VendorLineItem_FulfillmentOption) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{0, 1}
}

func (x *VendorLineItem_FulfillmentOption) GetBarcodeUrl() string {
	if x != nil {
		return x.BarcodeUrl
	}
	return ""
}

type VendorLineItem_Variant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Variant ID (string format)
	VariantId string `protobuf:"bytes,1,opt,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"`
	// Legacy variant ID (integer format, for backward compatibility)
	LegacyId int32 `protobuf:"varint,2,opt,name=legacy_id,json=legacyId,proto3" json:"legacy_id,omitempty"`
	// SKU (Stock Keeping Unit)
	Sku string `protobuf:"bytes,3,opt,name=sku,proto3" json:"sku,omitempty"`
	// Variant name (e.g., "Black / Medium")
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Variant description
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// First option value (e.g., "Black" for color)
	Option_1 string `protobuf:"bytes,6,opt,name=option_1,json=option1,proto3" json:"option_1,omitempty"`
	// Second option value (e.g., "Medium" for size)
	Option_2 string `protobuf:"bytes,7,opt,name=option_2,json=option2,proto3" json:"option_2,omitempty"`
	// Third option value (optional)
	Option_3 string `protobuf:"bytes,8,opt,name=option_3,json=option3,proto3" json:"option_3,omitempty"`
	// First option name (e.g., "Color")
	Option_1Name string `protobuf:"bytes,9,opt,name=option_1_name,json=option1Name,proto3" json:"option_1_name,omitempty"`
	// Second option name (e.g., "Size")
	Option_2Name string `protobuf:"bytes,10,opt,name=option_2_name,json=option2Name,proto3" json:"option_2_name,omitempty"`
	// Variant price
	Price *v1.Money `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`
	// Gearment price (internal)
	PriceGm *v1.Money `protobuf:"bytes,12,opt,name=price_gm,json=priceGm,proto3" json:"price_gm,omitempty"`
	// Variant images
	Images []*VendorLineItem_ProductImage `protobuf:"bytes,13,rep,name=images,proto3" json:"images,omitempty"`
	// Stock availability status
	StockLabel    VendorStockLabel `protobuf:"varint,14,opt,name=stock_label,json=stockLabel,proto3,enum=api.order.v1.VendorStockLabel" json:"stock_label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorLineItem_Variant) Reset() {
	*x = VendorLineItem_Variant{}
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorLineItem_Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorLineItem_Variant) ProtoMessage() {}

func (x *VendorLineItem_Variant) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorLineItem_Variant.ProtoReflect.Descriptor instead.
func (*VendorLineItem_Variant) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{0, 2}
}

func (x *VendorLineItem_Variant) GetVariantId() string {
	if x != nil {
		return x.VariantId
	}
	return ""
}

func (x *VendorLineItem_Variant) GetLegacyId() int32 {
	if x != nil {
		return x.LegacyId
	}
	return 0
}

func (x *VendorLineItem_Variant) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *VendorLineItem_Variant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorLineItem_Variant) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VendorLineItem_Variant) GetOption_1() string {
	if x != nil {
		return x.Option_1
	}
	return ""
}

func (x *VendorLineItem_Variant) GetOption_2() string {
	if x != nil {
		return x.Option_2
	}
	return ""
}

func (x *VendorLineItem_Variant) GetOption_3() string {
	if x != nil {
		return x.Option_3
	}
	return ""
}

func (x *VendorLineItem_Variant) GetOption_1Name() string {
	if x != nil {
		return x.Option_1Name
	}
	return ""
}

func (x *VendorLineItem_Variant) GetOption_2Name() string {
	if x != nil {
		return x.Option_2Name
	}
	return ""
}

func (x *VendorLineItem_Variant) GetPrice() *v1.Money {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *VendorLineItem_Variant) GetPriceGm() *v1.Money {
	if x != nil {
		return x.PriceGm
	}
	return nil
}

func (x *VendorLineItem_Variant) GetImages() []*VendorLineItem_ProductImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *VendorLineItem_Variant) GetStockLabel() VendorStockLabel {
	if x != nil {
		return x.StockLabel
	}
	return VendorStockLabel_VENDOR_STOCK_LABEL_UNKNOWN
}

type VendorLineItem_Product struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Product ID
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Product name (e.g., "Unisex T-Shirt")
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Product description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Product images
	Images []*VendorLineItem_ProductImage `protobuf:"bytes,4,rep,name=images,proto3" json:"images,omitempty"`
	// Available print locations for this product
	PrintLocations []*VendorLineItem_ProductPrintLocation `protobuf:"bytes,5,rep,name=print_locations,json=printLocations,proto3" json:"print_locations,omitempty"`
	// Product SKU
	Sku           string `protobuf:"bytes,6,opt,name=sku,proto3" json:"sku,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorLineItem_Product) Reset() {
	*x = VendorLineItem_Product{}
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorLineItem_Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorLineItem_Product) ProtoMessage() {}

func (x *VendorLineItem_Product) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorLineItem_Product.ProtoReflect.Descriptor instead.
func (*VendorLineItem_Product) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{0, 3}
}

func (x *VendorLineItem_Product) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *VendorLineItem_Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorLineItem_Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VendorLineItem_Product) GetImages() []*VendorLineItem_ProductImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *VendorLineItem_Product) GetPrintLocations() []*VendorLineItem_ProductPrintLocation {
	if x != nil {
		return x.PrintLocations
	}
	return nil
}

func (x *VendorLineItem_Product) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

type VendorLineItem_ProductPrintLocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Print location code (e.g., "front", "back")
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Print location display name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Internal location ID
	LocationId    int32 `protobuf:"varint,3,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorLineItem_ProductPrintLocation) Reset() {
	*x = VendorLineItem_ProductPrintLocation{}
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorLineItem_ProductPrintLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorLineItem_ProductPrintLocation) ProtoMessage() {}

func (x *VendorLineItem_ProductPrintLocation) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorLineItem_ProductPrintLocation.ProtoReflect.Descriptor instead.
func (*VendorLineItem_ProductPrintLocation) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{0, 4}
}

func (x *VendorLineItem_ProductPrintLocation) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VendorLineItem_ProductPrintLocation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorLineItem_ProductPrintLocation) GetLocationId() int32 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

type VendorLineItem_ProductImage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Image URL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Image tag/category (e.g., "front", "back", "detail")
	Tag           string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorLineItem_ProductImage) Reset() {
	*x = VendorLineItem_ProductImage{}
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorLineItem_ProductImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorLineItem_ProductImage) ProtoMessage() {}

func (x *VendorLineItem_ProductImage) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorLineItem_ProductImage.ProtoReflect.Descriptor instead.
func (*VendorLineItem_ProductImage) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{0, 5}
}

func (x *VendorLineItem_ProductImage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VendorLineItem_ProductImage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// Short is a lightweight version of VendorLineItem containing essential fields
// for compact representation in order listings, including only the total price
type VendorLineItem_Short struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Order ID this line item belongs to
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Quantity ordered (minimum 1)
	Quantity int32 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Printing options for this line item (design URLs and locations)
	PrintingOptions []*VendorPrintingOption `protobuf:"bytes,3,rep,name=printing_options,json=printingOptions,proto3" json:"printing_options,omitempty"`
	// Original product options from marketplace (e.g., color, size selections)
	OriginOptions []*VendorLineItem_OriginOption `protobuf:"bytes,4,rep,name=origin_options,json=originOptions,proto3" json:"origin_options,omitempty"`
	// Fulfillment options (barcode, etc.)
	FulfillmentOption *VendorLineItem_FulfillmentOption `protobuf:"bytes,5,opt,name=fulfillment_option,json=fulfillmentOption,proto3" json:"fulfillment_option,omitempty"`
	// Product variant details
	Variant *VendorLineItem_Variant `protobuf:"bytes,6,opt,name=variant,proto3" json:"variant,omitempty"`
	// Product details
	Product *VendorLineItem_Product `protobuf:"bytes,7,opt,name=product,proto3" json:"product,omitempty"`
	// Internal line item ID
	Id int64 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	// Total amount for this line (subtotal + tax + fees - discount)
	LineTotal *v1.Money `protobuf:"bytes,9,opt,name=line_total,json=lineTotal,proto3" json:"line_total,omitempty"`
	// Line item ID (string format)
	LineItemId    string `protobuf:"bytes,10,opt,name=line_item_id,json=lineItemId,proto3" json:"line_item_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorLineItem_Short) Reset() {
	*x = VendorLineItem_Short{}
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorLineItem_Short) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorLineItem_Short) ProtoMessage() {}

func (x *VendorLineItem_Short) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorLineItem_Short.ProtoReflect.Descriptor instead.
func (*VendorLineItem_Short) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{0, 6}
}

func (x *VendorLineItem_Short) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *VendorLineItem_Short) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *VendorLineItem_Short) GetPrintingOptions() []*VendorPrintingOption {
	if x != nil {
		return x.PrintingOptions
	}
	return nil
}

func (x *VendorLineItem_Short) GetOriginOptions() []*VendorLineItem_OriginOption {
	if x != nil {
		return x.OriginOptions
	}
	return nil
}

func (x *VendorLineItem_Short) GetFulfillmentOption() *VendorLineItem_FulfillmentOption {
	if x != nil {
		return x.FulfillmentOption
	}
	return nil
}

func (x *VendorLineItem_Short) GetVariant() *VendorLineItem_Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *VendorLineItem_Short) GetProduct() *VendorLineItem_Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *VendorLineItem_Short) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VendorLineItem_Short) GetLineTotal() *v1.Money {
	if x != nil {
		return x.LineTotal
	}
	return nil
}

func (x *VendorLineItem_Short) GetLineItemId() string {
	if x != nil {
		return x.LineItemId
	}
	return ""
}

type VendorOrderLineItem_FulfillmentOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BarcodeUrl    string                 `protobuf:"bytes,1,opt,name=barcode_url,json=barcodeUrl,proto3" json:"barcode_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorOrderLineItem_FulfillmentOption) Reset() {
	*x = VendorOrderLineItem_FulfillmentOption{}
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorOrderLineItem_FulfillmentOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrderLineItem_FulfillmentOption) ProtoMessage() {}

func (x *VendorOrderLineItem_FulfillmentOption) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrderLineItem_FulfillmentOption.ProtoReflect.Descriptor instead.
func (*VendorOrderLineItem_FulfillmentOption) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{1, 0}
}

func (x *VendorOrderLineItem_FulfillmentOption) GetBarcodeUrl() string {
	if x != nil {
		return x.BarcodeUrl
	}
	return ""
}

// Short is a lightweight version of VendorOrderLineItem with essential fields
// for compact order representation, including variant details in a nested Short.Variant message
type VendorOrderLineItem_Short struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Internal line item ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Quantity ordered (minimum 1)
	Quantity int32 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Printing options for this line item
	PrintingOptions []*VendorPrintingOption `protobuf:"bytes,3,rep,name=printing_options,json=printingOptions,proto3" json:"printing_options,omitempty"`
	// Seller's variant ID (from marketplace)
	SellerVariantId string `protobuf:"bytes,4,opt,name=seller_variant_id,json=sellerVariantId,proto3" json:"seller_variant_id,omitempty"`
	// Product ID
	ProductId string `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Product name
	ProductName string `protobuf:"bytes,6,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// Unit price per item
	ItemPrice *v1.Money `protobuf:"bytes,7,opt,name=item_price,json=itemPrice,proto3" json:"item_price,omitempty"`
	// Tax amount for this line
	LineTax *v1.Money `protobuf:"bytes,8,opt,name=line_tax,json=lineTax,proto3" json:"line_tax,omitempty"`
	// Additional fees for this line
	LineFee *v1.Money `protobuf:"bytes,9,opt,name=line_fee,json=lineFee,proto3" json:"line_fee,omitempty"`
	// Discount applied to this line
	LineDiscount *v1.Money `protobuf:"bytes,10,opt,name=line_discount,json=lineDiscount,proto3" json:"line_discount,omitempty"`
	// Subtotal before tax and fees
	LineSubtotal *v1.Money `protobuf:"bytes,11,opt,name=line_subtotal,json=lineSubtotal,proto3" json:"line_subtotal,omitempty"`
	// Total amount for this line
	LineTotal *v1.Money `protobuf:"bytes,12,opt,name=line_total,json=lineTotal,proto3" json:"line_total,omitempty"`
	// Fulfillment options (barcode, etc.)
	FulfillmentOption *VendorOrderLineItem_FulfillmentOption `protobuf:"bytes,13,opt,name=fulfillment_option,json=fulfillmentOption,proto3" json:"fulfillment_option,omitempty"`
	// Product URL (link to product page)
	ProductUrl string `protobuf:"bytes,14,opt,name=product_url,json=productUrl,proto3" json:"product_url,omitempty"`
	// Product SKU
	ProductSku string `protobuf:"bytes,15,opt,name=product_sku,json=productSku,proto3" json:"product_sku,omitempty"`
	// Variant details
	Variant *VendorOrderLineItem_Short_Variant `protobuf:"bytes,16,opt,name=variant,proto3" json:"variant,omitempty"`
	// Order ID this line item belongs to
	OrderId string `protobuf:"bytes,17,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Line item ID (string format)
	LineItemId    string `protobuf:"bytes,18,opt,name=line_item_id,json=lineItemId,proto3" json:"line_item_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorOrderLineItem_Short) Reset() {
	*x = VendorOrderLineItem_Short{}
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorOrderLineItem_Short) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrderLineItem_Short) ProtoMessage() {}

func (x *VendorOrderLineItem_Short) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrderLineItem_Short.ProtoReflect.Descriptor instead.
func (*VendorOrderLineItem_Short) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{1, 1}
}

func (x *VendorOrderLineItem_Short) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VendorOrderLineItem_Short) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *VendorOrderLineItem_Short) GetPrintingOptions() []*VendorPrintingOption {
	if x != nil {
		return x.PrintingOptions
	}
	return nil
}

func (x *VendorOrderLineItem_Short) GetSellerVariantId() string {
	if x != nil {
		return x.SellerVariantId
	}
	return ""
}

func (x *VendorOrderLineItem_Short) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *VendorOrderLineItem_Short) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *VendorOrderLineItem_Short) GetItemPrice() *v1.Money {
	if x != nil {
		return x.ItemPrice
	}
	return nil
}

func (x *VendorOrderLineItem_Short) GetLineTax() *v1.Money {
	if x != nil {
		return x.LineTax
	}
	return nil
}

func (x *VendorOrderLineItem_Short) GetLineFee() *v1.Money {
	if x != nil {
		return x.LineFee
	}
	return nil
}

func (x *VendorOrderLineItem_Short) GetLineDiscount() *v1.Money {
	if x != nil {
		return x.LineDiscount
	}
	return nil
}

func (x *VendorOrderLineItem_Short) GetLineSubtotal() *v1.Money {
	if x != nil {
		return x.LineSubtotal
	}
	return nil
}

func (x *VendorOrderLineItem_Short) GetLineTotal() *v1.Money {
	if x != nil {
		return x.LineTotal
	}
	return nil
}

func (x *VendorOrderLineItem_Short) GetFulfillmentOption() *VendorOrderLineItem_FulfillmentOption {
	if x != nil {
		return x.FulfillmentOption
	}
	return nil
}

func (x *VendorOrderLineItem_Short) GetProductUrl() string {
	if x != nil {
		return x.ProductUrl
	}
	return ""
}

func (x *VendorOrderLineItem_Short) GetProductSku() string {
	if x != nil {
		return x.ProductSku
	}
	return ""
}

func (x *VendorOrderLineItem_Short) GetVariant() *VendorOrderLineItem_Short_Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *VendorOrderLineItem_Short) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *VendorOrderLineItem_Short) GetLineItemId() string {
	if x != nil {
		return x.LineItemId
	}
	return ""
}

// Variant contains essential variant information for the short line item representation
type VendorOrderLineItem_Short_Variant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Variant ID (string format)
	VariantId string `protobuf:"bytes,1,opt,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"`
	// Variant name (e.g., "Black / Medium")
	VariantName string `protobuf:"bytes,2,opt,name=variant_name,json=variantName,proto3" json:"variant_name,omitempty"`
	// Legacy variant ID (integer format, for backward compatibility)
	LegacyId int32 `protobuf:"varint,3,opt,name=legacy_id,json=legacyId,proto3" json:"legacy_id,omitempty"`
	// SKU (Stock Keeping Unit)
	Sku string `protobuf:"bytes,4,opt,name=sku,proto3" json:"sku,omitempty"`
	// Variant name
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Variant description
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// First option value (e.g., "Black" for color)
	Option_1 string `protobuf:"bytes,7,opt,name=option_1,json=option1,proto3" json:"option_1,omitempty"`
	// Second option value (e.g., "Medium" for size)
	Option_2 string `protobuf:"bytes,8,opt,name=option_2,json=option2,proto3" json:"option_2,omitempty"`
	// Third option value (optional)
	Option_3 string `protobuf:"bytes,9,opt,name=option_3,json=option3,proto3" json:"option_3,omitempty"`
	// First option name (e.g., "Color")
	Option_1Name string `protobuf:"bytes,10,opt,name=option_1_name,json=option1Name,proto3" json:"option_1_name,omitempty"`
	// Second option name (e.g., "Size")
	Option_2Name string `protobuf:"bytes,11,opt,name=option_2_name,json=option2Name,proto3" json:"option_2_name,omitempty"`
	// Third option name (optional)
	Option_3Name string `protobuf:"bytes,12,opt,name=option_3_name,json=option3Name,proto3" json:"option_3_name,omitempty"`
	// Stock availability status
	StockLabel    VendorStockLabel `protobuf:"varint,13,opt,name=stock_label,json=stockLabel,proto3,enum=api.order.v1.VendorStockLabel" json:"stock_label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorOrderLineItem_Short_Variant) Reset() {
	*x = VendorOrderLineItem_Short_Variant{}
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorOrderLineItem_Short_Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrderLineItem_Short_Variant) ProtoMessage() {}

func (x *VendorOrderLineItem_Short_Variant) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_line_item_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrderLineItem_Short_Variant.ProtoReflect.Descriptor instead.
func (*VendorOrderLineItem_Short_Variant) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *VendorOrderLineItem_Short_Variant) GetVariantId() string {
	if x != nil {
		return x.VariantId
	}
	return ""
}

func (x *VendorOrderLineItem_Short_Variant) GetVariantName() string {
	if x != nil {
		return x.VariantName
	}
	return ""
}

func (x *VendorOrderLineItem_Short_Variant) GetLegacyId() int32 {
	if x != nil {
		return x.LegacyId
	}
	return 0
}

func (x *VendorOrderLineItem_Short_Variant) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *VendorOrderLineItem_Short_Variant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorOrderLineItem_Short_Variant) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VendorOrderLineItem_Short_Variant) GetOption_1() string {
	if x != nil {
		return x.Option_1
	}
	return ""
}

func (x *VendorOrderLineItem_Short_Variant) GetOption_2() string {
	if x != nil {
		return x.Option_2
	}
	return ""
}

func (x *VendorOrderLineItem_Short_Variant) GetOption_3() string {
	if x != nil {
		return x.Option_3
	}
	return ""
}

func (x *VendorOrderLineItem_Short_Variant) GetOption_1Name() string {
	if x != nil {
		return x.Option_1Name
	}
	return ""
}

func (x *VendorOrderLineItem_Short_Variant) GetOption_2Name() string {
	if x != nil {
		return x.Option_2Name
	}
	return ""
}

func (x *VendorOrderLineItem_Short_Variant) GetOption_3Name() string {
	if x != nil {
		return x.Option_3Name
	}
	return ""
}

func (x *VendorOrderLineItem_Short_Variant) GetStockLabel() VendorStockLabel {
	if x != nil {
		return x.StockLabel
	}
	return VendorStockLabel_VENDOR_STOCK_LABEL_UNKNOWN
}

var File_api_order_v1_data_vendor_line_item_proto protoreflect.FileDescriptor

var file_api_order_v1_data_vendor_line_item_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x70, 0x69, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x13, 0x0a, 0x0e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a,
	0x02, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a,
	0x10, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x0e,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d,
	0x0a, 0x12, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x07, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x07,
	0x6c, 0x69, 0x6e, 0x65, 0x46, 0x65, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x34, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x1a, 0x4a, 0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x34, 0x0a, 0x11, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x1a, 0x89, 0x04, 0x0a, 0x07, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x6b, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x30, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x47,
	0x6d, 0x12, 0x41, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x8f, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x1a, 0x5f, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x32, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x1a, 0xaf, 0x04, 0x0a,
	0x05, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xcb,
	0x11, 0x0a, 0x13, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x01,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x07, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x07,
	0x6c, 0x69, 0x6e, 0x65, 0x46, 0x65, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x34, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x6b, 0x75, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x1a, 0x34, 0x0a, 0x11, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x1a, 0xa0, 0x0a, 0x0a, 0x05, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x78, 0x12, 0x30, 0x0a,
	0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x65, 0x65, 0x12,
	0x3a, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x62, 0x0a,
	0x12, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x46, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6b,
	0x75, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x6b, 0x75, 0x12, 0x49, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x1a, 0xae, 0x03, 0x0a, 0x07,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x33,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x12,
	0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x33, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x2a, 0xbd, 0x01, 0x0a,
	0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f,
	0x43, 0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x45, 0x4e, 0x44, 0x4f,
	0x52, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x41, 0x54,
	0x5f, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x45, 0x4e, 0x44, 0x4f,
	0x52, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x44, 0x10, 0x04, 0x42, 0xba, 0x01, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x42, 0x17, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x61, 0x72, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x67, 0x65, 0x61, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x73, 0x64, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x3b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x4f, 0x58, 0xaa,
	0x02, 0x0c, 0x41, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x0c, 0x41, 0x70, 0x69, 0x5c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18,
	0x41, 0x70, 0x69, 0x5c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x41, 0x70, 0x69, 0x3a, 0x3a,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_api_order_v1_data_vendor_line_item_proto_rawDescOnce sync.Once
	file_api_order_v1_data_vendor_line_item_proto_rawDescData []byte
)

func file_api_order_v1_data_vendor_line_item_proto_rawDescGZIP() []byte {
	file_api_order_v1_data_vendor_line_item_proto_rawDescOnce.Do(func() {
		file_api_order_v1_data_vendor_line_item_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_order_v1_data_vendor_line_item_proto_rawDesc), len(file_api_order_v1_data_vendor_line_item_proto_rawDesc)))
	})
	return file_api_order_v1_data_vendor_line_item_proto_rawDescData
}

var file_api_order_v1_data_vendor_line_item_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_order_v1_data_vendor_line_item_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_order_v1_data_vendor_line_item_proto_goTypes = []any{
	(VendorStockLabel)(0),                         // 0: api.order.v1.VendorStockLabel
	(*VendorLineItem)(nil),                        // 1: api.order.v1.VendorLineItem
	(*VendorOrderLineItem)(nil),                   // 2: api.order.v1.VendorOrderLineItem
	(*VendorLineItem_OriginOption)(nil),           // 3: api.order.v1.VendorLineItem.OriginOption
	(*VendorLineItem_FulfillmentOption)(nil),      // 4: api.order.v1.VendorLineItem.FulfillmentOption
	(*VendorLineItem_Variant)(nil),                // 5: api.order.v1.VendorLineItem.Variant
	(*VendorLineItem_Product)(nil),                // 6: api.order.v1.VendorLineItem.Product
	(*VendorLineItem_ProductPrintLocation)(nil),   // 7: api.order.v1.VendorLineItem.ProductPrintLocation
	(*VendorLineItem_ProductImage)(nil),           // 8: api.order.v1.VendorLineItem.ProductImage
	(*VendorLineItem_Short)(nil),                  // 9: api.order.v1.VendorLineItem.Short
	(*VendorOrderLineItem_FulfillmentOption)(nil), // 10: api.order.v1.VendorOrderLineItem.FulfillmentOption
	(*VendorOrderLineItem_Short)(nil),             // 11: api.order.v1.VendorOrderLineItem.Short
	(*VendorOrderLineItem_Short_Variant)(nil),     // 12: api.order.v1.VendorOrderLineItem.Short.Variant
	(*VendorPrintingOption)(nil),                  // 13: api.order.v1.VendorPrintingOption
	(*v1.Money)(nil),                              // 14: common.type.v1.Money
}
var file_api_order_v1_data_vendor_line_item_proto_depIdxs = []int32{
	13, // 0: api.order.v1.VendorLineItem.printing_options:type_name -> api.order.v1.VendorPrintingOption
	3,  // 1: api.order.v1.VendorLineItem.origin_options:type_name -> api.order.v1.VendorLineItem.OriginOption
	4,  // 2: api.order.v1.VendorLineItem.fulfillment_option:type_name -> api.order.v1.VendorLineItem.FulfillmentOption
	5,  // 3: api.order.v1.VendorLineItem.variant:type_name -> api.order.v1.VendorLineItem.Variant
	6,  // 4: api.order.v1.VendorLineItem.product:type_name -> api.order.v1.VendorLineItem.Product
	14, // 5: api.order.v1.VendorLineItem.item_price:type_name -> common.type.v1.Money
	14, // 6: api.order.v1.VendorLineItem.line_tax:type_name -> common.type.v1.Money
	14, // 7: api.order.v1.VendorLineItem.line_fee:type_name -> common.type.v1.Money
	14, // 8: api.order.v1.VendorLineItem.line_discount:type_name -> common.type.v1.Money
	14, // 9: api.order.v1.VendorLineItem.line_subtotal:type_name -> common.type.v1.Money
	14, // 10: api.order.v1.VendorLineItem.line_total:type_name -> common.type.v1.Money
	13, // 11: api.order.v1.VendorOrderLineItem.printing_options:type_name -> api.order.v1.VendorPrintingOption
	14, // 12: api.order.v1.VendorOrderLineItem.item_price:type_name -> common.type.v1.Money
	14, // 13: api.order.v1.VendorOrderLineItem.line_tax:type_name -> common.type.v1.Money
	14, // 14: api.order.v1.VendorOrderLineItem.line_fee:type_name -> common.type.v1.Money
	14, // 15: api.order.v1.VendorOrderLineItem.line_discount:type_name -> common.type.v1.Money
	14, // 16: api.order.v1.VendorOrderLineItem.line_subtotal:type_name -> common.type.v1.Money
	14, // 17: api.order.v1.VendorOrderLineItem.line_total:type_name -> common.type.v1.Money
	14, // 18: api.order.v1.VendorLineItem.Variant.price:type_name -> common.type.v1.Money
	14, // 19: api.order.v1.VendorLineItem.Variant.price_gm:type_name -> common.type.v1.Money
	8,  // 20: api.order.v1.VendorLineItem.Variant.images:type_name -> api.order.v1.VendorLineItem.ProductImage
	0,  // 21: api.order.v1.VendorLineItem.Variant.stock_label:type_name -> api.order.v1.VendorStockLabel
	8,  // 22: api.order.v1.VendorLineItem.Product.images:type_name -> api.order.v1.VendorLineItem.ProductImage
	7,  // 23: api.order.v1.VendorLineItem.Product.print_locations:type_name -> api.order.v1.VendorLineItem.ProductPrintLocation
	13, // 24: api.order.v1.VendorLineItem.Short.printing_options:type_name -> api.order.v1.VendorPrintingOption
	3,  // 25: api.order.v1.VendorLineItem.Short.origin_options:type_name -> api.order.v1.VendorLineItem.OriginOption
	4,  // 26: api.order.v1.VendorLineItem.Short.fulfillment_option:type_name -> api.order.v1.VendorLineItem.FulfillmentOption
	5,  // 27: api.order.v1.VendorLineItem.Short.variant:type_name -> api.order.v1.VendorLineItem.Variant
	6,  // 28: api.order.v1.VendorLineItem.Short.product:type_name -> api.order.v1.VendorLineItem.Product
	14, // 29: api.order.v1.VendorLineItem.Short.line_total:type_name -> common.type.v1.Money
	13, // 30: api.order.v1.VendorOrderLineItem.Short.printing_options:type_name -> api.order.v1.VendorPrintingOption
	14, // 31: api.order.v1.VendorOrderLineItem.Short.item_price:type_name -> common.type.v1.Money
	14, // 32: api.order.v1.VendorOrderLineItem.Short.line_tax:type_name -> common.type.v1.Money
	14, // 33: api.order.v1.VendorOrderLineItem.Short.line_fee:type_name -> common.type.v1.Money
	14, // 34: api.order.v1.VendorOrderLineItem.Short.line_discount:type_name -> common.type.v1.Money
	14, // 35: api.order.v1.VendorOrderLineItem.Short.line_subtotal:type_name -> common.type.v1.Money
	14, // 36: api.order.v1.VendorOrderLineItem.Short.line_total:type_name -> common.type.v1.Money
	10, // 37: api.order.v1.VendorOrderLineItem.Short.fulfillment_option:type_name -> api.order.v1.VendorOrderLineItem.FulfillmentOption
	12, // 38: api.order.v1.VendorOrderLineItem.Short.variant:type_name -> api.order.v1.VendorOrderLineItem.Short.Variant
	0,  // 39: api.order.v1.VendorOrderLineItem.Short.Variant.stock_label:type_name -> api.order.v1.VendorStockLabel
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_api_order_v1_data_vendor_line_item_proto_init() }
func file_api_order_v1_data_vendor_line_item_proto_init() {
	if File_api_order_v1_data_vendor_line_item_proto != nil {
		return
	}
	file_api_order_v1_data_vendor_printing_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_order_v1_data_vendor_line_item_proto_rawDesc), len(file_api_order_v1_data_vendor_line_item_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_order_v1_data_vendor_line_item_proto_goTypes,
		DependencyIndexes: file_api_order_v1_data_vendor_line_item_proto_depIdxs,
		EnumInfos:         file_api_order_v1_data_vendor_line_item_proto_enumTypes,
		MessageInfos:      file_api_order_v1_data_vendor_line_item_proto_msgTypes,
	}.Build()
	File_api_order_v1_data_vendor_line_item_proto = out.File
	file_api_order_v1_data_vendor_line_item_proto_goTypes = nil
	file_api_order_v1_data_vendor_line_item_proto_depIdxs = nil
}
