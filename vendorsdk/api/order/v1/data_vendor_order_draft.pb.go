// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/order/v1/data_vendor_order_draft.proto

package orderv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/gearment/gea-next/vendorsdk/common/option/v1"
	v1 "github.com/gearment/gea-next/vendorsdk/common/platform/v1"
	v11 "github.com/gearment/gea-next/vendorsdk/common/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VendorOrderDraftStatus int32

const (
	VendorOrderDraftStatus_VENDOR_ORDER_DRAFT_STATUS_UNKNOWN           VendorOrderDraftStatus = 0
	VendorOrderDraftStatus_VENDOR_ORDER_DRAFT_STATUS_ALL               VendorOrderDraftStatus = 1 // All statuses (used for filtering)
	VendorOrderDraftStatus_VENDOR_ORDER_DRAFT_STATUS_DRAFT             VendorOrderDraftStatus = 2 // Draft created, not ready for checkout
	VendorOrderDraftStatus_VENDOR_ORDER_DRAFT_STATUS_AWAITING_CHECKOUT VendorOrderDraftStatus = 3 // Ready for checkout
	VendorOrderDraftStatus_VENDOR_ORDER_DRAFT_STATUS_CHECKED_OUT       VendorOrderDraftStatus = 4 // Successfully checked out and converted to order
	VendorOrderDraftStatus_VENDOR_ORDER_DRAFT_STATUS_DELETED           VendorOrderDraftStatus = 5 // Draft deleted
	VendorOrderDraftStatus_VENDOR_ORDER_DRAFT_STATUS_ARCHIVED          VendorOrderDraftStatus = 6 // Draft archived
)

// Enum value maps for VendorOrderDraftStatus.
var (
	VendorOrderDraftStatus_name = map[int32]string{
		0: "VENDOR_ORDER_DRAFT_STATUS_UNKNOWN",
		1: "VENDOR_ORDER_DRAFT_STATUS_ALL",
		2: "VENDOR_ORDER_DRAFT_STATUS_DRAFT",
		3: "VENDOR_ORDER_DRAFT_STATUS_AWAITING_CHECKOUT",
		4: "VENDOR_ORDER_DRAFT_STATUS_CHECKED_OUT",
		5: "VENDOR_ORDER_DRAFT_STATUS_DELETED",
		6: "VENDOR_ORDER_DRAFT_STATUS_ARCHIVED",
	}
	VendorOrderDraftStatus_value = map[string]int32{
		"VENDOR_ORDER_DRAFT_STATUS_UNKNOWN":           0,
		"VENDOR_ORDER_DRAFT_STATUS_ALL":               1,
		"VENDOR_ORDER_DRAFT_STATUS_DRAFT":             2,
		"VENDOR_ORDER_DRAFT_STATUS_AWAITING_CHECKOUT": 3,
		"VENDOR_ORDER_DRAFT_STATUS_CHECKED_OUT":       4,
		"VENDOR_ORDER_DRAFT_STATUS_DELETED":           5,
		"VENDOR_ORDER_DRAFT_STATUS_ARCHIVED":          6,
	}
)

func (x VendorOrderDraftStatus) Enum() *VendorOrderDraftStatus {
	p := new(VendorOrderDraftStatus)
	*p = x
	return p
}

func (x VendorOrderDraftStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VendorOrderDraftStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_order_v1_data_vendor_order_draft_proto_enumTypes[0].Descriptor()
}

func (VendorOrderDraftStatus) Type() protoreflect.EnumType {
	return &file_api_order_v1_data_vendor_order_draft_proto_enumTypes[0]
}

func (x VendorOrderDraftStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VendorOrderDraftStatus.Descriptor instead.
func (VendorOrderDraftStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_draft_proto_rawDescGZIP(), []int{0}
}

type VendorOrderDraftCreatedMethod int32

const (
	VendorOrderDraftCreatedMethod_VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_UNKNOWN VendorOrderDraftCreatedMethod = 0
	VendorOrderDraftCreatedMethod_VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_PULL    VendorOrderDraftCreatedMethod = 1 // Created via store sync
	VendorOrderDraftCreatedMethod_VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_MANUAL  VendorOrderDraftCreatedMethod = 2 // Created manually
	VendorOrderDraftCreatedMethod_VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_API     VendorOrderDraftCreatedMethod = 3 // Created via API
	VendorOrderDraftCreatedMethod_VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_IMPORT  VendorOrderDraftCreatedMethod = 4 // Created via import
	VendorOrderDraftCreatedMethod_VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_LABEL   VendorOrderDraftCreatedMethod = 5 // Created with label
)

// Enum value maps for VendorOrderDraftCreatedMethod.
var (
	VendorOrderDraftCreatedMethod_name = map[int32]string{
		0: "VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_UNKNOWN",
		1: "VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_PULL",
		2: "VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_MANUAL",
		3: "VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_API",
		4: "VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_IMPORT",
		5: "VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_LABEL",
	}
	VendorOrderDraftCreatedMethod_value = map[string]int32{
		"VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_UNKNOWN": 0,
		"VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_PULL":    1,
		"VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_MANUAL":  2,
		"VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_API":     3,
		"VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_IMPORT":  4,
		"VENDOR_ORDER_DRAFT_CREATED_METHOD_FILTER_LABEL":   5,
	}
)

func (x VendorOrderDraftCreatedMethod) Enum() *VendorOrderDraftCreatedMethod {
	p := new(VendorOrderDraftCreatedMethod)
	*p = x
	return p
}

func (x VendorOrderDraftCreatedMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VendorOrderDraftCreatedMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_api_order_v1_data_vendor_order_draft_proto_enumTypes[1].Descriptor()
}

func (VendorOrderDraftCreatedMethod) Type() protoreflect.EnumType {
	return &file_api_order_v1_data_vendor_order_draft_proto_enumTypes[1]
}

func (x VendorOrderDraftCreatedMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VendorOrderDraftCreatedMethod.Descriptor instead.
func (VendorOrderDraftCreatedMethod) EnumDescriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_draft_proto_rawDescGZIP(), []int{1}
}

type VendorOrderDraft struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique draft order ID
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Team ID (your account ID)
	TeamId string `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Store ID this draft belongs to
	StoreId string `protobuf:"bytes,3,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	// Store name for display
	StoreName string `protobuf:"bytes,4,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	// Platform reference ID (deprecated, will be removed)
	PlatformRef string `protobuf:"bytes,5,opt,name=platform_ref,json=platformRef,proto3" json:"platform_ref,omitempty"` // will be deleted soon
	// Marketplace platform (Shopify, Etsy, WooCommerce, etc.)
	OrderPlatform v1.MarketplacePlatform `protobuf:"varint,6,opt,name=order_platform,json=orderPlatform,proto3,enum=common.platform.v1.MarketplacePlatform" json:"order_platform,omitempty"`
	// Import batch ID (if created via import)
	ImportId string `protobuf:"bytes,7,opt,name=import_id,json=importId,proto3" json:"import_id,omitempty"`
	// Store sync pull ID (if created via store sync)
	PullId string `protobuf:"bytes,8,opt,name=pull_id,json=pullId,proto3" json:"pull_id,omitempty"`
	// Request ID for tracking purposes
	RequestId string `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// How this draft was created (manual, API, store sync, import, etc.)
	CreatedMethod VendorCreatedMethod `protobuf:"varint,10,opt,name=created_method,json=createdMethod,proto3,enum=api.order.v1.VendorCreatedMethod" json:"created_method,omitempty"`
	// Fulfillment vendor (Gearment, etc.)
	FulfillmentVendor VendorFulfillmentVendor `protobuf:"varint,11,opt,name=fulfillment_vendor,json=fulfillmentVendor,proto3,enum=api.order.v1.VendorFulfillmentVendor" json:"fulfillment_vendor,omitempty"`
	// Fulfillment priority (standard, rush, etc.)
	Priority VendorFulfillmentPriority `protobuf:"varint,12,opt,name=priority,proto3,enum=api.order.v1.VendorFulfillmentPriority" json:"priority,omitempty"`
	// Fulfillment configuration options
	FulfillmentOption *VendorFulfillmentOption `protobuf:"bytes,13,opt,name=fulfillment_option,json=fulfillmentOption,proto3" json:"fulfillment_option,omitempty"`
	// Shipping method and carrier details
	ShippingOption *VendorShippingOption `protobuf:"bytes,14,opt,name=shipping_option,json=shippingOption,proto3" json:"shipping_option,omitempty"`
	// Billing and tax options (IOSS, etc.)
	BillingOption *VendorBillingOption `protobuf:"bytes,15,opt,name=billing_option,json=billingOption,proto3" json:"billing_option,omitempty"`
	// Original order date from marketplace
	OrderDate *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	// Current draft status
	Status VendorOrderDraftStatus `protobuf:"varint,17,opt,name=status,proto3,enum=api.order.v1.VendorOrderDraftStatus" json:"status,omitempty"`
	// Shipping label URLs (if pre-purchased)
	ShippingLabels []string `protobuf:"bytes,19,rep,name=shipping_labels,json=shippingLabels,proto3" json:"shipping_labels,omitempty"`
	// Whether shipping label is attached
	IsLabelAttached bool `protobuf:"varint,20,opt,name=is_label_attached,json=isLabelAttached,proto3" json:"is_label_attached,omitempty"`
	// Shipping address verification status
	ShippingVerificationStatus VendorShippingVerificationStatus `protobuf:"varint,21,opt,name=shipping_verification_status,json=shippingVerificationStatus,proto3,enum=api.order.v1.VendorShippingVerificationStatus" json:"shipping_verification_status,omitempty"`
	// Product matching status (matched/unmatched to catalog)
	ProductMatchingStatus VendorProductMatchingStatus `protobuf:"varint,22,opt,name=product_matching_status,json=productMatchingStatus,proto3,enum=api.order.v1.VendorProductMatchingStatus" json:"product_matching_status,omitempty"`
	// Whether shipping verification was manually bypassed
	IsShippingVerificationBypassed bool `protobuf:"varint,23,opt,name=is_shipping_verification_bypassed,json=isShippingVerificationBypassed,proto3" json:"is_shipping_verification_bypassed,omitempty"`
	// Whether this draft has been approved for checkout
	IsApproved bool `protobuf:"varint,24,opt,name=is_approved,json=isApproved,proto3" json:"is_approved,omitempty"`
	// When this draft was approved
	ApprovedAt *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=approved_at,json=approvedAt,proto3" json:"approved_at,omitempty"`
	// Original draft ID (if this is a revised version)
	OriginDraftId string `protobuf:"bytes,26,opt,name=origin_draft_id,json=originDraftId,proto3" json:"origin_draft_id,omitempty"`
	// Order ID this draft was converted to (if checked out)
	OriginOrderId string `protobuf:"bytes,27,opt,name=origin_order_id,json=originOrderId,proto3" json:"origin_order_id,omitempty"`
	// Shipping and billing addresses
	Addresses []*VendorAddress `protobuf:"bytes,28,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// All line items in this draft
	LineItems []*VendorLineItem `protobuf:"bytes,29,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	// Gift messages for this order
	GiftMessages []*VendorGiftMessage `protobuf:"bytes,30,rep,name=gift_messages,json=giftMessages,proto3" json:"gift_messages,omitempty"`
	// Legacy external ID (for OMS backward compatibility)
	LegacyExternalId string `protobuf:"bytes,31,opt,name=legacy_external_id,json=legacyExternalId,proto3" json:"legacy_external_id,omitempty"` // for oms order's external id
	// Subtotal (sum of all line items before fees/tax/discount)
	OrderSubtotal *v11.Money `protobuf:"bytes,34,opt,name=order_subtotal,json=orderSubtotal,proto3" json:"order_subtotal,omitempty"`
	// Shipping cost
	OrderShippingFee *v11.Money `protobuf:"bytes,35,opt,name=order_shipping_fee,json=orderShippingFee,proto3" json:"order_shipping_fee,omitempty"`
	// Order handling fee
	OrderHandleFee *v11.Money `protobuf:"bytes,36,opt,name=order_handle_fee,json=orderHandleFee,proto3" json:"order_handle_fee,omitempty"`
	// Total tax amount
	OrderTax *v11.Money `protobuf:"bytes,37,opt,name=order_tax,json=orderTax,proto3" json:"order_tax,omitempty"`
	// Additional processing fees
	OrderFee *v11.Money `protobuf:"bytes,38,opt,name=order_fee,json=orderFee,proto3" json:"order_fee,omitempty"`
	// Total discount applied
	OrderDiscount *v11.Money `protobuf:"bytes,39,opt,name=order_discount,json=orderDiscount,proto3" json:"order_discount,omitempty"`
	// Final total amount (subtotal + fees + tax - discount)
	OrderTotal *v11.Money `protobuf:"bytes,41,opt,name=order_total,json=orderTotal,proto3" json:"order_total,omitempty"`
	// Your custom reference ID
	ReferenceId   string `protobuf:"bytes,44,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorOrderDraft) Reset() {
	*x = VendorOrderDraft{}
	mi := &file_api_order_v1_data_vendor_order_draft_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorOrderDraft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrderDraft) ProtoMessage() {}

func (x *VendorOrderDraft) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_order_draft_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrderDraft.ProtoReflect.Descriptor instead.
func (*VendorOrderDraft) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_draft_proto_rawDescGZIP(), []int{0}
}

func (x *VendorOrderDraft) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *VendorOrderDraft) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *VendorOrderDraft) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *VendorOrderDraft) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *VendorOrderDraft) GetPlatformRef() string {
	if x != nil {
		return x.PlatformRef
	}
	return ""
}

func (x *VendorOrderDraft) GetOrderPlatform() v1.MarketplacePlatform {
	if x != nil {
		return x.OrderPlatform
	}
	return v1.MarketplacePlatform(0)
}

func (x *VendorOrderDraft) GetImportId() string {
	if x != nil {
		return x.ImportId
	}
	return ""
}

func (x *VendorOrderDraft) GetPullId() string {
	if x != nil {
		return x.PullId
	}
	return ""
}

func (x *VendorOrderDraft) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *VendorOrderDraft) GetCreatedMethod() VendorCreatedMethod {
	if x != nil {
		return x.CreatedMethod
	}
	return VendorCreatedMethod_VENDOR_CREATED_METHOD_UNKNOWN
}

func (x *VendorOrderDraft) GetFulfillmentVendor() VendorFulfillmentVendor {
	if x != nil {
		return x.FulfillmentVendor
	}
	return VendorFulfillmentVendor_VENDOR_FULFILLMENT_VENDOR_UNKNOWN
}

func (x *VendorOrderDraft) GetPriority() VendorFulfillmentPriority {
	if x != nil {
		return x.Priority
	}
	return VendorFulfillmentPriority_VENDOR_FULFILLMENT_PRIORITY_UNKNOWN
}

func (x *VendorOrderDraft) GetFulfillmentOption() *VendorFulfillmentOption {
	if x != nil {
		return x.FulfillmentOption
	}
	return nil
}

func (x *VendorOrderDraft) GetShippingOption() *VendorShippingOption {
	if x != nil {
		return x.ShippingOption
	}
	return nil
}

func (x *VendorOrderDraft) GetBillingOption() *VendorBillingOption {
	if x != nil {
		return x.BillingOption
	}
	return nil
}

func (x *VendorOrderDraft) GetOrderDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *VendorOrderDraft) GetStatus() VendorOrderDraftStatus {
	if x != nil {
		return x.Status
	}
	return VendorOrderDraftStatus_VENDOR_ORDER_DRAFT_STATUS_UNKNOWN
}

func (x *VendorOrderDraft) GetShippingLabels() []string {
	if x != nil {
		return x.ShippingLabels
	}
	return nil
}

func (x *VendorOrderDraft) GetIsLabelAttached() bool {
	if x != nil {
		return x.IsLabelAttached
	}
	return false
}

func (x *VendorOrderDraft) GetShippingVerificationStatus() VendorShippingVerificationStatus {
	if x != nil {
		return x.ShippingVerificationStatus
	}
	return VendorShippingVerificationStatus_VENDOR_SHIPPING_VERIFICATION_STATUS_UNKNOWN
}

func (x *VendorOrderDraft) GetProductMatchingStatus() VendorProductMatchingStatus {
	if x != nil {
		return x.ProductMatchingStatus
	}
	return VendorProductMatchingStatus_VENDOR_PRODUCT_MATCHING_STATUS_UNKNOWN
}

func (x *VendorOrderDraft) GetIsShippingVerificationBypassed() bool {
	if x != nil {
		return x.IsShippingVerificationBypassed
	}
	return false
}

func (x *VendorOrderDraft) GetIsApproved() bool {
	if x != nil {
		return x.IsApproved
	}
	return false
}

func (x *VendorOrderDraft) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *VendorOrderDraft) GetOriginDraftId() string {
	if x != nil {
		return x.OriginDraftId
	}
	return ""
}

func (x *VendorOrderDraft) GetOriginOrderId() string {
	if x != nil {
		return x.OriginOrderId
	}
	return ""
}

func (x *VendorOrderDraft) GetAddresses() []*VendorAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *VendorOrderDraft) GetLineItems() []*VendorLineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *VendorOrderDraft) GetGiftMessages() []*VendorGiftMessage {
	if x != nil {
		return x.GiftMessages
	}
	return nil
}

func (x *VendorOrderDraft) GetLegacyExternalId() string {
	if x != nil {
		return x.LegacyExternalId
	}
	return ""
}

func (x *VendorOrderDraft) GetOrderSubtotal() *v11.Money {
	if x != nil {
		return x.OrderSubtotal
	}
	return nil
}

func (x *VendorOrderDraft) GetOrderShippingFee() *v11.Money {
	if x != nil {
		return x.OrderShippingFee
	}
	return nil
}

func (x *VendorOrderDraft) GetOrderHandleFee() *v11.Money {
	if x != nil {
		return x.OrderHandleFee
	}
	return nil
}

func (x *VendorOrderDraft) GetOrderTax() *v11.Money {
	if x != nil {
		return x.OrderTax
	}
	return nil
}

func (x *VendorOrderDraft) GetOrderFee() *v11.Money {
	if x != nil {
		return x.OrderFee
	}
	return nil
}

func (x *VendorOrderDraft) GetOrderDiscount() *v11.Money {
	if x != nil {
		return x.OrderDiscount
	}
	return nil
}

func (x *VendorOrderDraft) GetOrderTotal() *v11.Money {
	if x != nil {
		return x.OrderTotal
	}
	return nil
}

func (x *VendorOrderDraft) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

type VendorOrderDraftFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter by specific order draft IDs
	OrderIds []string `protobuf:"bytes,1,rep,name=order_ids,json=orderIds,proto3" json:"order_ids,omitempty"`
	// Filter by draft statuses
	Statuses []VendorOrderDraftStatus `protobuf:"varint,2,rep,packed,name=statuses,proto3,enum=api.order.v1.VendorOrderDraftStatus" json:"statuses,omitempty"`
	// Filter by creation methods
	CreatedMethods []VendorCreatedMethod `protobuf:"varint,3,rep,packed,name=created_methods,json=createdMethods,proto3,enum=api.order.v1.VendorCreatedMethod" json:"created_methods,omitempty"`
	// Filter drafts created after this date (ISO 8601 format)
	CreatedAtMin *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at_min,json=createdAtMin,proto3" json:"created_at_min,omitempty"`
	// Filter drafts created before this date (ISO 8601 format)
	CreatedAtMax  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at_max,json=createdAtMax,proto3" json:"created_at_max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorOrderDraftFilter) Reset() {
	*x = VendorOrderDraftFilter{}
	mi := &file_api_order_v1_data_vendor_order_draft_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorOrderDraftFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrderDraftFilter) ProtoMessage() {}

func (x *VendorOrderDraftFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_order_draft_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrderDraftFilter.ProtoReflect.Descriptor instead.
func (*VendorOrderDraftFilter) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_draft_proto_rawDescGZIP(), []int{1}
}

func (x *VendorOrderDraftFilter) GetOrderIds() []string {
	if x != nil {
		return x.OrderIds
	}
	return nil
}

func (x *VendorOrderDraftFilter) GetStatuses() []VendorOrderDraftStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *VendorOrderDraftFilter) GetCreatedMethods() []VendorCreatedMethod {
	if x != nil {
		return x.CreatedMethods
	}
	return nil
}

func (x *VendorOrderDraftFilter) GetCreatedAtMin() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAtMin
	}
	return nil
}

func (x *VendorOrderDraftFilter) GetCreatedAtMax() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAtMax
	}
	return nil
}

type VendorOrderDraftCheckout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Draft ID to checkout
	DraftId string `protobuf:"bytes,1,opt,name=draft_id,json=draftId,proto3" json:"draft_id,omitempty"`
	// Order platform (Shopify, Etsy, WooCommerce, etc.)
	OrderPlatform v1.MarketplacePlatform `protobuf:"varint,2,opt,name=order_platform,json=orderPlatform,proto3,enum=common.platform.v1.MarketplacePlatform" json:"order_platform,omitempty"`
	// Platform reference ID
	PlatformRef string `protobuf:"bytes,3,opt,name=platform_ref,json=platformRef,proto3" json:"platform_ref,omitempty"`
	// Price quote for this order (includes all fees, taxes, totals)
	PriceQuote    *VendorOrderPriceCalculation_OrderPriceQuote `protobuf:"bytes,4,opt,name=price_quote,json=priceQuote,proto3" json:"price_quote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorOrderDraftCheckout) Reset() {
	*x = VendorOrderDraftCheckout{}
	mi := &file_api_order_v1_data_vendor_order_draft_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorOrderDraftCheckout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrderDraftCheckout) ProtoMessage() {}

func (x *VendorOrderDraftCheckout) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_order_draft_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrderDraftCheckout.ProtoReflect.Descriptor instead.
func (*VendorOrderDraftCheckout) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_draft_proto_rawDescGZIP(), []int{2}
}

func (x *VendorOrderDraftCheckout) GetDraftId() string {
	if x != nil {
		return x.DraftId
	}
	return ""
}

func (x *VendorOrderDraftCheckout) GetOrderPlatform() v1.MarketplacePlatform {
	if x != nil {
		return x.OrderPlatform
	}
	return v1.MarketplacePlatform(0)
}

func (x *VendorOrderDraftCheckout) GetPlatformRef() string {
	if x != nil {
		return x.PlatformRef
	}
	return ""
}

func (x *VendorOrderDraftCheckout) GetPriceQuote() *VendorOrderPriceCalculation_OrderPriceQuote {
	if x != nil {
		return x.PriceQuote
	}
	return nil
}

type VendorOrderDraft_Short struct {
	state                          protoimpl.MessageState           `protogen:"open.v1"`
	OrderId                        string                           `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	TeamId                         string                           `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	StoreId                        string                           `protobuf:"bytes,3,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	StoreName                      string                           `protobuf:"bytes,4,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	ReferenceId                    string                           `protobuf:"bytes,5,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	OrderPlatform                  v1.MarketplacePlatform           `protobuf:"varint,6,opt,name=order_platform,json=orderPlatform,proto3,enum=common.platform.v1.MarketplacePlatform" json:"order_platform,omitempty"`
	ImportId                       string                           `protobuf:"bytes,7,opt,name=import_id,json=importId,proto3" json:"import_id,omitempty"`
	PullId                         string                           `protobuf:"bytes,8,opt,name=pull_id,json=pullId,proto3" json:"pull_id,omitempty"`
	RequestId                      string                           `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CreatedMethod                  VendorCreatedMethod              `protobuf:"varint,10,opt,name=created_method,json=createdMethod,proto3,enum=api.order.v1.VendorCreatedMethod" json:"created_method,omitempty"`
	FulfillmentVendor              VendorFulfillmentVendor          `protobuf:"varint,11,opt,name=fulfillment_vendor,json=fulfillmentVendor,proto3,enum=api.order.v1.VendorFulfillmentVendor" json:"fulfillment_vendor,omitempty"`
	Priority                       VendorFulfillmentPriority        `protobuf:"varint,12,opt,name=priority,proto3,enum=api.order.v1.VendorFulfillmentPriority" json:"priority,omitempty"`
	FulfillmentOption              *VendorFulfillmentOption         `protobuf:"bytes,13,opt,name=fulfillment_option,json=fulfillmentOption,proto3" json:"fulfillment_option,omitempty"`
	ShippingOption                 *VendorShippingOption            `protobuf:"bytes,14,opt,name=shipping_option,json=shippingOption,proto3" json:"shipping_option,omitempty"`
	BillingOption                  *VendorBillingOption             `protobuf:"bytes,15,opt,name=billing_option,json=billingOption,proto3" json:"billing_option,omitempty"`
	OrderDate                      *timestamppb.Timestamp           `protobuf:"bytes,16,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	Status                         VendorOrderDraftStatus           `protobuf:"varint,17,opt,name=status,proto3,enum=api.order.v1.VendorOrderDraftStatus" json:"status,omitempty"`
	ShippingLabels                 []string                         `protobuf:"bytes,19,rep,name=shipping_labels,json=shippingLabels,proto3" json:"shipping_labels,omitempty"`
	IsLabelAttached                bool                             `protobuf:"varint,20,opt,name=is_label_attached,json=isLabelAttached,proto3" json:"is_label_attached,omitempty"`
	ShippingVerificationStatus     VendorShippingVerificationStatus `protobuf:"varint,21,opt,name=shipping_verification_status,json=shippingVerificationStatus,proto3,enum=api.order.v1.VendorShippingVerificationStatus" json:"shipping_verification_status,omitempty"`
	ProductMatchingStatus          VendorProductMatchingStatus      `protobuf:"varint,22,opt,name=product_matching_status,json=productMatchingStatus,proto3,enum=api.order.v1.VendorProductMatchingStatus" json:"product_matching_status,omitempty"`
	IsShippingVerificationBypassed bool                             `protobuf:"varint,23,opt,name=is_shipping_verification_bypassed,json=isShippingVerificationBypassed,proto3" json:"is_shipping_verification_bypassed,omitempty"`
	IsApproved                     bool                             `protobuf:"varint,24,opt,name=is_approved,json=isApproved,proto3" json:"is_approved,omitempty"`
	ApprovedAt                     *timestamppb.Timestamp           `protobuf:"bytes,25,opt,name=approved_at,json=approvedAt,proto3" json:"approved_at,omitempty"`
	OriginDraftId                  string                           `protobuf:"bytes,26,opt,name=origin_draft_id,json=originDraftId,proto3" json:"origin_draft_id,omitempty"`
	OriginOrderId                  string                           `protobuf:"bytes,27,opt,name=origin_order_id,json=originOrderId,proto3" json:"origin_order_id,omitempty"`
	Addresses                      []*VendorAddress                 `protobuf:"bytes,28,rep,name=addresses,proto3" json:"addresses,omitempty"`
	LineItems                      []*VendorLineItem_Short          `protobuf:"bytes,29,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	GiftMessages                   []*VendorGiftMessage             `protobuf:"bytes,30,rep,name=gift_messages,json=giftMessages,proto3" json:"gift_messages,omitempty"`
	LegacyExternalId               string                           `protobuf:"bytes,31,opt,name=legacy_external_id,json=legacyExternalId,proto3" json:"legacy_external_id,omitempty"` // for oms order's external id
	OrderTotal                     *v11.Money                       `protobuf:"bytes,34,opt,name=order_total,json=orderTotal,proto3" json:"order_total,omitempty"`
	OrderSubtotal                  *v11.Money                       `protobuf:"bytes,36,opt,name=order_subtotal,json=orderSubtotal,proto3" json:"order_subtotal,omitempty"`
	OrderShippingFee               *v11.Money                       `protobuf:"bytes,37,opt,name=order_shipping_fee,json=orderShippingFee,proto3" json:"order_shipping_fee,omitempty"`
	OrderHandleFee                 *v11.Money                       `protobuf:"bytes,38,opt,name=order_handle_fee,json=orderHandleFee,proto3" json:"order_handle_fee,omitempty"`
	OrderTax                       *v11.Money                       `protobuf:"bytes,39,opt,name=order_tax,json=orderTax,proto3" json:"order_tax,omitempty"`
	OrderFee                       *v11.Money                       `protobuf:"bytes,40,opt,name=order_fee,json=orderFee,proto3" json:"order_fee,omitempty"`
	OrderDiscount                  *v11.Money                       `protobuf:"bytes,41,opt,name=order_discount,json=orderDiscount,proto3" json:"order_discount,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *VendorOrderDraft_Short) Reset() {
	*x = VendorOrderDraft_Short{}
	mi := &file_api_order_v1_data_vendor_order_draft_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorOrderDraft_Short) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrderDraft_Short) ProtoMessage() {}

func (x *VendorOrderDraft_Short) ProtoReflect() protoreflect.Message {
	mi := &file_api_order_v1_data_vendor_order_draft_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrderDraft_Short.ProtoReflect.Descriptor instead.
func (*VendorOrderDraft_Short) Descriptor() ([]byte, []int) {
	return file_api_order_v1_data_vendor_order_draft_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VendorOrderDraft_Short) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *VendorOrderDraft_Short) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *VendorOrderDraft_Short) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *VendorOrderDraft_Short) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *VendorOrderDraft_Short) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *VendorOrderDraft_Short) GetOrderPlatform() v1.MarketplacePlatform {
	if x != nil {
		return x.OrderPlatform
	}
	return v1.MarketplacePlatform(0)
}

func (x *VendorOrderDraft_Short) GetImportId() string {
	if x != nil {
		return x.ImportId
	}
	return ""
}

func (x *VendorOrderDraft_Short) GetPullId() string {
	if x != nil {
		return x.PullId
	}
	return ""
}

func (x *VendorOrderDraft_Short) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *VendorOrderDraft_Short) GetCreatedMethod() VendorCreatedMethod {
	if x != nil {
		return x.CreatedMethod
	}
	return VendorCreatedMethod_VENDOR_CREATED_METHOD_UNKNOWN
}

func (x *VendorOrderDraft_Short) GetFulfillmentVendor() VendorFulfillmentVendor {
	if x != nil {
		return x.FulfillmentVendor
	}
	return VendorFulfillmentVendor_VENDOR_FULFILLMENT_VENDOR_UNKNOWN
}

func (x *VendorOrderDraft_Short) GetPriority() VendorFulfillmentPriority {
	if x != nil {
		return x.Priority
	}
	return VendorFulfillmentPriority_VENDOR_FULFILLMENT_PRIORITY_UNKNOWN
}

func (x *VendorOrderDraft_Short) GetFulfillmentOption() *VendorFulfillmentOption {
	if x != nil {
		return x.FulfillmentOption
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetShippingOption() *VendorShippingOption {
	if x != nil {
		return x.ShippingOption
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetBillingOption() *VendorBillingOption {
	if x != nil {
		return x.BillingOption
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetOrderDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetStatus() VendorOrderDraftStatus {
	if x != nil {
		return x.Status
	}
	return VendorOrderDraftStatus_VENDOR_ORDER_DRAFT_STATUS_UNKNOWN
}

func (x *VendorOrderDraft_Short) GetShippingLabels() []string {
	if x != nil {
		return x.ShippingLabels
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetIsLabelAttached() bool {
	if x != nil {
		return x.IsLabelAttached
	}
	return false
}

func (x *VendorOrderDraft_Short) GetShippingVerificationStatus() VendorShippingVerificationStatus {
	if x != nil {
		return x.ShippingVerificationStatus
	}
	return VendorShippingVerificationStatus_VENDOR_SHIPPING_VERIFICATION_STATUS_UNKNOWN
}

func (x *VendorOrderDraft_Short) GetProductMatchingStatus() VendorProductMatchingStatus {
	if x != nil {
		return x.ProductMatchingStatus
	}
	return VendorProductMatchingStatus_VENDOR_PRODUCT_MATCHING_STATUS_UNKNOWN
}

func (x *VendorOrderDraft_Short) GetIsShippingVerificationBypassed() bool {
	if x != nil {
		return x.IsShippingVerificationBypassed
	}
	return false
}

func (x *VendorOrderDraft_Short) GetIsApproved() bool {
	if x != nil {
		return x.IsApproved
	}
	return false
}

func (x *VendorOrderDraft_Short) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetOriginDraftId() string {
	if x != nil {
		return x.OriginDraftId
	}
	return ""
}

func (x *VendorOrderDraft_Short) GetOriginOrderId() string {
	if x != nil {
		return x.OriginOrderId
	}
	return ""
}

func (x *VendorOrderDraft_Short) GetAddresses() []*VendorAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetLineItems() []*VendorLineItem_Short {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetGiftMessages() []*VendorGiftMessage {
	if x != nil {
		return x.GiftMessages
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetLegacyExternalId() string {
	if x != nil {
		return x.LegacyExternalId
	}
	return ""
}

func (x *VendorOrderDraft_Short) GetOrderTotal() *v11.Money {
	if x != nil {
		return x.OrderTotal
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetOrderSubtotal() *v11.Money {
	if x != nil {
		return x.OrderSubtotal
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetOrderShippingFee() *v11.Money {
	if x != nil {
		return x.OrderShippingFee
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetOrderHandleFee() *v11.Money {
	if x != nil {
		return x.OrderHandleFee
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetOrderTax() *v11.Money {
	if x != nil {
		return x.OrderTax
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetOrderFee() *v11.Money {
	if x != nil {
		return x.OrderFee
	}
	return nil
}

func (x *VendorOrderDraft_Short) GetOrderDiscount() *v11.Money {
	if x != nil {
		return x.OrderDiscount
	}
	return nil
}

var File_api_order_v1_data_vendor_order_draft_proto protoreflect.FileDescriptor

var file_api_order_v1_data_vendor_order_draft_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x26, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x26, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x21, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x4e, 0x0a, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0d, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x48, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x54, 0x0a, 0x12, 0x66, 0x75,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x11, 0x66,
	0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x70, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1e, 0x69, 0x73, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c,
	0x67, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x10, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x3f, 0x0a,
	0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x65, 0x65, 0x12, 0x32,
	0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x61, 0x78, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a,
	0xd7, 0x10, 0x0a, 0x05, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x48, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x54, 0x0a, 0x12, 0x66, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x11, 0x66, 0x75,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x43, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x70, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x61, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1e, 0x69, 0x73, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x67,
	0x69, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x65, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x78, 0x12,
	0x32, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x4a, 0x04, 0x08, 0x20, 0x10, 0x21, 0x4a, 0x04, 0x08,
	0x21, 0x10, 0x22, 0x4a, 0x04, 0x08, 0x23, 0x10, 0x24, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x4a,
	0x04, 0x08, 0x20, 0x10, 0x21, 0x4a, 0x04, 0x08, 0x21, 0x10, 0x22, 0x4a, 0x04, 0x08, 0x2a, 0x10,
	0x2b, 0x4a, 0x04, 0x08, 0x2b, 0x10, 0x2c, 0x22, 0x84, 0x03, 0x0a, 0x16, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x48, 0x1a, 0x92, 0x01, 0x17, 0x22, 0x15, 0x72,
	0x13, 0x10, 0x01, 0x18, 0x64, 0x92, 0x02, 0x0c, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x61, 0x62,
	0x63, 0x31, 0x32, 0x33, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x4f,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x59, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0d, 0xba, 0x48, 0x0a,
	0x92, 0x01, 0x07, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x61, 0x78, 0x22, 0x84,
	0x02, 0x0a, 0x18, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x2a, 0xb2, 0x02, 0x0a, 0x16, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x21, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x45, 0x4e, 0x44, 0x4f,
	0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x45,
	0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x02, 0x12,
	0x2f, 0x0a, 0x2b, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x44, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x4f, 0x55, 0x54, 0x10, 0x03,
	0x12, 0x29, 0x0a, 0x25, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x56,
	0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x41, 0x46,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x9b, 0x03, 0x0a, 0x1d, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x30,
	0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x1a, 0x0b, 0xa2, 0xc0, 0x02, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12,
	0x3b, 0x0a, 0x2d, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x44, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x4c, 0x4c,
	0x10, 0x01, 0x1a, 0x08, 0xa2, 0xc0, 0x02, 0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x2f,
	0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10,
	0x02, 0x1a, 0x0a, 0xa2, 0xc0, 0x02, 0x06, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x39, 0x0a,
	0x2c, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x52,
	0x41, 0x46, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x49, 0x10, 0x03, 0x1a,
	0x07, 0xa2, 0xc0, 0x02, 0x03, 0x41, 0x50, 0x49, 0x12, 0x3f, 0x0a, 0x2f, 0x56, 0x45, 0x4e, 0x44,
	0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x1a, 0x0a, 0xa2,
	0xc0, 0x02, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x2e, 0x56, 0x45, 0x4e,
	0x44, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x05, 0x1a, 0x09, 0xa2,
	0xc0, 0x02, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0xbc, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x19, 0x44,
	0x61, 0x74, 0x61, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x61, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x67, 0x65, 0x61, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73,
	0x64, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x4f, 0x58, 0xaa, 0x02, 0x0c,
	0x41, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x41,
	0x70, 0x69, 0x5c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x41, 0x70,
	0x69, 0x5c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_order_v1_data_vendor_order_draft_proto_rawDescOnce sync.Once
	file_api_order_v1_data_vendor_order_draft_proto_rawDescData []byte
)

func file_api_order_v1_data_vendor_order_draft_proto_rawDescGZIP() []byte {
	file_api_order_v1_data_vendor_order_draft_proto_rawDescOnce.Do(func() {
		file_api_order_v1_data_vendor_order_draft_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_order_v1_data_vendor_order_draft_proto_rawDesc), len(file_api_order_v1_data_vendor_order_draft_proto_rawDesc)))
	})
	return file_api_order_v1_data_vendor_order_draft_proto_rawDescData
}

var file_api_order_v1_data_vendor_order_draft_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_order_v1_data_vendor_order_draft_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_api_order_v1_data_vendor_order_draft_proto_goTypes = []any{
	(VendorOrderDraftStatus)(0),                         // 0: api.order.v1.VendorOrderDraftStatus
	(VendorOrderDraftCreatedMethod)(0),                  // 1: api.order.v1.VendorOrderDraftCreatedMethod
	(*VendorOrderDraft)(nil),                            // 2: api.order.v1.VendorOrderDraft
	(*VendorOrderDraftFilter)(nil),                      // 3: api.order.v1.VendorOrderDraftFilter
	(*VendorOrderDraftCheckout)(nil),                    // 4: api.order.v1.VendorOrderDraftCheckout
	(*VendorOrderDraft_Short)(nil),                      // 5: api.order.v1.VendorOrderDraft.Short
	(v1.MarketplacePlatform)(0),                         // 6: common.platform.v1.MarketplacePlatform
	(VendorCreatedMethod)(0),                            // 7: api.order.v1.VendorCreatedMethod
	(VendorFulfillmentVendor)(0),                        // 8: api.order.v1.VendorFulfillmentVendor
	(VendorFulfillmentPriority)(0),                      // 9: api.order.v1.VendorFulfillmentPriority
	(*VendorFulfillmentOption)(nil),                     // 10: api.order.v1.VendorFulfillmentOption
	(*VendorShippingOption)(nil),                        // 11: api.order.v1.VendorShippingOption
	(*VendorBillingOption)(nil),                         // 12: api.order.v1.VendorBillingOption
	(*timestamppb.Timestamp)(nil),                       // 13: google.protobuf.Timestamp
	(VendorShippingVerificationStatus)(0),               // 14: api.order.v1.VendorShippingVerificationStatus
	(VendorProductMatchingStatus)(0),                    // 15: api.order.v1.VendorProductMatchingStatus
	(*VendorAddress)(nil),                               // 16: api.order.v1.VendorAddress
	(*VendorLineItem)(nil),                              // 17: api.order.v1.VendorLineItem
	(*VendorGiftMessage)(nil),                           // 18: api.order.v1.VendorGiftMessage
	(*v11.Money)(nil),                                   // 19: common.type.v1.Money
	(*VendorOrderPriceCalculation_OrderPriceQuote)(nil), // 20: api.order.v1.VendorOrderPriceCalculation.OrderPriceQuote
	(*VendorLineItem_Short)(nil),                        // 21: api.order.v1.VendorLineItem.Short
}
var file_api_order_v1_data_vendor_order_draft_proto_depIdxs = []int32{
	6,  // 0: api.order.v1.VendorOrderDraft.order_platform:type_name -> common.platform.v1.MarketplacePlatform
	7,  // 1: api.order.v1.VendorOrderDraft.created_method:type_name -> api.order.v1.VendorCreatedMethod
	8,  // 2: api.order.v1.VendorOrderDraft.fulfillment_vendor:type_name -> api.order.v1.VendorFulfillmentVendor
	9,  // 3: api.order.v1.VendorOrderDraft.priority:type_name -> api.order.v1.VendorFulfillmentPriority
	10, // 4: api.order.v1.VendorOrderDraft.fulfillment_option:type_name -> api.order.v1.VendorFulfillmentOption
	11, // 5: api.order.v1.VendorOrderDraft.shipping_option:type_name -> api.order.v1.VendorShippingOption
	12, // 6: api.order.v1.VendorOrderDraft.billing_option:type_name -> api.order.v1.VendorBillingOption
	13, // 7: api.order.v1.VendorOrderDraft.order_date:type_name -> google.protobuf.Timestamp
	0,  // 8: api.order.v1.VendorOrderDraft.status:type_name -> api.order.v1.VendorOrderDraftStatus
	14, // 9: api.order.v1.VendorOrderDraft.shipping_verification_status:type_name -> api.order.v1.VendorShippingVerificationStatus
	15, // 10: api.order.v1.VendorOrderDraft.product_matching_status:type_name -> api.order.v1.VendorProductMatchingStatus
	13, // 11: api.order.v1.VendorOrderDraft.approved_at:type_name -> google.protobuf.Timestamp
	16, // 12: api.order.v1.VendorOrderDraft.addresses:type_name -> api.order.v1.VendorAddress
	17, // 13: api.order.v1.VendorOrderDraft.line_items:type_name -> api.order.v1.VendorLineItem
	18, // 14: api.order.v1.VendorOrderDraft.gift_messages:type_name -> api.order.v1.VendorGiftMessage
	19, // 15: api.order.v1.VendorOrderDraft.order_subtotal:type_name -> common.type.v1.Money
	19, // 16: api.order.v1.VendorOrderDraft.order_shipping_fee:type_name -> common.type.v1.Money
	19, // 17: api.order.v1.VendorOrderDraft.order_handle_fee:type_name -> common.type.v1.Money
	19, // 18: api.order.v1.VendorOrderDraft.order_tax:type_name -> common.type.v1.Money
	19, // 19: api.order.v1.VendorOrderDraft.order_fee:type_name -> common.type.v1.Money
	19, // 20: api.order.v1.VendorOrderDraft.order_discount:type_name -> common.type.v1.Money
	19, // 21: api.order.v1.VendorOrderDraft.order_total:type_name -> common.type.v1.Money
	0,  // 22: api.order.v1.VendorOrderDraftFilter.statuses:type_name -> api.order.v1.VendorOrderDraftStatus
	7,  // 23: api.order.v1.VendorOrderDraftFilter.created_methods:type_name -> api.order.v1.VendorCreatedMethod
	13, // 24: api.order.v1.VendorOrderDraftFilter.created_at_min:type_name -> google.protobuf.Timestamp
	13, // 25: api.order.v1.VendorOrderDraftFilter.created_at_max:type_name -> google.protobuf.Timestamp
	6,  // 26: api.order.v1.VendorOrderDraftCheckout.order_platform:type_name -> common.platform.v1.MarketplacePlatform
	20, // 27: api.order.v1.VendorOrderDraftCheckout.price_quote:type_name -> api.order.v1.VendorOrderPriceCalculation.OrderPriceQuote
	6,  // 28: api.order.v1.VendorOrderDraft.Short.order_platform:type_name -> common.platform.v1.MarketplacePlatform
	7,  // 29: api.order.v1.VendorOrderDraft.Short.created_method:type_name -> api.order.v1.VendorCreatedMethod
	8,  // 30: api.order.v1.VendorOrderDraft.Short.fulfillment_vendor:type_name -> api.order.v1.VendorFulfillmentVendor
	9,  // 31: api.order.v1.VendorOrderDraft.Short.priority:type_name -> api.order.v1.VendorFulfillmentPriority
	10, // 32: api.order.v1.VendorOrderDraft.Short.fulfillment_option:type_name -> api.order.v1.VendorFulfillmentOption
	11, // 33: api.order.v1.VendorOrderDraft.Short.shipping_option:type_name -> api.order.v1.VendorShippingOption
	12, // 34: api.order.v1.VendorOrderDraft.Short.billing_option:type_name -> api.order.v1.VendorBillingOption
	13, // 35: api.order.v1.VendorOrderDraft.Short.order_date:type_name -> google.protobuf.Timestamp
	0,  // 36: api.order.v1.VendorOrderDraft.Short.status:type_name -> api.order.v1.VendorOrderDraftStatus
	14, // 37: api.order.v1.VendorOrderDraft.Short.shipping_verification_status:type_name -> api.order.v1.VendorShippingVerificationStatus
	15, // 38: api.order.v1.VendorOrderDraft.Short.product_matching_status:type_name -> api.order.v1.VendorProductMatchingStatus
	13, // 39: api.order.v1.VendorOrderDraft.Short.approved_at:type_name -> google.protobuf.Timestamp
	16, // 40: api.order.v1.VendorOrderDraft.Short.addresses:type_name -> api.order.v1.VendorAddress
	21, // 41: api.order.v1.VendorOrderDraft.Short.line_items:type_name -> api.order.v1.VendorLineItem.Short
	18, // 42: api.order.v1.VendorOrderDraft.Short.gift_messages:type_name -> api.order.v1.VendorGiftMessage
	19, // 43: api.order.v1.VendorOrderDraft.Short.order_total:type_name -> common.type.v1.Money
	19, // 44: api.order.v1.VendorOrderDraft.Short.order_subtotal:type_name -> common.type.v1.Money
	19, // 45: api.order.v1.VendorOrderDraft.Short.order_shipping_fee:type_name -> common.type.v1.Money
	19, // 46: api.order.v1.VendorOrderDraft.Short.order_handle_fee:type_name -> common.type.v1.Money
	19, // 47: api.order.v1.VendorOrderDraft.Short.order_tax:type_name -> common.type.v1.Money
	19, // 48: api.order.v1.VendorOrderDraft.Short.order_fee:type_name -> common.type.v1.Money
	19, // 49: api.order.v1.VendorOrderDraft.Short.order_discount:type_name -> common.type.v1.Money
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_api_order_v1_data_vendor_order_draft_proto_init() }
func file_api_order_v1_data_vendor_order_draft_proto_init() {
	if File_api_order_v1_data_vendor_order_draft_proto != nil {
		return
	}
	file_api_order_v1_data_vendor_address_proto_init()
	file_api_order_v1_data_vendor_billing_proto_init()
	file_api_order_v1_data_vendor_created_method_proto_init()
	file_api_order_v1_data_vendor_fulfillment_proto_init()
	file_api_order_v1_data_vendor_gift_message_proto_init()
	file_api_order_v1_data_vendor_line_item_proto_init()
	file_api_order_v1_data_vendor_order_price_proto_init()
	file_api_order_v1_data_vendor_printing_proto_init()
	file_api_order_v1_data_vendor_product_matching_proto_init()
	file_api_order_v1_data_vendor_shipping_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_order_v1_data_vendor_order_draft_proto_rawDesc), len(file_api_order_v1_data_vendor_order_draft_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_order_v1_data_vendor_order_draft_proto_goTypes,
		DependencyIndexes: file_api_order_v1_data_vendor_order_draft_proto_depIdxs,
		EnumInfos:         file_api_order_v1_data_vendor_order_draft_proto_enumTypes,
		MessageInfos:      file_api_order_v1_data_vendor_order_draft_proto_msgTypes,
	}.Build()
	File_api_order_v1_data_vendor_order_draft_proto = out.File
	file_api_order_v1_data_vendor_order_draft_proto_goTypes = nil
	file_api_order_v1_data_vendor_order_draft_proto_depIdxs = nil
}
