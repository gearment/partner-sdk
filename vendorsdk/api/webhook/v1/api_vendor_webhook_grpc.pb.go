// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/webhook/v1/api_vendor_webhook.proto

package webhookv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VendorWebhookAPI_VendorListWebhook_FullMethodName   = "/api.webhook.v1.VendorWebhookAPI/VendorListWebhook"
	VendorWebhookAPI_VendorCreateWebhook_FullMethodName = "/api.webhook.v1.VendorWebhookAPI/VendorCreateWebhook"
	VendorWebhookAPI_VendorDeleteWebhook_FullMethodName = "/api.webhook.v1.VendorWebhookAPI/VendorDeleteWebhook"
)

// VendorWebhookAPIClient is the client API for VendorWebhookAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VendorWebhookAPI provides webhook management for real-time event notifications.
// Register webhooks to receive automated notifications when orders are completed, cancelled, or tracking is updated.
//
// Base URL: https://api.gearment.com/
// Authentication: API Key (header: X-API-Key, X-API-Secret)
type VendorWebhookAPIClient interface {
	// List all registered webhooks
	//
	// GET /api/v3/webhooks
	//
	// Returns:
	//   - All registered webhooks for your account
	//   - Webhook status (active/inactive)
	//   - Event topics subscribed
	//   - Delivery URLs
	//
	// Use cases:
	//   - Audit webhook configurations
	//   - Verify webhook setup
	//   - List active event subscriptions
	VendorListWebhook(ctx context.Context, in *VendorListWebhookRequest, opts ...grpc.CallOption) (*VendorListWebhookResponse, error)
	// Register a new webhook for event notifications
	//
	// POST /api/v3/webhooks
	// Content-Type: application/json
	//
	// Available topics:
	//   - VENDOR_WEBHOOK_TOPIC_ORDER_COMPLETED: Order fulfillment completed
	//   - VENDOR_WEBHOOK_TOPIC_ORDER_CANCELED: Order was cancelled
	//   - VENDOR_WEBHOOK_TOPIC_TRACKING_UPDATED: Shipping tracking updated
	//   - VENDOR_WEBHOOK_TOPIC_ADDRESS_UNVERIFIED: Shipping address validation failed
	//
	// Security:
	//   - Webhooks are sent via HTTPS POST
	//   - Include signature header for verification
	//   - Must respond with 200 OK within 30 seconds
	//
	// Use cases:
	//   - Automate order status updates
	//   - Sync tracking information
	//   - Alert customers of shipment
	VendorCreateWebhook(ctx context.Context, in *VendorCreateWebhookRequest, opts ...grpc.CallOption) (*VendorCreateWebhookResponse, error)
	// Delete a webhook subscription
	//
	// DELETE /api/v3/webhooks/{webhook_id}
	//
	// Use cases:
	//   - Remove unused webhooks
	//   - Update webhook configuration (delete + recreate)
	VendorDeleteWebhook(ctx context.Context, in *VendorDeleteWebhookRequest, opts ...grpc.CallOption) (*VendorDeleteWebhookResponse, error)
}

type vendorWebhookAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorWebhookAPIClient(cc grpc.ClientConnInterface) VendorWebhookAPIClient {
	return &vendorWebhookAPIClient{cc}
}

func (c *vendorWebhookAPIClient) VendorListWebhook(ctx context.Context, in *VendorListWebhookRequest, opts ...grpc.CallOption) (*VendorListWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorListWebhookResponse)
	err := c.cc.Invoke(ctx, VendorWebhookAPI_VendorListWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorWebhookAPIClient) VendorCreateWebhook(ctx context.Context, in *VendorCreateWebhookRequest, opts ...grpc.CallOption) (*VendorCreateWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorCreateWebhookResponse)
	err := c.cc.Invoke(ctx, VendorWebhookAPI_VendorCreateWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorWebhookAPIClient) VendorDeleteWebhook(ctx context.Context, in *VendorDeleteWebhookRequest, opts ...grpc.CallOption) (*VendorDeleteWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorDeleteWebhookResponse)
	err := c.cc.Invoke(ctx, VendorWebhookAPI_VendorDeleteWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorWebhookAPIServer is the server API for VendorWebhookAPI service.
// All implementations should embed UnimplementedVendorWebhookAPIServer
// for forward compatibility.
//
// VendorWebhookAPI provides webhook management for real-time event notifications.
// Register webhooks to receive automated notifications when orders are completed, cancelled, or tracking is updated.
//
// Base URL: https://api.gearment.com/
// Authentication: API Key (header: X-API-Key, X-API-Secret)
type VendorWebhookAPIServer interface {
	// List all registered webhooks
	//
	// GET /api/v3/webhooks
	//
	// Returns:
	//   - All registered webhooks for your account
	//   - Webhook status (active/inactive)
	//   - Event topics subscribed
	//   - Delivery URLs
	//
	// Use cases:
	//   - Audit webhook configurations
	//   - Verify webhook setup
	//   - List active event subscriptions
	VendorListWebhook(context.Context, *VendorListWebhookRequest) (*VendorListWebhookResponse, error)
	// Register a new webhook for event notifications
	//
	// POST /api/v3/webhooks
	// Content-Type: application/json
	//
	// Available topics:
	//   - VENDOR_WEBHOOK_TOPIC_ORDER_COMPLETED: Order fulfillment completed
	//   - VENDOR_WEBHOOK_TOPIC_ORDER_CANCELED: Order was cancelled
	//   - VENDOR_WEBHOOK_TOPIC_TRACKING_UPDATED: Shipping tracking updated
	//   - VENDOR_WEBHOOK_TOPIC_ADDRESS_UNVERIFIED: Shipping address validation failed
	//
	// Security:
	//   - Webhooks are sent via HTTPS POST
	//   - Include signature header for verification
	//   - Must respond with 200 OK within 30 seconds
	//
	// Use cases:
	//   - Automate order status updates
	//   - Sync tracking information
	//   - Alert customers of shipment
	VendorCreateWebhook(context.Context, *VendorCreateWebhookRequest) (*VendorCreateWebhookResponse, error)
	// Delete a webhook subscription
	//
	// DELETE /api/v3/webhooks/{webhook_id}
	//
	// Use cases:
	//   - Remove unused webhooks
	//   - Update webhook configuration (delete + recreate)
	VendorDeleteWebhook(context.Context, *VendorDeleteWebhookRequest) (*VendorDeleteWebhookResponse, error)
}

// UnimplementedVendorWebhookAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVendorWebhookAPIServer struct{}

func (UnimplementedVendorWebhookAPIServer) VendorListWebhook(context.Context, *VendorListWebhookRequest) (*VendorListWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VendorListWebhook not implemented")
}
func (UnimplementedVendorWebhookAPIServer) VendorCreateWebhook(context.Context, *VendorCreateWebhookRequest) (*VendorCreateWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VendorCreateWebhook not implemented")
}
func (UnimplementedVendorWebhookAPIServer) VendorDeleteWebhook(context.Context, *VendorDeleteWebhookRequest) (*VendorDeleteWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VendorDeleteWebhook not implemented")
}
func (UnimplementedVendorWebhookAPIServer) testEmbeddedByValue() {}

// UnsafeVendorWebhookAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VendorWebhookAPIServer will
// result in compilation errors.
type UnsafeVendorWebhookAPIServer interface {
	mustEmbedUnimplementedVendorWebhookAPIServer()
}

func RegisterVendorWebhookAPIServer(s grpc.ServiceRegistrar, srv VendorWebhookAPIServer) {
	// If the following call pancis, it indicates UnimplementedVendorWebhookAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VendorWebhookAPI_ServiceDesc, srv)
}

func _VendorWebhookAPI_VendorListWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorListWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorWebhookAPIServer).VendorListWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorWebhookAPI_VendorListWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorWebhookAPIServer).VendorListWebhook(ctx, req.(*VendorListWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorWebhookAPI_VendorCreateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorCreateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorWebhookAPIServer).VendorCreateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorWebhookAPI_VendorCreateWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorWebhookAPIServer).VendorCreateWebhook(ctx, req.(*VendorCreateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorWebhookAPI_VendorDeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorDeleteWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorWebhookAPIServer).VendorDeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorWebhookAPI_VendorDeleteWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorWebhookAPIServer).VendorDeleteWebhook(ctx, req.(*VendorDeleteWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VendorWebhookAPI_ServiceDesc is the grpc.ServiceDesc for VendorWebhookAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VendorWebhookAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.webhook.v1.VendorWebhookAPI",
	HandlerType: (*VendorWebhookAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VendorListWebhook",
			Handler:    _VendorWebhookAPI_VendorListWebhook_Handler,
		},
		{
			MethodName: "VendorCreateWebhook",
			Handler:    _VendorWebhookAPI_VendorCreateWebhook_Handler,
		},
		{
			MethodName: "VendorDeleteWebhook",
			Handler:    _VendorWebhookAPI_VendorDeleteWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/webhook/v1/api_vendor_webhook.proto",
}

const (
	LegacyVendorWebhookAPI_LegacyVendorCreateWebhook_FullMethodName = "/api.webhook.v1.LegacyVendorWebhookAPI/LegacyVendorCreateWebhook"
)

// LegacyVendorWebhookAPIClient is the client API for LegacyVendorWebhookAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LegacyVendorWebhookAPI provide an abstraction to support the legacy api call format
type LegacyVendorWebhookAPIClient interface {
	LegacyVendorCreateWebhook(ctx context.Context, in *LegacyVendorCreateWebhookRequest, opts ...grpc.CallOption) (*LegacyVendorCreateWebhookResponse, error)
}

type legacyVendorWebhookAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLegacyVendorWebhookAPIClient(cc grpc.ClientConnInterface) LegacyVendorWebhookAPIClient {
	return &legacyVendorWebhookAPIClient{cc}
}

func (c *legacyVendorWebhookAPIClient) LegacyVendorCreateWebhook(ctx context.Context, in *LegacyVendorCreateWebhookRequest, opts ...grpc.CallOption) (*LegacyVendorCreateWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LegacyVendorCreateWebhookResponse)
	err := c.cc.Invoke(ctx, LegacyVendorWebhookAPI_LegacyVendorCreateWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LegacyVendorWebhookAPIServer is the server API for LegacyVendorWebhookAPI service.
// All implementations should embed UnimplementedLegacyVendorWebhookAPIServer
// for forward compatibility.
//
// LegacyVendorWebhookAPI provide an abstraction to support the legacy api call format
type LegacyVendorWebhookAPIServer interface {
	LegacyVendorCreateWebhook(context.Context, *LegacyVendorCreateWebhookRequest) (*LegacyVendorCreateWebhookResponse, error)
}

// UnimplementedLegacyVendorWebhookAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLegacyVendorWebhookAPIServer struct{}

func (UnimplementedLegacyVendorWebhookAPIServer) LegacyVendorCreateWebhook(context.Context, *LegacyVendorCreateWebhookRequest) (*LegacyVendorCreateWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegacyVendorCreateWebhook not implemented")
}
func (UnimplementedLegacyVendorWebhookAPIServer) testEmbeddedByValue() {}

// UnsafeLegacyVendorWebhookAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LegacyVendorWebhookAPIServer will
// result in compilation errors.
type UnsafeLegacyVendorWebhookAPIServer interface {
	mustEmbedUnimplementedLegacyVendorWebhookAPIServer()
}

func RegisterLegacyVendorWebhookAPIServer(s grpc.ServiceRegistrar, srv LegacyVendorWebhookAPIServer) {
	// If the following call pancis, it indicates UnimplementedLegacyVendorWebhookAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LegacyVendorWebhookAPI_ServiceDesc, srv)
}

func _LegacyVendorWebhookAPI_LegacyVendorCreateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LegacyVendorCreateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegacyVendorWebhookAPIServer).LegacyVendorCreateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LegacyVendorWebhookAPI_LegacyVendorCreateWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegacyVendorWebhookAPIServer).LegacyVendorCreateWebhook(ctx, req.(*LegacyVendorCreateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LegacyVendorWebhookAPI_ServiceDesc is the grpc.ServiceDesc for LegacyVendorWebhookAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LegacyVendorWebhookAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.webhook.v1.LegacyVendorWebhookAPI",
	HandlerType: (*LegacyVendorWebhookAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LegacyVendorCreateWebhook",
			Handler:    _LegacyVendorWebhookAPI_LegacyVendorCreateWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/webhook/v1/api_vendor_webhook.proto",
}
