// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/support/v1/vendor_support.proto

package supportv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SupportAPI_ListSupportRequest_FullMethodName   = "/api.support.v1.SupportAPI/ListSupportRequest"
	SupportAPI_CreateSupportRequest_FullMethodName = "/api.support.v1.SupportAPI/CreateSupportRequest"
)

// SupportAPIClient is the client API for SupportAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupportAPIClient interface {
	ListSupportRequest(ctx context.Context, in *ListSupportRequestRequest, opts ...grpc.CallOption) (*ListSupportRequestResponse, error)
	CreateSupportRequest(ctx context.Context, in *CreateSupportRequestRequest, opts ...grpc.CallOption) (*GetSupportRequestResponse, error)
}

type supportAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSupportAPIClient(cc grpc.ClientConnInterface) SupportAPIClient {
	return &supportAPIClient{cc}
}

func (c *supportAPIClient) ListSupportRequest(ctx context.Context, in *ListSupportRequestRequest, opts ...grpc.CallOption) (*ListSupportRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSupportRequestResponse)
	err := c.cc.Invoke(ctx, SupportAPI_ListSupportRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportAPIClient) CreateSupportRequest(ctx context.Context, in *CreateSupportRequestRequest, opts ...grpc.CallOption) (*GetSupportRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupportRequestResponse)
	err := c.cc.Invoke(ctx, SupportAPI_CreateSupportRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupportAPIServer is the server API for SupportAPI service.
// All implementations should embed UnimplementedSupportAPIServer
// for forward compatibility.
type SupportAPIServer interface {
	ListSupportRequest(context.Context, *ListSupportRequestRequest) (*ListSupportRequestResponse, error)
	CreateSupportRequest(context.Context, *CreateSupportRequestRequest) (*GetSupportRequestResponse, error)
}

// UnimplementedSupportAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSupportAPIServer struct{}

func (UnimplementedSupportAPIServer) ListSupportRequest(context.Context, *ListSupportRequestRequest) (*ListSupportRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupportRequest not implemented")
}
func (UnimplementedSupportAPIServer) CreateSupportRequest(context.Context, *CreateSupportRequestRequest) (*GetSupportRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupportRequest not implemented")
}
func (UnimplementedSupportAPIServer) testEmbeddedByValue() {}

// UnsafeSupportAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupportAPIServer will
// result in compilation errors.
type UnsafeSupportAPIServer interface {
	mustEmbedUnimplementedSupportAPIServer()
}

func RegisterSupportAPIServer(s grpc.ServiceRegistrar, srv SupportAPIServer) {
	// If the following call pancis, it indicates UnimplementedSupportAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SupportAPI_ServiceDesc, srv)
}

func _SupportAPI_ListSupportRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSupportRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportAPIServer).ListSupportRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportAPI_ListSupportRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportAPIServer).ListSupportRequest(ctx, req.(*ListSupportRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportAPI_CreateSupportRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupportRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportAPIServer).CreateSupportRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportAPI_CreateSupportRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportAPIServer).CreateSupportRequest(ctx, req.(*CreateSupportRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SupportAPI_ServiceDesc is the grpc.ServiceDesc for SupportAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupportAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.support.v1.SupportAPI",
	HandlerType: (*SupportAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSupportRequest",
			Handler:    _SupportAPI_ListSupportRequest_Handler,
		},
		{
			MethodName: "CreateSupportRequest",
			Handler:    _SupportAPI_CreateSupportRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/support/v1/vendor_support.proto",
}
