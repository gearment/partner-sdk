// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/catalog/v1/vendor_catalog.proto

package catalogv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CatalogAPI_ListProductVariant_FullMethodName     = "/api.catalog.v1.CatalogAPI/ListProductVariant"
	CatalogAPI_ListProductStockStatus_FullMethodName = "/api.catalog.v1.CatalogAPI/ListProductStockStatus"
)

// CatalogAPIClient is the client API for CatalogAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogAPIClient interface {
	ListProductVariant(ctx context.Context, in *ListProductVariantRequest, opts ...grpc.CallOption) (*ListProductVariantResponse, error)
	ListProductStockStatus(ctx context.Context, in *ListProductStockStatusRequest, opts ...grpc.CallOption) (*ListProductStockStatusResponse, error)
}

type catalogAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogAPIClient(cc grpc.ClientConnInterface) CatalogAPIClient {
	return &catalogAPIClient{cc}
}

func (c *catalogAPIClient) ListProductVariant(ctx context.Context, in *ListProductVariantRequest, opts ...grpc.CallOption) (*ListProductVariantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProductVariantResponse)
	err := c.cc.Invoke(ctx, CatalogAPI_ListProductVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogAPIClient) ListProductStockStatus(ctx context.Context, in *ListProductStockStatusRequest, opts ...grpc.CallOption) (*ListProductStockStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProductStockStatusResponse)
	err := c.cc.Invoke(ctx, CatalogAPI_ListProductStockStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogAPIServer is the server API for CatalogAPI service.
// All implementations should embed UnimplementedCatalogAPIServer
// for forward compatibility.
type CatalogAPIServer interface {
	ListProductVariant(context.Context, *ListProductVariantRequest) (*ListProductVariantResponse, error)
	ListProductStockStatus(context.Context, *ListProductStockStatusRequest) (*ListProductStockStatusResponse, error)
}

// UnimplementedCatalogAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCatalogAPIServer struct{}

func (UnimplementedCatalogAPIServer) ListProductVariant(context.Context, *ListProductVariantRequest) (*ListProductVariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductVariant not implemented")
}
func (UnimplementedCatalogAPIServer) ListProductStockStatus(context.Context, *ListProductStockStatusRequest) (*ListProductStockStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductStockStatus not implemented")
}
func (UnimplementedCatalogAPIServer) testEmbeddedByValue() {}

// UnsafeCatalogAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogAPIServer will
// result in compilation errors.
type UnsafeCatalogAPIServer interface {
	mustEmbedUnimplementedCatalogAPIServer()
}

func RegisterCatalogAPIServer(s grpc.ServiceRegistrar, srv CatalogAPIServer) {
	// If the following call pancis, it indicates UnimplementedCatalogAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CatalogAPI_ServiceDesc, srv)
}

func _CatalogAPI_ListProductVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogAPIServer).ListProductVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogAPI_ListProductVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogAPIServer).ListProductVariant(ctx, req.(*ListProductVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogAPI_ListProductStockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductStockStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogAPIServer).ListProductStockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogAPI_ListProductStockStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogAPIServer).ListProductStockStatus(ctx, req.(*ListProductStockStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogAPI_ServiceDesc is the grpc.ServiceDesc for CatalogAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.catalog.v1.CatalogAPI",
	HandlerType: (*CatalogAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProductVariant",
			Handler:    _CatalogAPI_ListProductVariant_Handler,
		},
		{
			MethodName: "ListProductStockStatus",
			Handler:    _CatalogAPI_ListProductStockStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/catalog/v1/vendor_catalog.proto",
}
